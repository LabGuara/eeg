
SPI Communication Test.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001350  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003400  80003400  00003800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001ee  80003600  80003600  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000002  800037ee  800037ee  00003bee  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000008  00000008  800037f0  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000d00  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         000022f0  00000d10  00000d10  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000007c8  00000000  00000000  00003c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000173e  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000166e2  00000000  00000000  00005b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000023f0  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a782  00000000  00000000  0001e618  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001368  00000000  00000000  00028d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004dec  00000000  00000000  0002a104  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000036af  00000000  00000000  0002eef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00989461  00000000  00000000  0003259f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001068  00000000  00000000  009bba00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf d4 4c 	sub	pc,pc,-11188

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf f4 50 	sub	pc,pc,-2992

Disassembly of section .text:

80002008 <ads1299_rdata32>:

/* DATA RETRIEVAL FUNCTIONS **********************************************************************************************************************/

ads1299_error_t ads1299_rdata32(uint8_t chip_select, volatile uint32_t* status_ptr, 
								volatile uint32_t sample_idx, volatile signal_t channel_array[][SIGNAL_BUFFER_SIZE])
{
80002008:	d4 21       	pushm	r4-r7,lr
8000200a:	20 3d       	sub	sp,12
8000200c:	50 0a       	stdsp	sp[0x0],r10
	#if UC3
	uint8_t channel_idx;
	volatile uint32_t statustemp = 0;
8000200e:	30 08       	mov	r8,0
80002010:	50 18       	stdsp	sp[0x4],r8

/* DATA RETRIEVAL FUNCTIONS **********************************************************************************************************************/

ads1299_error_t ads1299_rdata32(uint8_t chip_select, volatile uint32_t* status_ptr, 
								volatile uint32_t sample_idx, volatile signal_t channel_array[][SIGNAL_BUFFER_SIZE])
{
80002012:	16 97       	mov	r7,r11
	#if UC3
	uint8_t channel_idx;
	volatile uint32_t statustemp = 0;
	volatile signal_t sigtemp = 0;
80002014:	ba 58       	st.h	sp[0xa],r8
	
	/* Begin SPI comms and send read data command */
	spi_selectChip(SPI_ADDRESS, chip_select);
80002016:	18 9b       	mov	r11,r12

/* DATA RETRIEVAL FUNCTIONS **********************************************************************************************************************/

ads1299_error_t ads1299_rdata32(uint8_t chip_select, volatile uint32_t* status_ptr, 
								volatile uint32_t sample_idx, volatile signal_t channel_array[][SIGNAL_BUFFER_SIZE])
{
80002018:	18 96       	mov	r6,r12
8000201a:	12 95       	mov	r5,r9
	uint8_t channel_idx;
	volatile uint32_t statustemp = 0;
	volatile signal_t sigtemp = 0;
	
	/* Begin SPI comms and send read data command */
	spi_selectChip(SPI_ADDRESS, chip_select);
8000201c:	fe 7c 40 00 	mov	r12,-49152
80002020:	e0 a0 04 89 	rcall	80002932 <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002024:	fe 7a 40 00 	mov	r10,-49152
80002028:	74 48       	ld.w	r8,r10[0x10]
8000202a:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000202e:	e2 18 00 02 	andl	r8,0x2,COH
80002032:	cf b0       	breq	80002028 <ads1299_rdata32+0x20>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002034:	31 28       	mov	r8,18
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002036:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002038:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000203a:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000203c:	ed b8 00 09 	bld	r8,0x9
80002040:	cf d1       	brne	8000203a <ads1299_rdata32+0x32>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002042:	fe 7a 40 00 	mov	r10,-49152
80002046:	74 48       	ld.w	r8,r10[0x10]
80002048:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000204c:	e2 18 00 02 	andl	r8,0x2,COH
80002050:	cf b0       	breq	80002046 <ads1299_rdata32+0x3e>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002052:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002054:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002056:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002058:	74 48       	ld.w	r8,r10[0x10]
8000205a:	fe 79 40 00 	mov	r9,-49152
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000205e:	e2 18 02 00 	andl	r8,0x200,COH
80002062:	cf b0       	breq	80002058 <ads1299_rdata32+0x50>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002064:	72 28       	ld.w	r8,r9[0x8]
	
	ads1299_send_byte_no_cs(ADS1299_OPC_RDATA);
		
	/* Read in status word first (24 bits) */
	ads1299_send_byte_no_cs(DUMMY_BYTE);
	statustemp = (uint32_t) spi_get(SPI_ADDRESS);
80002066:	5c 78       	castu.h	r8
80002068:	50 18       	stdsp	sp[0x4],r8
	statustemp *= 65536;
8000206a:	40 18       	lddsp	r8,sp[0x4]
8000206c:	b1 68       	lsl	r8,0x10
8000206e:	50 18       	stdsp	sp[0x4],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002070:	12 9a       	mov	r10,r9
	(*status_ptr) = statustemp;
80002072:	40 18       	lddsp	r8,sp[0x4]
80002074:	8f 08       	st.w	r7[0x0],r8
80002076:	74 48       	ld.w	r8,r10[0x10]
80002078:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000207c:	e2 18 00 02 	andl	r8,0x2,COH
80002080:	cf b0       	breq	80002076 <ads1299_rdata32+0x6e>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002082:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002084:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002086:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002088:	74 48       	ld.w	r8,r10[0x10]
8000208a:	fe 79 40 00 	mov	r9,-49152
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000208e:	e2 18 02 00 	andl	r8,0x200,COH
80002092:	cf b0       	breq	80002088 <ads1299_rdata32+0x80>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002094:	72 28       	ld.w	r8,r9[0x8]
		
	ads1299_send_byte_no_cs(DUMMY_BYTE);
	statustemp = (uint32_t) spi_get(SPI_ADDRESS);
80002096:	5c 78       	castu.h	r8
80002098:	50 18       	stdsp	sp[0x4],r8
	statustemp *= 256;
8000209a:	40 18       	lddsp	r8,sp[0x4]
8000209c:	a9 68       	lsl	r8,0x8
8000209e:	50 18       	stdsp	sp[0x4],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800020a0:	12 9a       	mov	r10,r9
	(*status_ptr) += statustemp;
800020a2:	6e 09       	ld.w	r9,r7[0x0]
800020a4:	40 18       	lddsp	r8,sp[0x4]
800020a6:	f2 08 00 08 	add	r8,r9,r8
800020aa:	8f 08       	st.w	r7[0x0],r8
800020ac:	74 48       	ld.w	r8,r10[0x10]
800020ae:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800020b2:	e2 18 00 02 	andl	r8,0x2,COH
800020b6:	cf b0       	breq	800020ac <ads1299_rdata32+0xa4>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800020b8:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800020ba:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800020bc:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800020be:	74 48       	ld.w	r8,r10[0x10]
800020c0:	fe 79 40 00 	mov	r9,-49152
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800020c4:	e2 18 02 00 	andl	r8,0x200,COH
800020c8:	cf b0       	breq	800020be <ads1299_rdata32+0xb6>
		
	ads1299_send_byte_no_cs(DUMMY_BYTE);
	(*status_ptr) += (uint32_t) spi_get(SPI_ADDRESS);
800020ca:	6e 0a       	ld.w	r10,r7[0x0]
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800020cc:	12 98       	mov	r8,r9
800020ce:	30 0b       	mov	r11,0
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
800020d0:	72 29       	ld.w	r9,r9[0x8]
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800020d2:	16 9c       	mov	r12,r11
800020d4:	5c 79       	castu.h	r9
800020d6:	f4 09 00 09 	add	r9,r10,r9
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800020da:	10 9a       	mov	r10,r8
800020dc:	8f 09       	st.w	r7[0x0],r9
	
	/* Begin reading in data */	
	for (channel_idx = 0; channel_idx < MAX_CHANNELS; channel_idx++)
800020de:	30 67       	mov	r7,6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800020e0:	70 49       	ld.w	r9,r8[0x10]
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800020e2:	ed b9 00 01 	bld	r9,0x1
800020e6:	cf d1       	brne	800020e0 <ads1299_rdata32+0xd8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800020e8:	91 3c       	st.w	r8[0xc],r12
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800020ea:	70 49       	ld.w	r9,r8[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800020ec:	ed b9 00 09 	bld	r9,0x9
800020f0:	cf d1       	brne	800020ea <ads1299_rdata32+0xe2>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
800020f2:	74 29       	ld.w	r9,r10[0x8]
	{
		ads1299_send_byte_no_cs(DUMMY_BYTE);
		
		sigtemp = (signal_t) spi_get(SPI_ADDRESS);
800020f4:	ba 59       	st.h	sp[0xa],r9
		#ifdef USE_32_BIT_DATA
		sigtemp *= 65536;
		#else
		sigtemp *= 256;
800020f6:	9a 59       	ld.sh	r9,sp[0xa]
800020f8:	a9 69       	lsl	r9,0x8
800020fa:	ba 59       	st.h	sp[0xa],r9
		#endif
		channel_array[channel_idx][sample_idx] = sigtemp;
800020fc:	40 09       	lddsp	r9,sp[0x0]
800020fe:	9a 5e       	ld.sh	lr,sp[0xa]
80002100:	ea 09 0a 1e 	st.h	r5[r9<<0x1],lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002104:	70 49       	ld.w	r9,r8[0x10]
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
80002106:	ed b9 00 01 	bld	r9,0x1
8000210a:	cf d1       	brne	80002104 <ads1299_rdata32+0xfc>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000210c:	95 3c       	st.w	r10[0xc],r12
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000210e:	70 49       	ld.w	r9,r8[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
80002110:	ed b9 00 09 	bld	r9,0x9
80002114:	cf d1       	brne	8000210e <ads1299_rdata32+0x106>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80002116:	74 29       	ld.w	r9,r10[0x8]
			
		ads1299_send_byte_no_cs(DUMMY_BYTE);
		
		sigtemp = (signal_t) spi_get(SPI_ADDRESS);
80002118:	ba 59       	st.h	sp[0xa],r9
		#ifdef USE_32_BIT_DATA
		sigtemp *= 256;
		#endif
		channel_array[channel_idx][sample_idx] += sigtemp;
8000211a:	40 09       	lddsp	r9,sp[0x0]
8000211c:	ea 09 04 14 	ld.sh	r4,r5[r9<<0x1]
80002120:	9a 5e       	ld.sh	lr,sp[0xa]
80002122:	e8 0e 00 0e 	add	lr,r4,lr
80002126:	ea 09 0a 1e 	st.h	r5[r9<<0x1],lr
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8000212a:	70 49       	ld.w	r9,r8[0x10]
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000212c:	ed b9 00 01 	bld	r9,0x1
80002130:	cf d1       	brne	8000212a <ads1299_rdata32+0x122>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002132:	95 3c       	st.w	r10[0xc],r12
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002134:	70 49       	ld.w	r9,r8[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
80002136:	ed b9 00 09 	bld	r9,0x9
8000213a:	cf d1       	brne	80002134 <ads1299_rdata32+0x12c>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8000213c:	74 29       	ld.w	r9,r10[0x8]
			
		ads1299_send_byte_no_cs(DUMMY_BYTE);
		
		sigtemp = (signal_t) spi_get(SPI_ADDRESS);
8000213e:	ba 59       	st.h	sp[0xa],r9
		
	ads1299_send_byte_no_cs(DUMMY_BYTE);
	(*status_ptr) += (uint32_t) spi_get(SPI_ADDRESS);
	
	/* Begin reading in data */	
	for (channel_idx = 0; channel_idx < MAX_CHANNELS; channel_idx++)
80002140:	2f fb       	sub	r11,-1
80002142:	ea c5 fe 00 	sub	r5,r5,-512
80002146:	5c 5b       	castu.b	r11
80002148:	ee 0b 18 00 	cp.b	r11,r7
8000214c:	cc a1       	brne	800020e0 <ads1299_rdata32+0xd8>
		#ifdef USE_32_BIT_DATA
		channel_array[channel_idx][sample_idx] += sigtemp;
		#endif
	}
		
	spi_unselectChip(SPI_ADDRESS, chip_select);
8000214e:	0c 9b       	mov	r11,r6
80002150:	fe 7c 40 00 	mov	r12,-49152
80002154:	e0 a0 04 17 	rcall	80002982 <spi_unselectChip>
		
	return ADS1299_STATUS_OK;
	#else
	#endif	/* #if UC3 */
}
80002158:	2f dd       	sub	sp,-12
8000215a:	d8 2a       	popm	r4-r7,pc,r12=0

8000215c <ads1299_wreg>:
8000215c:	eb cd 40 e0 	pushm	r5-r7,lr
80002160:	18 97       	mov	r7,r12
80002162:	14 95       	mov	r5,r10
	#else
	#endif /* #if UC3 */
}

ads1299_error_t ads1299_wreg(uint8_t chip_select, ads1299_register_address_t reg_addr, uint8_t reg_val_to_write)
{
80002164:	16 96       	mov	r6,r11
	#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
80002166:	18 9b       	mov	r11,r12
80002168:	fe 7c 40 00 	mov	r12,-49152
8000216c:	e0 a0 03 e3 	rcall	80002932 <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002170:	fe 7a 40 00 	mov	r10,-49152
80002174:	74 48       	ld.w	r8,r10[0x10]
80002176:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000217a:	e2 18 00 02 	andl	r8,0x2,COH
8000217e:	cf b0       	breq	80002174 <ads1299_wreg+0x18>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002180:	a7 a6       	sbr	r6,0x6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002182:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002184:	5c 76       	castu.h	r6
80002186:	93 36       	st.w	r9[0xc],r6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002188:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000218a:	ed b8 00 09 	bld	r8,0x9
8000218e:	cf d1       	brne	80002188 <ads1299_wreg+0x2c>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002190:	fe 7a 40 00 	mov	r10,-49152
80002194:	74 48       	ld.w	r8,r10[0x10]
80002196:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000219a:	e2 18 00 02 	andl	r8,0x2,COH
8000219e:	cf b0       	breq	80002194 <ads1299_wreg+0x38>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021a0:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021a2:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021a4:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021a6:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800021a8:	ed b8 00 09 	bld	r8,0x9
800021ac:	cf d1       	brne	800021a6 <ads1299_wreg+0x4a>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800021ae:	fe 7a 40 00 	mov	r10,-49152
800021b2:	74 48       	ld.w	r8,r10[0x10]
800021b4:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800021b8:	e2 18 00 02 	andl	r8,0x2,COH
800021bc:	cf b0       	breq	800021b2 <ads1299_wreg+0x56>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021be:	5c 75       	castu.h	r5
800021c0:	93 35       	st.w	r9[0xc],r5
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021c2:	72 48       	ld.w	r8,r9[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800021c4:	ed b8 00 09 	bld	r8,0x9
800021c8:	cf d1       	brne	800021c2 <ads1299_wreg+0x66>
	ads1299_send_byte_no_cs(0x00);
	
	/* Third byte: write register value */
	ads1299_send_byte_no_cs(reg_val_to_write);
		
	spi_unselectChip(SPI_ADDRESS, chip_select);
800021ca:	0e 9b       	mov	r11,r7
800021cc:	fe 7c 40 00 	mov	r12,-49152
800021d0:	e0 a0 03 d9 	rcall	80002982 <spi_unselectChip>
		
	return ADS1299_STATUS_OK;
	#else
	#endif /* #if UC3 */
}
800021d4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

800021d8 <ads1299_device_init>:
800021d8:	d4 21       	pushm	r4-r7,lr
800021da:	18 95       	mov	r5,r12
800021dc:	31 1c       	mov	r12,17
800021de:	e0 a0 02 89 	rcall	800026f0 <gpio_enable_gpio_pin>
{
	#if UC3
	/* Enable all relevant pins */
	gpio_enable_gpio_pin(ADS1299_PIN_START);
	//gpio_enable_gpio_pin(ADS1299_PIN_DRDY);
	gpio_enable_gpio_pin(ADS1299_PIN_RESET);
800021e2:	32 4c       	mov	r12,36
800021e4:	e0 a0 02 86 	rcall	800026f0 <gpio_enable_gpio_pin>
	//gpio_enable_gpio_pin(ADS1299_PIN_PWDN);
	
	/* Configure I/O as appropriate */
	gpio_configure_pin(ADS1299_PIN_START, GPIO_DIR_OUTPUT);
800021e8:	30 1b       	mov	r11,1
800021ea:	31 1c       	mov	r12,17
800021ec:	e0 a0 02 97 	rcall	8000271a <gpio_configure_pin>
	gpio_configure_pin(ADS1299_PIN_RESET, GPIO_DIR_OUTPUT);
800021f0:	30 1b       	mov	r11,1
800021f2:	32 4c       	mov	r12,36
800021f4:	e0 a0 02 93 	rcall	8000271a <gpio_configure_pin>
	//gpio_configure_pin(ADS1299_PIN_PWDN, GPIO_DIR_OUTPUT);
	
	/* Pull START pin low to prevent spurious conversions while we initialize */
	gpio_clr_gpio_pin(ADS1299_PIN_START);
800021f8:	31 1c       	mov	r12,17
800021fa:	e0 a0 02 dd 	rcall	800027b4 <gpio_clr_gpio_pin>
	
	/* Enable internal pull-ups for active-low output pins */
	gpio_enable_pin_pull_up(ADS1299_PIN_RESET);
800021fe:	32 4c       	mov	r12,36
80002200:	e0 a0 02 83 	rcall	80002706 <gpio_enable_pin_pull_up>
	//gpio_enable_pin_pull_up(ADS1299_PIN_PWDN);
	
	/* Configure external interrupt pin */
	gpio_enable_module_pin(ADS1299_PIN_DRDY, ADS1299_DRDY_INT_FN);
80002204:	30 6b       	mov	r11,6
80002206:	32 7c       	mov	r12,39
80002208:	e0 a0 02 12 	rcall	8000262c <gpio_enable_module_pin>
	gpio_enable_pin_pull_up(ADS1299_PIN_DRDY);
8000220c:	32 7c       	mov	r12,39
8000220e:	e0 a0 02 7c 	rcall	80002706 <gpio_enable_pin_pull_up>
	
	/* Hold RESET high for 200ms to allow oscillator and reference warm-up */
	gpio_set_gpio_pin(ADS1299_PIN_RESET);
80002212:	32 4c       	mov	r12,36
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002214:	e0 66 90 00 	mov	r6,36864
80002218:	ea 16 00 98 	orh	r6,0x98
8000221c:	e0 a0 02 bf 	rcall	8000279a <gpio_set_gpio_pin>
80002220:	30 07       	mov	r7,0
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002222:	e1 b4 00 42 	mfsr	r4,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002226:	e0 68 03 e7 	mov	r8,999
8000222a:	30 09       	mov	r9,0
8000222c:	e0 6b 00 c8 	mov	r11,200
80002230:	ec 0b 06 4a 	mulu.d	r10,r6,r11
80002234:	10 0a       	add	r10,r8
80002236:	f6 09 00 4b 	adc	r11,r11,r9
8000223a:	e0 68 03 e8 	mov	r8,1000
8000223e:	30 09       	mov	r9,0
80002240:	e0 a0 07 5a 	rcall	800030f4 <__avr32_udiv64>
80002244:	e8 0a 00 0a 	add	r10,r4,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002248:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000224c:	14 34       	cp.w	r4,r10
8000224e:	e0 88 00 72 	brls	80002332 <ads1299_device_init+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002252:	10 34       	cp.w	r4,r8
80002254:	fe 98 ff fa 	brls	80002248 <ads1299_device_init+0x70>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002258:	10 3a       	cp.w	r10,r8
8000225a:	cf 72       	brcc	80002248 <ads1299_device_init+0x70>
	delay_ms(200);
	/* Issue RESET pulse to initialize ADS1299 registers */
	gpio_clr_gpio_pin(ADS1299_PIN_RESET);
8000225c:	32 4c       	mov	r12,36
8000225e:	e0 a0 02 ab 	rcall	800027b4 <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002262:	e1 b4 00 42 	mfsr	r4,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002266:	ee 78 42 40 	mov	r8,1000000
8000226a:	30 09       	mov	r9,0
8000226c:	ee 7a 42 3f 	mov	r10,999999
80002270:	30 0b       	mov	r11,0
80002272:	ec 0a 00 0a 	add	r10,r6,r10
80002276:	ee 0b 00 4b 	adc	r11,r7,r11
8000227a:	e0 a0 07 3d 	rcall	800030f4 <__avr32_udiv64>
8000227e:	e8 0a 00 0a 	add	r10,r4,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002282:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002286:	14 34       	cp.w	r4,r10
80002288:	e0 88 00 0c 	brls	800022a0 <ads1299_device_init+0xc8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000228c:	10 34       	cp.w	r4,r8
8000228e:	e0 88 00 04 	brls	80002296 <ads1299_device_init+0xbe>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002292:	10 3a       	cp.w	r10,r8
80002294:	c0 93       	brcs	800022a6 <ads1299_device_init+0xce>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002296:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000229a:	14 34       	cp.w	r4,r10
8000229c:	fe 9b ff f8 	brhi	8000228c <ads1299_device_init+0xb4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022a0:	10 34       	cp.w	r4,r8
800022a2:	fe 98 ff f8 	brls	80002292 <ads1299_device_init+0xba>
	delay_us(1);
	gpio_set_gpio_pin(ADS1299_PIN_RESET);
800022a6:	32 4c       	mov	r12,36
800022a8:	e0 a0 02 79 	rcall	8000279a <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ac:	e1 b4 00 42 	mfsr	r4,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022b0:	30 a9       	mov	r9,10
800022b2:	ec 09 06 48 	mulu.d	r8,r6,r9
800022b6:	ee 07 10 0a 	mul	r7,r7,10
800022ba:	ee 7a 42 3f 	mov	r10,999999
800022be:	ee 09 00 09 	add	r9,r7,r9
800022c2:	30 0b       	mov	r11,0
800022c4:	f0 0a 00 0a 	add	r10,r8,r10
800022c8:	f2 0b 00 4b 	adc	r11,r9,r11
800022cc:	ee 78 42 40 	mov	r8,1000000
800022d0:	30 09       	mov	r9,0
800022d2:	e0 a0 07 11 	rcall	800030f4 <__avr32_udiv64>
800022d6:	e8 0a 00 0a 	add	r10,r4,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022da:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022de:	14 34       	cp.w	r4,r10
800022e0:	e0 88 00 0c 	brls	800022f8 <ads1299_device_init+0x120>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022e4:	10 34       	cp.w	r4,r8
800022e6:	e0 88 00 04 	brls	800022ee <ads1299_device_init+0x116>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022ea:	10 3a       	cp.w	r10,r8
800022ec:	c0 93       	brcs	800022fe <ads1299_device_init+0x126>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022ee:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022f2:	14 34       	cp.w	r4,r10
800022f4:	fe 9b ff f8 	brhi	800022e4 <ads1299_device_init+0x10c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022f8:	10 34       	cp.w	r4,r8
800022fa:	fe 98 ff f8 	brls	800022ea <ads1299_device_init+0x112>
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte(uint8_t chip_select, ads1299_opcode_t opcode)
{
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
800022fe:	0a 9b       	mov	r11,r5
80002300:	fe 7c 40 00 	mov	r12,-49152
80002304:	e0 a0 03 17 	rcall	80002932 <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002308:	fe 79 40 00 	mov	r9,-49152
8000230c:	72 48       	ld.w	r8,r9[0x10]
8000230e:	fe 7a 40 00 	mov	r10,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(ads1299_opcode_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
80002312:	e2 18 00 02 	andl	r8,0x2,COH
80002316:	cf b0       	breq	8000230c <ads1299_device_init+0x134>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002318:	31 18       	mov	r8,17
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000231a:	14 99       	mov	r9,r10
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000231c:	95 38       	st.w	r10[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000231e:	72 48       	ld.w	r8,r9[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
80002320:	ed b8 00 09 	bld	r8,0x9
80002324:	cf d1       	brne	8000231e <ads1299_device_init+0x146>
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
	
	ads1299_send_byte_no_cs(opcode);
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002326:	0a 9b       	mov	r11,r5
80002328:	fe 7c 40 00 	mov	r12,-49152
8000232c:	e0 a0 03 2b 	rcall	80002982 <spi_unselectChip>
	//ads1299_hard_start_conversion();
		
	return ADS1299_STATUS_OK;
	#else
	#endif /* #if UC3 */
}
80002330:	d8 2a       	popm	r4-r7,pc,r12=0
80002332:	10 34       	cp.w	r4,r8
80002334:	fe 9b ff 94 	brhi	8000225c <ads1299_device_init+0x84>
80002338:	c9 0b       	rjmp	80002258 <ads1299_device_init+0x80>
8000233a:	d7 03       	nop

8000233c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000233c:	eb cd 40 80 	pushm	r7,lr
80002340:	21 4d       	sub	sp,80
			{AT45DBX_SPI_MOSI_PIN, AT45DBX_SPI_MOSI_FUNCTION},  // MOSI.
#  define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
		{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
			MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
		};
80002342:	4a 69       	lddpc	r9,800023d8 <board_init+0x9c>
80002344:	fa ca ff f0 	sub	r10,sp,-16
80002348:	f2 ce ff f0 	sub	lr,r9,-16
8000234c:	7c 3b       	ld.w	r11,lr[0xc]
8000234e:	95 3b       	st.w	r10[0xc],r11
80002350:	72 07       	ld.w	r7,r9[0x0]
80002352:	50 07       	stdsp	sp[0x0],r7
80002354:	72 17       	ld.w	r7,r9[0x4]
80002356:	50 17       	stdsp	sp[0x4],r7
80002358:	72 27       	ld.w	r7,r9[0x8]
8000235a:	50 27       	stdsp	sp[0x8],r7
8000235c:	72 39       	ld.w	r9,r9[0xc]
8000235e:	50 39       	stdsp	sp[0xc],r9
80002360:	7c 08       	ld.w	r8,lr[0x0]
80002362:	95 08       	st.w	r10[0x0],r8
80002364:	7c 18       	ld.w	r8,lr[0x4]
80002366:	95 18       	st.w	r10[0x4],r8
80002368:	7c 28       	ld.w	r8,lr[0x8]

	gpio_enable_module( AT45DBX_SPI_GPIO_MAP,
8000236a:	30 4b       	mov	r11,4
			{AT45DBX_SPI_MOSI_PIN, AT45DBX_SPI_MOSI_FUNCTION},  // MOSI.
#  define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
		{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
			MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
		};
8000236c:	95 28       	st.w	r10[0x8],r8

	gpio_enable_module( AT45DBX_SPI_GPIO_MAP,
8000236e:	1a 9c       	mov	r12,sp
80002370:	ca cd       	rcall	800026c8 <gpio_enable_module>
80002372:	3f fc       	mov	r12,-1
	/* Configure the pins connected to LEDs as output and set their
	* default initial state to high (LEDs off).  Note that on
	* UC3-L0-Xplained, the LEDs have to be turned off in order to
	* sense the button-values.
	*/
	LED_Off((U32) -1);
80002374:	c3 ac       	rcall	800023e8 <LED_Off>
80002376:	30 4b       	mov	r11,4
80002378:	30 bc       	mov	r12,11

#if defined (SHARED_PIN_PA11_IS_INPUT)
	// Set push button as input
	gpio_configure_pin(GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000237a:	cd 0d       	rcall	8000271a <gpio_configure_pin>
8000237c:	49 89       	lddpc	r9,800023dc <board_init+0xa0>
8000237e:	72 3a       	ld.w	r10,r9[0xc]
80002380:	fa c8 ff c0 	sub	r8,sp,-64
	// TWI Master GPIO pin configuration.
	gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
80002384:	91 3a       	st.w	r8[0xc],r10
80002386:	72 0a       	ld.w	r10,r9[0x0]
80002388:	91 0a       	st.w	r8[0x0],r10
8000238a:	72 1a       	ld.w	r10,r9[0x4]
8000238c:	91 1a       	st.w	r8[0x4],r10
8000238e:	72 29       	ld.w	r9,r9[0x8]
80002390:	30 2b       	mov	r11,2
80002392:	91 29       	st.w	r8[0x8],r9
80002394:	10 9c       	mov	r12,r8

	gpio_enable_module(TWI_GPIO_MAP,
80002396:	c9 9d       	rcall	800026c8 <gpio_enable_module>
	// TWI Master GPIO pin configuration.
	gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
80002398:	49 29       	lddpc	r9,800023e0 <board_init+0xa4>

	gpio_enable_module(TWI_GPIO_MAP,
8000239a:	72 3a       	ld.w	r10,r9[0xc]
8000239c:	fa c8 ff d0 	sub	r8,sp,-48
	// USART on USB Virtual Com GPIO pin configuration.
	gpio_map_t COMPORT_GPIO_MAP =
		{
			{ USART_RXD_PIN, USART_RXD_FUNCTION },
			{ USART_TXD_PIN, USART_TXD_FUNCTION }
		};
800023a0:	91 3a       	st.w	r8[0xc],r10
800023a2:	72 0a       	ld.w	r10,r9[0x0]
800023a4:	91 0a       	st.w	r8[0x0],r10
800023a6:	72 1a       	ld.w	r10,r9[0x4]
800023a8:	91 1a       	st.w	r8[0x4],r10
800023aa:	72 29       	ld.w	r9,r9[0x8]
800023ac:	30 2b       	mov	r11,2
800023ae:	91 29       	st.w	r8[0x8],r9
800023b0:	10 9c       	mov	r12,r8
800023b2:	c8 bd       	rcall	800026c8 <gpio_enable_module>

	gpio_enable_module(COMPORT_GPIO_MAP,
800023b4:	48 c9       	lddpc	r9,800023e4 <board_init+0xa8>
	// USART on USB Virtual Com GPIO pin configuration.
	gpio_map_t COMPORT_GPIO_MAP =
		{
			{ USART_RXD_PIN, USART_RXD_FUNCTION },
			{ USART_TXD_PIN, USART_TXD_FUNCTION }
		};
800023b6:	72 3a       	ld.w	r10,r9[0xc]

	gpio_enable_module(COMPORT_GPIO_MAP,
800023b8:	fa c8 ff e0 	sub	r8,sp,-32
800023bc:	91 3a       	st.w	r8[0xc],r10
	// USART on J4 header GPIO pin configuration.
	gpio_map_t COMPORT0_GPIO_MAP =
		{
			{ USART0_RXD_PIN, USART0_RXD_FUNCTION },
			{ USART0_TXD_PIN, USART0_TXD_FUNCTION }
		};
800023be:	72 0a       	ld.w	r10,r9[0x0]
800023c0:	91 0a       	st.w	r8[0x0],r10
800023c2:	72 1a       	ld.w	r10,r9[0x4]
800023c4:	91 1a       	st.w	r8[0x4],r10
800023c6:	72 29       	ld.w	r9,r9[0x8]
800023c8:	30 2b       	mov	r11,2
800023ca:	10 9c       	mov	r12,r8
800023cc:	91 29       	st.w	r8[0x8],r9
800023ce:	c7 dd       	rcall	800026c8 <gpio_enable_module>
800023d0:	2e cd       	sub	sp,-80

	gpio_enable_module(COMPORT0_GPIO_MAP,
800023d2:	e3 cd 80 80 	ldm	sp++,r7,pc
	// USART on J4 header GPIO pin configuration.
	gpio_map_t COMPORT0_GPIO_MAP =
		{
			{ USART0_RXD_PIN, USART0_RXD_FUNCTION },
			{ USART0_TXD_PIN, USART0_TXD_FUNCTION }
		};
800023d6:	d7 03       	nop

	gpio_enable_module(COMPORT0_GPIO_MAP,
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	36 00       	mov	r0,96
	* the platform Xplained board has configured basic clock settings,
	* GPIO pin mapping, interrupt controller options, etc.
	*/
	sensor_board_init();
#endif
}
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	36 40       	mov	r0,100
800023e0:	80 00       	ld.sh	r0,r0[0x0]
800023e2:	36 30       	mov	r0,99
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	36 20       	mov	r0,98

800023e8 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
800023e8:	d4 01       	pushm	lr

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800023ea:	49 98       	lddpc	r8,8000244c <LED_Off+0x64>
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800023ec:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800023f0:	70 09       	ld.w	r9,r8[0x0]
800023f2:	f8 0a 11 ff 	rsub	r10,r12,-1
800023f6:	f5 e9 00 09 	and	r9,r10,r9
800023fa:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds) {
800023fc:	58 0c       	cp.w	r12,0
800023fe:	c2 50       	breq	80002448 <LED_Off+0x60>
80002400:	49 48       	lddpc	r8,80002450 <LED_Off+0x68>
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
    led_descriptor += led_shift;
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];

	if (led_descriptor->polarity) {
80002402:	30 0e       	mov	lr,0

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds) {
80002404:	21 48       	sub	r8,20
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002406:	18 9a       	mov	r10,r12
80002408:	5c 9a       	brev	r10
8000240a:	f4 0a 12 00 	clz	r10,r10
8000240e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002410:	f4 0a 00 29 	add	r9,r10,r10<<0x2
80002414:	f0 09 00 28 	add	r8,r8,r9<<0x2
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002418:	70 09       	ld.w	r9,r8[0x0]

	if (led_descriptor->polarity) {
8000241a:	f1 3b 00 10 	ld.ub	r11,r8[16]
  // While there are specified LEDs left to manage...
  while (leds) {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
    led_descriptor += led_shift;
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000241e:	a9 79       	lsl	r9,0x9
80002420:	e0 29 d4 00 	sub	r9,54272

	if (led_descriptor->polarity) {
		led_gpio_port->ovrc = led_descriptor->GPIO.PIN_MASK;
80002424:	fc 0b 18 00 	cp.b	r11,lr
80002428:	f1 fb 10 01 	ld.wne	r11,r8[0x4]
8000242c:	f3 fb 1a 16 	st.wne	r9[0x58],r11
    } else {
		led_gpio_port->ovrs = led_descriptor->GPIO.PIN_MASK;
80002430:	f1 fb 00 01 	ld.weq	r11,r8[0x4]
80002434:	f3 fb 0a 15 	st.weq	r9[0x54],r11
	}

    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK; //set as output
80002438:	70 1b       	ld.w	r11,r8[0x4]
8000243a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK; //enable IO
8000243e:	70 1b       	ld.w	r11,r8[0x4]
80002440:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002442:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds) {
80002446:	ce 01       	brne	80002406 <LED_Off+0x1e>
80002448:	d8 02       	popm	pc
8000244a:	d7 03       	nop
8000244c:	00 00       	add	r0,r0
8000244e:	00 08       	add	r8,r0
80002450:	80 00       	ld.sh	r0,r0[0x0]
80002452:	36 50       	mov	r0,101

80002454 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002454:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002458:	58 0a       	cp.w	r10,0
8000245a:	c7 70       	breq	80002548 <eic_init+0xf4>
#include "preprocessor.h"
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
8000245c:	30 08       	mov	r8,0
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000245e:	30 19       	mov	r9,1
#include "preprocessor.h"
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
80002460:	10 97       	mov	r7,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002462:	30 1e       	mov	lr,1
80002464:	c3 88       	rjmp	800024d4 <eic_init+0x80>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002466:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002468:	11 86       	ld.ub	r6,r8[0x0]
8000246a:	fc 06 09 46 	lsl	r6,lr,r6
8000246e:	5c d6       	com	r6
80002470:	0a 66       	and	r6,r5
80002472:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002474:	11 a6       	ld.ub	r6,r8[0x2]
80002476:	f2 06 18 00 	cp.b	r6,r9
8000247a:	c3 f0       	breq	800024f8 <eic_init+0xa4>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8000247c:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000247e:	11 86       	ld.ub	r6,r8[0x0]
80002480:	fc 06 09 46 	lsl	r6,lr,r6
80002484:	5c d6       	com	r6
80002486:	0a 66       	and	r6,r5
80002488:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000248a:	11 b6       	ld.ub	r6,r8[0x3]
8000248c:	f2 06 18 00 	cp.b	r6,r9
80002490:	c3 e0       	breq	8000250c <eic_init+0xb8>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002492:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002494:	11 86       	ld.ub	r6,r8[0x0]
80002496:	fc 06 09 46 	lsl	r6,lr,r6
8000249a:	5c d6       	com	r6
8000249c:	0a 66       	and	r6,r5
8000249e:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
800024a0:	11 c6       	ld.ub	r6,r8[0x4]
800024a2:	f2 06 18 00 	cp.b	r6,r9
800024a6:	c3 d0       	breq	80002520 <eic_init+0xcc>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
800024a8:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
800024aa:	11 86       	ld.ub	r6,r8[0x0]
800024ac:	fc 06 09 46 	lsl	r6,lr,r6
800024b0:	5c d6       	com	r6
800024b2:	0a 66       	and	r6,r5
800024b4:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024b6:	11 d6       	ld.ub	r6,r8[0x5]
800024b8:	f2 06 18 00 	cp.b	r6,r9
800024bc:	c3 c0       	breq	80002534 <eic_init+0xe0>
800024be:	11 88       	ld.ub	r8,r8[0x0]
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800024c0:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800024c2:	fc 08 09 48 	lsl	r8,lr,r8
800024c6:	5c d8       	com	r8
800024c8:	0c 68       	and	r8,r6
800024ca:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800024cc:	2f f7       	sub	r7,-1
800024ce:	0e 98       	mov	r8,r7
800024d0:	14 37       	cp.w	r7,r10
800024d2:	c3 b0       	breq	80002548 <eic_init+0xf4>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800024d4:	f0 08 00 18 	add	r8,r8,r8<<0x1
800024d8:	f6 08 00 18 	add	r8,r11,r8<<0x1
800024dc:	11 96       	ld.ub	r6,r8[0x1]
800024de:	f2 06 18 00 	cp.b	r6,r9
800024e2:	cc 21       	brne	80002466 <eic_init+0x12>
			? (eic->mode | (1 << opt[i].eic_line))
800024e4:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800024e6:	11 86       	ld.ub	r6,r8[0x0]
800024e8:	fc 06 09 46 	lsl	r6,lr,r6
800024ec:	0a 46       	or	r6,r5
800024ee:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800024f0:	11 a6       	ld.ub	r6,r8[0x2]
800024f2:	f2 06 18 00 	cp.b	r6,r9
800024f6:	cc 31       	brne	8000247c <eic_init+0x28>
			? (eic->edge | (1 << opt[i].eic_line))
800024f8:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800024fa:	11 86       	ld.ub	r6,r8[0x0]
800024fc:	fc 06 09 46 	lsl	r6,lr,r6
80002500:	0a 46       	or	r6,r5
80002502:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002504:	11 b6       	ld.ub	r6,r8[0x3]
80002506:	f2 06 18 00 	cp.b	r6,r9
8000250a:	cc 41       	brne	80002492 <eic_init+0x3e>
			? (eic->level | (1 << opt[i].eic_line))
8000250c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000250e:	11 86       	ld.ub	r6,r8[0x0]
80002510:	fc 06 09 46 	lsl	r6,lr,r6
80002514:	0a 46       	or	r6,r5
80002516:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002518:	11 c6       	ld.ub	r6,r8[0x4]
8000251a:	f2 06 18 00 	cp.b	r6,r9
8000251e:	cc 51       	brne	800024a8 <eic_init+0x54>
			? (eic->filter | (1 << opt[i].eic_line))
80002520:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002522:	11 86       	ld.ub	r6,r8[0x0]
80002524:	fc 06 09 46 	lsl	r6,lr,r6
80002528:	0a 46       	or	r6,r5
8000252a:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000252c:	11 d6       	ld.ub	r6,r8[0x5]
8000252e:	f2 06 18 00 	cp.b	r6,r9
80002532:	cc 61       	brne	800024be <eic_init+0x6a>
80002534:	11 88       	ld.ub	r8,r8[0x0]
			? (eic->async | (1 << opt[i].eic_line))
80002536:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002538:	fc 08 09 48 	lsl	r8,lr,r8
8000253c:	0c 48       	or	r8,r6
8000253e:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80002540:	2f f7       	sub	r7,-1
80002542:	0e 98       	mov	r8,r7
80002544:	14 37       	cp.w	r7,r10
80002546:	cc 71       	brne	800024d4 <eic_init+0x80>
80002548:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000254c <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
8000254c:	30 18       	mov	r8,1
8000254e:	f0 0b 09 48 	lsl	r8,r8,r11
80002552:	99 c8       	st.w	r12[0x30],r8
}
80002554:	5e fc       	retal	r12

80002556 <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
80002556:	30 18       	mov	r8,1
80002558:	f0 0b 09 48 	lsl	r8,r8,r11
8000255c:	99 08       	st.w	r12[0x0],r8
}
8000255e:	5e fc       	retal	r12

80002560 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002560:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002564:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
80002566:	30 19       	mov	r9,1
80002568:	f2 0b 09 4b 	lsl	r11,r9,r11
8000256c:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
8000256e:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002570:	ed b8 00 10 	bld	r8,0x10
80002574:	c0 20       	breq	80002578 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
80002576:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002578:	5e fc       	retal	r12

8000257a <flashcdw_default_wait_until_ready>:
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
8000257a:	fe 6a 00 00 	mov	r10,-131072
}


void flashcdw_default_wait_until_ready(void)
{
	while (!flashcdw_is_ready());
8000257e:	30 09       	mov	r9,0
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
80002580:	74 28       	ld.w	r8,r10[0x8]
}


void flashcdw_default_wait_until_ready(void)
{
	while (!flashcdw_is_ready());
80002582:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002586:	f2 08 18 00 	cp.b	r8,r9
8000258a:	cf b0       	breq	80002580 <flashcdw_default_wait_until_ready+0x6>
}
8000258c:	5e fc       	retal	r12
8000258e:	d7 03       	nop

80002590 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002590:	eb cd 40 e0 	pushm	r5-r7,lr
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002594:	48 f6       	lddpc	r6,800025d0 <flashcdw_issue_command+0x40>
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002596:	18 97       	mov	r7,r12
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002598:	6c 08       	ld.w	r8,r6[0x0]
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
8000259a:	16 95       	mov	r5,r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000259c:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000259e:	fe 68 00 00 	mov	r8,-131072
800025a2:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
800025a4:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
800025a8:	58 05       	cp.w	r5,0
800025aa:	c0 35       	brlt	800025b0 <flashcdw_issue_command+0x20>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
800025ac:	f1 d5 d1 10 	bfins	r8,r5,0x8,0x10
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
800025b0:	3a 5a       	mov	r10,-91
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
800025b2:	fe 69 00 00 	mov	r9,-131072
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
800025b6:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
800025ba:	48 7a       	lddpc	r10,800025d4 <flashcdw_issue_command+0x44>
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
800025bc:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800025be:	72 29       	ld.w	r9,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
800025c0:	e2 19 00 0c 	andl	r9,0xc,COH
	flashcdw_wait_until_ready();
800025c4:	6c 08       	ld.w	r8,r6[0x0]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
800025c6:	95 09       	st.w	r10[0x0],r9
	flashcdw_wait_until_ready();
800025c8:	5d 18       	icall	r8
}
800025ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800025ce:	d7 03       	nop
800025d0:	00 00       	add	r0,r0
800025d2:	00 0c       	add	r12,r0
800025d4:	00 00       	add	r0,r0
800025d6:	00 10       	sub	r0,r0

800025d8 <flashcdw_set_flash_waitstate_and_readmode>:
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
}


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800025d8:	d4 01       	pushm	lr
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
800025da:	e0 68 e1 c0 	mov	r8,57792
800025de:	ea 18 00 e4 	orh	r8,0xe4
800025e2:	10 3c       	cp.w	r12,r8
800025e4:	e0 88 00 1f 	brls	80002622 <flashcdw_set_flash_waitstate_and_readmode+0x4a>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
800025e8:	e0 68 c3 80 	mov	r8,50048
800025ec:	ea 18 01 c9 	orh	r8,0x1c9
800025f0:	10 3c       	cp.w	r12,r8
800025f2:	e0 8b 00 0d 	brhi	8000260c <flashcdw_set_flash_waitstate_and_readmode+0x34>
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
800025f6:	fe 68 00 00 	mov	r8,-131072
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
800025fa:	30 1a       	mov	r10,1
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
800025fc:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
800025fe:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002602:	3f fb       	mov	r11,-1

void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80002604:	91 09       	st.w	r8[0x0],r9
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002606:	31 1c       	mov	r12,17
80002608:	cc 4f       	rcall	80002590 <flashcdw_issue_command>
8000260a:	d8 02       	popm	pc
8000260c:	fe 68 00 00 	mov	r8,-131072
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002610:	30 1a       	mov	r10,1
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002612:	70 09       	ld.w	r9,r8[0x0]
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002614:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002618:	3f fb       	mov	r11,-1
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000261a:	91 09       	st.w	r8[0x0],r9

void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000261c:	31 0c       	mov	r12,16
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
8000261e:	cb 9f       	rcall	80002590 <flashcdw_issue_command>
80002620:	d8 02       	popm	pc
80002622:	fe 68 00 00 	mov	r8,-131072
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002626:	30 0a       	mov	r10,0
80002628:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000262a:	ce ab       	rjmp	800025fe <flashcdw_set_flash_waitstate_and_readmode+0x26>

8000262c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000262c:	f8 08 16 05 	lsr	r8,r12,0x5
80002630:	a9 78       	lsl	r8,0x9
80002632:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
80002636:	58 7b       	cp.w	r11,7
80002638:	e0 88 00 03 	brls	8000263e <gpio_enable_module_pin+0x12>
8000263c:	5e ff       	retal	1
8000263e:	4a 29       	lddpc	r9,800026c4 <gpio_enable_module_pin+0x98>
80002640:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
		gpio_port->pmr1c = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002644:	30 19       	mov	r9,1
80002646:	f2 0c 09 4c 	lsl	r12,r9,r12
8000264a:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000264c:	91 9c       	st.w	r8[0x24],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000264e:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002650:	91 2c       	st.w	r8[0x8],r12
80002652:	5e fd       	retal	0
		gpio_port->pmr1s = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002654:	30 19       	mov	r9,1
80002656:	f2 0c 09 4c 	lsl	r12,r9,r12
8000265a:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000265c:	91 9c       	st.w	r8[0x24],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000265e:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002660:	91 2c       	st.w	r8[0x8],r12
80002662:	5e fd       	retal	0
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002664:	30 19       	mov	r9,1
80002666:	f2 0c 09 4c 	lsl	r12,r9,r12
8000266a:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000266c:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000266e:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002670:	91 2c       	st.w	r8[0x8],r12
80002672:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002674:	30 19       	mov	r9,1
80002676:	f2 0c 09 4c 	lsl	r12,r9,r12
8000267a:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000267c:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000267e:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002680:	91 2c       	st.w	r8[0x8],r12
80002682:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002684:	30 19       	mov	r9,1
80002686:	f2 0c 09 4c 	lsl	r12,r9,r12
8000268a:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000268c:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000268e:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002690:	91 2c       	st.w	r8[0x8],r12
80002692:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002694:	30 19       	mov	r9,1
80002696:	f2 0c 09 4c 	lsl	r12,r9,r12
8000269a:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000269c:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000269e:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800026a0:	91 2c       	st.w	r8[0x8],r12
800026a2:	5e fd       	retal	0
#endif
		break;

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800026a4:	30 19       	mov	r9,1
800026a6:	f2 0c 09 4c 	lsl	r12,r9,r12
800026aa:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800026ac:	91 ac       	st.w	r8[0x28],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800026ae:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800026b0:	91 2c       	st.w	r8[0x8],r12
800026b2:	5e fd       	retal	0
		gpio_port->pmr1c = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800026b4:	30 19       	mov	r9,1
800026b6:	f2 0c 09 4c 	lsl	r12,r9,r12
800026ba:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800026bc:	91 ac       	st.w	r8[0x28],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800026be:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800026c0:	91 2c       	st.w	r8[0x8],r12
800026c2:	5e fd       	retal	0
800026c4:	80 00       	ld.sh	r0,r0[0x0]
800026c6:	36 b4       	mov	r4,107

800026c8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800026c8:	d4 21       	pushm	r4-r7,lr
800026ca:	18 97       	mov	r7,r12
800026cc:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800026ce:	58 0b       	cp.w	r11,0
800026d0:	c0 e0       	breq	800026ec <gpio_enable_module+0x24>
800026d2:	30 06       	mov	r6,0
800026d4:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800026d6:	6e 1b       	ld.w	r11,r7[0x4]
800026d8:	6e 0c       	ld.w	r12,r7[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800026da:	2f f6       	sub	r6,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800026dc:	2f 87       	sub	r7,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800026de:	ca 7f       	rcall	8000262c <gpio_enable_module_pin>
800026e0:	18 45       	or	r5,r12
800026e2:	0c 34       	cp.w	r4,r6
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800026e4:	fe 9b ff f9 	brhi	800026d6 <gpio_enable_module+0xe>
800026e8:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800026ea:	d8 22       	popm	r4-r7,pc
800026ec:	16 95       	mov	r5,r11
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800026ee:	cf db       	rjmp	800026e8 <gpio_enable_module+0x20>

800026f0 <gpio_enable_gpio_pin>:
800026f0:	30 18       	mov	r8,1
800026f2:	f0 0c 09 48 	lsl	r8,r8,r12
800026f6:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026f8:	a9 7c       	lsl	r12,0x9
800026fa:	e0 2c d4 00 	sub	r12,54272
	
	gpio_port->oderc = 1 << (pin & 0x1F);
800026fe:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
80002702:	99 18       	st.w	r12[0x4],r8
}
80002704:	5e fc       	retal	r12

80002706 <gpio_enable_pin_pull_up>:
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->puers = 1 << (pin & 0x1F);
80002706:	30 18       	mov	r8,1
80002708:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000270c:	a5 9c       	lsr	r12,0x5
8000270e:	a9 7c       	lsl	r12,0x9
80002710:	e0 2c d4 00 	sub	r12,54272
	
	gpio_port->puers = 1 << (pin & 0x1F);
80002714:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80002718:	5e fc       	retal	r12

8000271a <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000271a:	f8 08 16 05 	lsr	r8,r12,0x5
8000271e:	a9 78       	lsl	r8,0x9
80002720:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002724:	ed bb 00 02 	bld	r11,0x2
80002728:	c1 e1       	brne	80002764 <gpio_configure_pin+0x4a>
		gpio_port->puers = 1 << (pin & 0x1F);
8000272a:	30 19       	mov	r9,1
8000272c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002730:	f1 4c 00 74 	st.w	r8[116],r12
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002734:	ed bb 00 07 	bld	r11,0x7
80002738:	c0 91       	brne	8000274a <gpio_configure_pin+0x30>
		if (flags & GPIO_BOTHEDGES) {
8000273a:	16 99       	mov	r9,r11
8000273c:	e2 19 01 80 	andl	r9,0x180,COH
80002740:	c1 c0       	breq	80002778 <gpio_configure_pin+0x5e>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002742:	f1 4c 00 a8 	st.w	r8[168],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002746:	f1 4c 00 b8 	st.w	r8[184],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000274a:	ed bb 00 00 	bld	r11,0x0
8000274e:	c1 11       	brne	80002770 <gpio_configure_pin+0x56>
		if (flags & GPIO_INIT_HIGH) {
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002750:	ed bb 00 01 	bld	r11,0x1
80002754:	f1 fc 0a 15 	st.weq	r8[0x54],r12
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002758:	f1 fc 1a 16 	st.wne	r8[0x58],r12
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000275c:	f1 4c 00 44 	st.w	r8[68],r12
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002760:	91 1c       	st.w	r8[0x4],r12
}
80002762:	5e fc       	retal	r12

#endif
	if (flags & GPIO_PULL_UP) {
		gpio_port->puers = 1 << (pin & 0x1F);
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002764:	30 19       	mov	r9,1
80002766:	f2 0c 09 4c 	lsl	r12,r9,r12
8000276a:	f1 4c 00 78 	st.w	r8[120],r12
8000276e:	ce 3b       	rjmp	80002734 <gpio_configure_pin+0x1a>
			gpio_port->ovrc = 1 << (pin & 0x1F);
		}

		gpio_port->oders = 1 << (pin & 0x1F);
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002770:	f1 4c 00 48 	st.w	r8[72],r12
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002774:	91 1c       	st.w	r8[0x4],r12
}
80002776:	5e fc       	retal	r12
	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
		if (flags & GPIO_BOTHEDGES) {
			gpio_port->imr0c = 1 << (pin & 0x1F);
			gpio_port->imr1c = 1 << (pin & 0x1F);
		} else if (flags & GPIO_RISING) {
80002778:	16 99       	mov	r9,r11
8000277a:	e2 19 02 80 	andl	r9,0x280,COH
8000277e:	c0 60       	breq	8000278a <gpio_configure_pin+0x70>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002780:	f1 4c 00 a4 	st.w	r8[164],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002784:	f1 4c 00 b8 	st.w	r8[184],r12
80002788:	ce 1b       	rjmp	8000274a <gpio_configure_pin+0x30>
		} else if (flags & GPIO_FALLING) {
8000278a:	16 99       	mov	r9,r11
8000278c:	e2 19 03 80 	andl	r9,0x380,COH
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002790:	f1 fc 1a 2a 	st.wne	r8[0xa8],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002794:	f1 fc 1a 2d 	st.wne	r8[0xb4],r12
80002798:	cd 9b       	rjmp	8000274a <gpio_configure_pin+0x30>

8000279a <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000279a:	30 18       	mov	r8,1
8000279c:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800027a0:	a5 9c       	lsr	r12,0x5
800027a2:	a9 7c       	lsl	r12,0x9
800027a4:	e0 2c d4 00 	sub	r12,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800027a8:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800027ac:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800027b0:	99 18       	st.w	r12[0x4],r8
}
800027b2:	5e fc       	retal	r12

800027b4 <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800027b4:	30 18       	mov	r8,1
800027b6:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800027ba:	a5 9c       	lsr	r12,0x5
800027bc:	a9 7c       	lsl	r12,0x9
800027be:	e0 2c d4 00 	sub	r12,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800027c2:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800027c6:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800027ca:	99 18       	st.w	r12[0x4],r8
}
800027cc:	5e fc       	retal	r12

800027ce <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800027ce:	c0 08       	rjmp	800027ce <_unhandled_interrupt>

800027d0 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800027d0:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
800027d4:	49 f8       	lddpc	r8,80002850 <INTC_register_interrupt+0x80>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800027d6:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800027d8:	f0 0b 00 38 	add	r8,r8,r11<<0x3
800027dc:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800027de:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800027e2:	58 0a       	cp.w	r10,0
800027e4:	c1 20       	breq	80002808 <INTC_register_interrupt+0x38>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
800027e6:	58 1a       	cp.w	r10,1
800027e8:	c1 b0       	breq	8000281e <INTC_register_interrupt+0x4e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
800027ea:	58 2a       	cp.w	r10,2
800027ec:	c2 50       	breq	80002836 <INTC_register_interrupt+0x66>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800027ee:	fe c9 f2 c0 	sub	r9,pc,-3392
800027f2:	fe c8 f3 f2 	sub	r8,pc,-3086
800027f6:	f2 08 01 08 	sub	r8,r9,r8
800027fa:	fe 79 10 00 	mov	r9,-61440
800027fe:	ea 18 c0 00 	orh	r8,0xc000
80002802:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002806:	5e fc       	retal	r12
80002808:	fe 78 10 00 	mov	r8,-61440
8000280c:	fe c9 f4 0c 	sub	r9,pc,-3060
80002810:	fe ca f3 0c 	sub	r10,pc,-3316
80002814:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002818:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
8000281c:	5e fc       	retal	r12
8000281e:	fe c9 f3 0c 	sub	r9,pc,-3316
80002822:	fe c8 f4 22 	sub	r8,pc,-3038
80002826:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000282a:	fe 79 10 00 	mov	r9,-61440
8000282e:	bf a8       	sbr	r8,0x1e
80002830:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002834:	5e fc       	retal	r12
80002836:	fe c9 f3 16 	sub	r9,pc,-3306
8000283a:	fe c8 f4 3a 	sub	r8,pc,-3014
8000283e:	f2 08 01 08 	sub	r8,r9,r8
80002842:	fe 79 10 00 	mov	r9,-61440
80002846:	bf b8       	sbr	r8,0x1f
80002848:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8000284c:	5e fc       	retal	r12
8000284e:	d7 03       	nop
80002850:	80 00       	ld.sh	r0,r0[0x0]
80002852:	36 d4       	mov	r4,109

80002854 <INTC_init_interrupts>:
80002854:	eb cd 40 e0 	pushm	r5-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002858:	fe c8 f4 58 	sub	r8,pc,-2984
8000285c:	e3 b8 00 01 	mtsr	0x4,r8
80002860:	fe c5 f3 5c 	sub	r5,pc,-3236
80002864:	48 d7       	lddpc	r7,80002898 <INTC_init_interrupts+0x44>
80002866:	10 15       	sub	r5,r8

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002868:	30 0e       	mov	lr,0
8000286a:	fe cc 00 9c 	sub	r12,pc,156

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000286e:	fe 76 10 00 	mov	r6,-61440
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002872:	6e 0a       	ld.w	r10,r7[0x0]
80002874:	58 0a       	cp.w	r10,0
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002876:	c0 90       	breq	80002888 <INTC_init_interrupts+0x34>
80002878:	30 08       	mov	r8,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000287a:	6e 1b       	ld.w	r11,r7[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000287c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80002880:	2f f8       	sub	r8,-1

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002882:	10 3a       	cp.w	r10,r8
80002884:	fe 9b ff fc 	brhi	8000287c <INTC_init_interrupts+0x28>
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002888:	ec 0e 09 25 	st.w	r6[lr<<0x2],r5
8000288c:	2f 87       	sub	r7,-8
8000288e:	2f fe       	sub	lr,-1
80002890:	59 fe       	cp.w	lr,31
80002892:	cf 01       	brne	80002872 <INTC_init_interrupts+0x1e>
80002894:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	36 d4       	mov	r4,109

8000289c <_get_interrupt_handler>:
8000289c:	e0 68 00 83 	mov	r8,131
800028a0:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800028a4:	fe 78 10 00 	mov	r8,-61440
800028a8:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800028ac:	f2 ca ff c0 	sub	r10,r9,-64
800028b0:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800028b4:	58 0c       	cp.w	r12,0
800028b6:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
800028b8:	48 68       	lddpc	r8,800028d0 <_get_interrupt_handler+0x34>
800028ba:	f8 0c 12 00 	clz	r12,r12
800028be:	f0 09 00 39 	add	r9,r8,r9<<0x3
800028c2:	f8 0c 11 1f 	rsub	r12,r12,31
800028c6:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800028c8:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800028cc:	5e fc       	retal	r12
800028ce:	d7 03       	nop
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	36 d4       	mov	r4,109

800028d4 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800028d4:	f8 c8 00 01 	sub	r8,r12,1
800028d8:	f0 0b 00 0b 	add	r11,r8,r11
800028dc:	f6 0c 0d 0a 	divu	r10,r11,r12
800028e0:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800028e2:	f4 c8 00 01 	sub	r8,r10,1
800028e6:	e0 48 00 fe 	cp.w	r8,254
800028ea:	e0 8b 00 04 	brhi	800028f2 <getBaudDiv+0x1e>
		return -1;
	}

	return baudDiv;
800028ee:	5c 8c       	casts.h	r12
}
800028f0:	5e fc       	retal	r12

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);

	if (baudDiv <= 0 || baudDiv > 255) {
800028f2:	5e fe       	retal	-1

800028f4 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800028f4:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800028f6:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800028f8:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800028fa:	f7 3a 00 0d 	ld.ub	r10,r11[13]
800028fe:	f0 0a 18 00 	cp.b	r10,r8
80002902:	e0 88 00 04 	brls	8000290a <spi_initMaster+0x16>
80002906:	30 2c       	mov	r12,2
80002908:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
8000290a:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000290c:	e0 68 00 80 	mov	r8,128
80002910:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80002912:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80002914:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002916:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
8000291a:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
8000291c:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002920:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80002924:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002928:	30 fa       	mov	r10,15
8000292a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000292e:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80002930:	d8 02       	popm	pc

80002932 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002932:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002934:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002936:	ea 19 00 0f 	orh	r9,0xf
8000293a:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000293c:	78 1c       	ld.w	r12,r12[0x4]
8000293e:	e2 1c 00 04 	andl	r12,0x4,COH
80002942:	c0 80       	breq	80002952 <spi_selectChip+0x20>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002944:	30 e9       	mov	r9,14
80002946:	f2 0b 18 00 	cp.b	r11,r9
8000294a:	e0 88 00 12 	brls	8000296e <spi_selectChip+0x3c>
	} else {
		if (chip > 3) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000294e:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002950:	5e fc       	retal	r12
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002952:	30 39       	mov	r9,3
80002954:	f2 0b 18 00 	cp.b	r11,r9
80002958:	fe 9b ff fb 	brhi	8000294e <spi_selectChip+0x1c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000295c:	70 19       	ld.w	r9,r8[0x4]
8000295e:	2f 0b       	sub	r11,-16
80002960:	30 1a       	mov	r10,1
80002962:	f4 0b 09 4b 	lsl	r11,r10,r11
80002966:	5c db       	com	r11
80002968:	12 6b       	and	r11,r9
8000296a:	91 1b       	st.w	r8[0x4],r11
8000296c:	5e fc       	retal	r12
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000296e:	70 19       	ld.w	r9,r8[0x4]
80002970:	b1 6b       	lsl	r11,0x10
80002972:	30 0c       	mov	r12,0
80002974:	ea 1b ff f0 	orh	r11,0xfff0
80002978:	e8 1b ff ff 	orl	r11,0xffff
8000297c:	12 6b       	and	r11,r9
8000297e:	91 1b       	st.w	r8[0x4],r11
80002980:	5e fc       	retal	r12

80002982 <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002982:	e0 69 3a 98 	mov	r9,15000

	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002986:	c0 48       	rjmp	8000298e <spi_unselectChip+0xc>
		if (!timeout--) {
80002988:	58 09       	cp.w	r9,0
8000298a:	c0 e0       	breq	800029a6 <spi_unselectChip+0x24>
8000298c:	20 19       	sub	r9,1
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{

	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000298e:	78 48       	ld.w	r8,r12[0x10]
80002990:	ed b8 00 09 	bld	r8,0x9
80002994:	cf a1       	brne	80002988 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002996:	78 18       	ld.w	r8,r12[0x4]
80002998:	ea 18 00 0f 	orh	r8,0xf
8000299c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000299e:	fc 18 01 00 	movh	r8,0x100
800029a2:	99 08       	st.w	r12[0x0],r8
800029a4:	5e fd       	retal	0
{

	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800029a6:	5e ff       	retal	1

800029a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800029a8:	eb cd 40 fe 	pushm	r1-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800029ac:	30 34       	mov	r4,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800029ae:	16 97       	mov	r7,r11
800029b0:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800029b2:	f7 35 00 0c 	ld.ub	r5,r11[12]
800029b6:	e8 05 18 00 	cp.b	r5,r4
800029ba:	e0 8b 00 09 	brhi	800029cc <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
800029be:	f7 32 00 0b 	ld.ub	r2,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800029c2:	30 13       	mov	r3,1
800029c4:	e6 02 18 00 	cp.b	r2,r3
800029c8:	e0 88 00 05 	brls	800029d2 <spi_setupChipReg+0x2a>
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
		break;
800029cc:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800029ce:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800029d2:	f7 31 00 08 	ld.ub	r1,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800029d6:	30 78       	mov	r8,7
800029d8:	f0 01 18 00 	cp.b	r1,r8
800029dc:	fe 98 ff f8 	brls	800029cc <spi_setupChipReg+0x24>
800029e0:	31 08       	mov	r8,16
800029e2:	f0 01 18 00 	cp.b	r1,r8
800029e6:	fe 9b ff f3 	brhi	800029cc <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800029ea:	14 9b       	mov	r11,r10
800029ec:	6e 1c       	ld.w	r12,r7[0x4]
800029ee:	c7 3f       	rcall	800028d4 <getBaudDiv>
800029f0:	ce e5       	brlt	800029cc <spi_setupChipReg+0x24>

	if (baudDiv < 0) {
800029f2:	0a 9a       	mov	r10,r5
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800029f4:	ec 1a 00 01 	eorl	r10,0x1
800029f8:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800029fa:	a1 95       	lsr	r5,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800029fc:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80002a00:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002a04:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002a08:	20 81       	sub	r1,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002a0a:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002a0e:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80002a10:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002a14:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002a18:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002a1c:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002a20:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80002a24:	e6 09 18 00 	cp.b	r9,r3

	switch (options->reg) {
80002a28:	c0 f0       	breq	80002a46 <spi_setupChipReg+0x9e>
80002a2a:	c0 b3       	brcs	80002a40 <spi_setupChipReg+0x98>
80002a2c:	30 2a       	mov	r10,2
80002a2e:	f4 09 18 00 	cp.b	r9,r10
80002a32:	c0 d0       	breq	80002a4c <spi_setupChipReg+0xa4>
80002a34:	e8 09 18 00 	cp.b	r9,r4
80002a38:	cc a1       	brne	800029cc <spi_setupChipReg+0x24>
80002a3a:	8d f8       	st.w	r6[0x3c],r8
	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002a3c:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002a40:	8d c8       	st.w	r6[0x30],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002a42:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002a46:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002a48:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002a4c:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002a4e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002a52:	d7 03       	nop

80002a54 <spi_enable>:
80002a54:	30 18       	mov	r8,1
80002a56:	99 08       	st.w	r12[0x0],r8
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80002a58:	5e fc       	retal	r12

80002a5a <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002a5a:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002a5c:	f6 08 15 04 	lsl	r8,r11,0x4
80002a60:	14 38       	cp.w	r8,r10
80002a62:	e0 8b 00 26 	brhi	80002aae <usart_set_async_baudrate+0x54>
80002a66:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002a68:	f0 09 16 01 	lsr	r9,r8,0x1
80002a6c:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80002a70:	f2 08 0d 08 	divu	r8,r9,r8
80002a74:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002a76:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002a78:	f0 cb 00 01 	sub	r11,r8,1
80002a7c:	e0 4b ff fe 	cp.w	r11,65534
80002a80:	e0 8b 00 1b 	brhi	80002ab6 <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002a84:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002a86:	e8 6b 00 00 	mov	r11,524288
80002a8a:	e4 1a ff f7 	andh	r10,0xfff7
80002a8e:	e0 1a fe cf 	andl	r10,0xfecf
80002a92:	59 0e       	cp.w	lr,16
80002a94:	f6 0e 17 10 	movne	lr,r11
80002a98:	f9 be 00 00 	moveq	lr,0
80002a9c:	fd ea 10 0a 	or	r10,lr,r10
80002aa0:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002aa2:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80002aa6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002aaa:	99 88       	st.w	r12[0x20],r8
80002aac:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002aae:	f6 08 15 03 	lsl	r8,r11,0x3
80002ab2:	30 8e       	mov	lr,8
80002ab4:	cd ab       	rjmp	80002a68 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002ab6:	da 0a       	popm	pc,r12=1

80002ab8 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002ab8:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002aba:	ed b8 00 01 	bld	r8,0x1
80002abe:	c0 51       	brne	80002ac8 <usart_write_char+0x10>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002ac0:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002ac4:	99 7b       	st.w	r12[0x1c],r11
80002ac6:	5e fd       	retal	0
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002ac8:	30 2c       	mov	r12,2
80002aca:	5e fc       	retal	r12

80002acc <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002acc:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002ad0:	ed b8 00 10 	bld	r8,0x10
80002ad4:	c0 c1       	brne	80002aec <usart_reset+0x20>
  usart->idr = 0xFFFFFFFF;
80002ad6:	3f f8       	mov	r8,-1
80002ad8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002ada:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002adc:	30 08       	mov	r8,0
80002ade:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002ae0:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002ae2:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002ae4:	e8 68 61 0c 	mov	r8,549132
80002ae8:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002aea:	5e fc       	retal	r12
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002aec:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002aee:	3f f8       	mov	r8,-1
80002af0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002af2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002af4:	d5 03       	csrf	0x10
80002af6:	cf 3b       	rjmp	80002adc <usart_reset+0x10>

80002af8 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002af8:	d4 21       	pushm	r4-r7,lr
80002afa:	16 97       	mov	r7,r11
80002afc:	14 94       	mov	r4,r10
80002afe:	18 96       	mov	r6,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002b00:	ce 6f       	rcall	80002acc <usart_reset>
80002b02:	58 07       	cp.w	r7,0

  // Check input values.
  if (!opt || // Null pointer.
80002b04:	c2 00       	breq	80002b44 <usart_init_rs232+0x4c>
80002b06:	0f c8       	ld.ub	r8,r7[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80002b08:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b0a:	f2 08 18 00 	cp.b	r8,r9
80002b0e:	e0 88 00 1b 	brls	80002b44 <usart_init_rs232+0x4c>
80002b12:	30 95       	mov	r5,9
80002b14:	ea 08 18 00 	cp.b	r8,r5
80002b18:	e0 8b 00 16 	brhi	80002b44 <usart_init_rs232+0x4c>
80002b1c:	0f d9       	ld.ub	r9,r7[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002b1e:	30 78       	mov	r8,7
80002b20:	f0 09 18 00 	cp.b	r9,r8
80002b24:	e0 8b 00 10 	brhi	80002b44 <usart_init_rs232+0x4c>
80002b28:	8e 39       	ld.sh	r9,r7[0x6]
      opt->stopbits > 2 + 255 ||
80002b2a:	e0 68 01 01 	mov	r8,257
80002b2e:	f0 09 19 00 	cp.h	r9,r8
80002b32:	e0 8b 00 09 	brhi	80002b44 <usart_init_rs232+0x4c>
80002b36:	ef 39 00 08 	ld.ub	r9,r7[8]
      opt->channelmode > 3 ||
80002b3a:	30 38       	mov	r8,3
80002b3c:	f0 09 18 00 	cp.b	r9,r8
80002b40:	e0 88 00 03 	brls	80002b46 <usart_init_rs232+0x4e>
80002b44:	da 2a       	popm	r4-r7,pc,r12=1
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002b46:	08 9a       	mov	r10,r4
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002b48:	6e 0b       	ld.w	r11,r7[0x0]
80002b4a:	0c 9c       	mov	r12,r6
80002b4c:	c8 7f       	rcall	80002a5a <usart_set_async_baudrate>
80002b4e:	58 1c       	cp.w	r12,1
80002b50:	cf a0       	breq	80002b44 <usart_init_rs232+0x4c>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002b52:	0f c8       	ld.ub	r8,r7[0x4]
80002b54:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002b58:	c2 90       	breq	80002baa <usart_init_rs232+0xb2>
80002b5a:	6c 19       	ld.w	r9,r6[0x4]
80002b5c:	20 58       	sub	r8,5
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002b5e:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002b62:	8d 18       	st.w	r6[0x4],r8
80002b64:	6c 19       	ld.w	r9,r6[0x4]
80002b66:	ef 3a 00 08 	ld.ub	r10,r7[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002b6a:	0f d8       	ld.ub	r8,r7[0x5]
80002b6c:	a9 78       	lsl	r8,0x9
80002b6e:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002b72:	12 48       	or	r8,r9
80002b74:	8d 18       	st.w	r6[0x4],r8
80002b76:	30 29       	mov	r9,2
80002b78:	8e 38       	ld.sh	r8,r7[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002b7a:	f2 08 19 00 	cp.h	r8,r9
80002b7e:	e0 88 00 10 	brls	80002b9e <usart_init_rs232+0xa6>
80002b82:	6c 18       	ld.w	r8,r6[0x4]
80002b84:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002b86:	8d 18       	st.w	r6[0x4],r8
80002b88:	8e b8       	ld.uh	r8,r7[0x6]
80002b8a:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002b8c:	8d a8       	st.w	r6[0x28],r8
80002b8e:	6c 18       	ld.w	r8,r6[0x4]
80002b90:	e0 18 ff f0 	andl	r8,0xfff0
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002b94:	8d 18       	st.w	r6[0x4],r8
80002b96:	30 0c       	mov	r12,0
80002b98:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002b9a:	8d 08       	st.w	r6[0x0],r8
80002b9c:	d8 22       	popm	r4-r7,pc
80002b9e:	6c 19       	ld.w	r9,r6[0x4]
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002ba0:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002ba2:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002ba6:	8d 18       	st.w	r6[0x4],r8
80002ba8:	cf 3b       	rjmp	80002b8e <usart_init_rs232+0x96>
80002baa:	6c 18       	ld.w	r8,r6[0x4]
80002bac:	b1 b8       	sbr	r8,0x11
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002bae:	8d 18       	st.w	r6[0x4],r8
80002bb0:	cd ab       	rjmp	80002b64 <usart_init_rs232+0x6c>
80002bb2:	d7 03       	nop

80002bb4 <_stext>:
80002bb4:	48 dd       	lddpc	sp,80002be8 <udata_clear_loop_end+0x4>
80002bb6:	fe c0 f7 b6 	sub	r0,pc,-2122
80002bba:	e3 b0 00 01 	mtsr	0x4,r0
80002bbe:	d5 53       	csrf	0x15
80002bc0:	48 b0       	lddpc	r0,80002bec <udata_clear_loop_end+0x8>
80002bc2:	48 c1       	lddpc	r1,80002bf0 <udata_clear_loop_end+0xc>
80002bc4:	02 30       	cp.w	r0,r1
80002bc6:	c0 62       	brcc	80002bd2 <idata_load_loop_end>
80002bc8:	48 b2       	lddpc	r2,80002bf4 <udata_clear_loop_end+0x10>

80002bca <idata_load_loop>:
80002bca:	a5 05       	ld.d	r4,r2++
80002bcc:	a1 24       	st.d	r0++,r4
80002bce:	02 30       	cp.w	r0,r1
80002bd0:	cf d3       	brcs	80002bca <idata_load_loop>

80002bd2 <idata_load_loop_end>:
80002bd2:	48 a0       	lddpc	r0,80002bf8 <udata_clear_loop_end+0x14>
80002bd4:	48 a1       	lddpc	r1,80002bfc <udata_clear_loop_end+0x18>
80002bd6:	02 30       	cp.w	r0,r1
80002bd8:	c0 62       	brcc	80002be4 <udata_clear_loop_end>
80002bda:	30 02       	mov	r2,0
80002bdc:	30 03       	mov	r3,0

80002bde <udata_clear_loop>:
80002bde:	a1 22       	st.d	r0++,r2
80002be0:	02 30       	cp.w	r0,r1
80002be2:	cf e3       	brcs	80002bde <udata_clear_loop>

80002be4 <udata_clear_loop_end>:
80002be4:	fe cf fc b4 	sub	pc,pc,-844
80002be8:	00 00       	add	r0,r0
80002bea:	40 00       	lddsp	r0,sp[0x0]
80002bec:	00 00       	add	r0,r0
80002bee:	00 08       	add	r8,r0
80002bf0:	00 00       	add	r0,r0
80002bf2:	00 10       	sub	r0,r0
80002bf4:	80 00       	ld.sh	r0,r0[0x0]
80002bf6:	37 f0       	mov	r0,127
80002bf8:	00 00       	add	r0,r0
80002bfa:	00 10       	sub	r0,r0
80002bfc:	00 00       	add	r0,r0
80002bfe:	0d 10       	ld.sh	r0,r6++

80002c00 <dfll_enable_closed_loop>:
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80002c00:	78 08       	ld.w	r8,r12[0x0]
80002c02:	a1 a8       	sbr	r8,0x0
80002c04:	fe 79 18 00 	mov	r9,-59392
80002c08:	f3 48 00 70 	st.w	r9[112],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c0c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002c10:	d3 03       	ssrf	0x10
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	AVR32_SCIF.unlock =
80002c12:	32 4a       	mov	r10,36
80002c14:	ea 1a aa 00 	orh	r10,0xaa00
80002c18:	93 6a       	st.w	r9[0x18],r10
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
80002c1a:	30 1a       	mov	r10,1
80002c1c:	93 9a       	st.w	r9[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c1e:	ed b8 00 10 	bld	r8,0x10
80002c22:	c6 21       	brne	80002ce6 <dfll_enable_closed_loop+0xe6>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
80002c24:	fe 79 18 00 	mov	r9,-59392
80002c28:	72 58       	ld.w	r8,r9[0x14]
80002c2a:	ed b8 00 0e 	bld	r8,0xe
80002c2e:	cf d1       	brne	80002c28 <dfll_enable_closed_loop+0x28>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c30:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002c34:	d3 03       	ssrf	0x10
80002c36:	32 ca       	mov	r10,44
80002c38:	ea 1a aa 00 	orh	r10,0xaa00
80002c3c:	fe 79 18 00 	mov	r9,-59392
80002c40:	93 6a       	st.w	r9[0x18],r10
80002c42:	fe 79 18 2c 	mov	r9,-59348
80002c46:	78 3a       	ld.w	r10,r12[0xc]
80002c48:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c4a:	ed b8 00 10 	bld	r8,0x10
80002c4e:	c4 a1       	brne	80002ce2 <dfll_enable_closed_loop+0xe2>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
80002c50:	fe 79 18 00 	mov	r9,-59392
80002c54:	72 58       	ld.w	r8,r9[0x14]
80002c56:	ed b8 00 0e 	bld	r8,0xe
80002c5a:	cf d1       	brne	80002c54 <dfll_enable_closed_loop+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c5c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002c60:	d3 03       	ssrf	0x10
80002c62:	32 8a       	mov	r10,40
80002c64:	ea 1a aa 00 	orh	r10,0xaa00
80002c68:	fe 79 18 00 	mov	r9,-59392
80002c6c:	93 6a       	st.w	r9[0x18],r10
80002c6e:	fe 79 18 28 	mov	r9,-59352
80002c72:	78 2a       	ld.w	r10,r12[0x8]
80002c74:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c76:	ed b8 00 10 	bld	r8,0x10
80002c7a:	c3 21       	brne	80002cde <dfll_enable_closed_loop+0xde>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
80002c7c:	fe 79 18 00 	mov	r9,-59392
80002c80:	72 58       	ld.w	r8,r9[0x14]
80002c82:	ed b8 00 0e 	bld	r8,0xe
80002c86:	cf d1       	brne	80002c80 <dfll_enable_closed_loop+0x80>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c88:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002c8c:	d3 03       	ssrf	0x10
80002c8e:	33 0a       	mov	r10,48
80002c90:	ea 1a aa 00 	orh	r10,0xaa00
80002c94:	fe 79 18 00 	mov	r9,-59392
80002c98:	93 6a       	st.w	r9[0x18],r10
80002c9a:	fe 79 18 30 	mov	r9,-59344
80002c9e:	78 4a       	ld.w	r10,r12[0x10]
80002ca0:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ca2:	ed b8 00 10 	bld	r8,0x10
80002ca6:	c1 a1       	brne	80002cda <dfll_enable_closed_loop+0xda>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN)
80002ca8:	fe 79 18 00 	mov	r9,-59392
80002cac:	72 58       	ld.w	r8,r9[0x14]
80002cae:	ed b8 00 0e 	bld	r8,0xe
80002cb2:	cf d1       	brne	80002cac <dfll_enable_closed_loop+0xac>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002cb4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002cb8:	d3 03       	ssrf	0x10
80002cba:	32 4a       	mov	r10,36
80002cbc:	ea 1a aa 00 	orh	r10,0xaa00
80002cc0:	fe 79 18 00 	mov	r9,-59392
80002cc4:	93 6a       	st.w	r9[0x18],r10
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
		| (1U << AVR32_SCIF_DFLL0CONF_CCEN)
#endif
		);
80002cc6:	fe 7a 18 24 	mov	r10,-59356
80002cca:	78 19       	ld.w	r9,r12[0x4]
80002ccc:	a1 a9       	sbr	r9,0x0
80002cce:	95 09       	st.w	r10[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002cd0:	ed b8 00 10 	bld	r8,0x10
80002cd4:	c0 20       	breq	80002cd8 <dfll_enable_closed_loop+0xd8>
      cpu_irq_enable();
80002cd6:	d5 03       	csrf	0x10
}
80002cd8:	5e fc       	retal	r12
80002cda:	d5 03       	csrf	0x10
80002cdc:	ce 6b       	rjmp	80002ca8 <dfll_enable_closed_loop+0xa8>
80002cde:	d5 03       	csrf	0x10
80002ce0:	cc eb       	rjmp	80002c7c <dfll_enable_closed_loop+0x7c>
80002ce2:	d5 03       	csrf	0x10
80002ce4:	cb 6b       	rjmp	80002c50 <dfll_enable_closed_loop+0x50>
80002ce6:	d5 03       	csrf	0x10
80002ce8:	c9 eb       	rjmp	80002c24 <dfll_enable_closed_loop+0x24>
80002cea:	d7 03       	nop

80002cec <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
80002cec:	eb cd 40 80 	pushm	r7,lr
80002cf0:	20 6d       	sub	sp,24
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
80002cf2:	fe 77 18 00 	mov	r7,-59392
80002cf6:	6e 58       	ld.w	r8,r7[0x14]
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
80002cf8:	ed b8 00 09 	bld	r8,0x9
80002cfc:	c1 e0       	breq	80002d38 <dfll_enable_config_defaults+0x4c>
		return; // DFLL already running
	}

	switch (dfll_id) {
80002cfe:	58 0c       	cp.w	r12,0
80002d00:	c1 21       	brne	80002d24 <dfll_enable_config_defaults+0x38>
#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
#if (UC3L3_L4 || UC3L0128 || UC3L0256)
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_PCLKSR_OSC32RDY));
#else
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80002d02:	6e 58       	ld.w	r8,r7[0x14]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
80002d04:	ed b8 00 00 	bld	r8,0x0
80002d08:	c1 b1       	brne	80002d3e <dfll_enable_config_defaults+0x52>
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80002d0a:	e0 68 01 02 	mov	r8,258
80002d0e:	50 18       	stdsp	sp[0x4],r8
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, div);

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
80002d10:	30 28       	mov	r8,2
80002d12:	50 28       	stdsp	sp[0x8],r8
	cfg->mul = mul << 16;
80002d14:	fc 18 09 89 	movh	r8,0x989
80002d18:	50 38       	stdsp	sp[0xc],r8
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
80002d1a:	e4 68 00 04 	mov	r8,262148
80002d1e:	50 48       	stdsp	sp[0x10],r8
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
80002d20:	30 08       	mov	r8,0
80002d22:	50 58       	stdsp	sp[0x14],r8
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
80002d24:	18 9b       	mov	r11,r12
80002d26:	fa cc ff fc 	sub	r12,sp,-4
80002d2a:	c6 bf       	rcall	80002c00 <dfll_enable_closed_loop>
80002d2c:	fe 79 18 00 	mov	r9,-59392
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
80002d30:	72 58       	ld.w	r8,r9[0x14]
80002d32:	ed b8 00 09 	bld	r8,0x9
	while (!dfll_is_fine_locked(dfll_id));
80002d36:	cf d1       	brne	80002d30 <dfll_enable_config_defaults+0x44>
80002d38:	2f ad       	sub	sp,-24
}
80002d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d3e:	50 0c       	stdsp	sp[0x0],r12
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
80002d40:	c0 8c       	rcall	80002d50 <osc_priv_enable_osc32>
80002d42:	40 0c       	lddsp	r12,sp[0x0]
80002d44:	6e 58       	ld.w	r8,r7[0x14]
#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
#if (UC3L3_L4 || UC3L0128 || UC3L0256)
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_PCLKSR_OSC32RDY));
#else
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80002d46:	ed b8 00 00 	bld	r8,0x0
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002d4a:	cf d1       	brne	80002d44 <dfll_enable_config_defaults+0x58>
80002d4c:	cd fb       	rjmp	80002d0a <dfll_enable_config_defaults+0x1e>
80002d4e:	d7 03       	nop

80002d50 <osc_priv_enable_osc32>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d50:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002d54:	d3 03       	ssrf	0x10
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80002d56:	fe 79 18 00 	mov	r9,-59392
80002d5a:	32 0a       	mov	r10,32
80002d5c:	ea 1a aa 00 	orh	r10,0xaa00
80002d60:	93 6a       	st.w	r9[0x18],r10
	AVR32_SCIF.oscctrl32 =
80002d62:	e4 7a 01 0d 	mov	r10,327949
80002d66:	93 8a       	st.w	r9[0x20],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d68:	ed b8 00 10 	bld	r8,0x10
80002d6c:	c0 20       	breq	80002d70 <osc_priv_enable_osc32+0x20>
      cpu_irq_enable();
80002d6e:	d5 03       	csrf	0x10
			| (1U << AVR32_SCIF_OSCCTRL32_EN32K)
			| (1U << AVR32_SCIF_OSCCTRL32_EN1K)
			| (BOARD_OSC32_PINSEL << AVR32_SCIF_OSCCTRL32_PINSEL)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
}
80002d70:	5e fc       	retal	r12

80002d72 <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d72:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002d76:	d3 03       	ssrf	0x10
#else
	Assert(src <= SYSCLK_SRC_RC120M);
#endif

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80002d78:	fe 79 14 00 	mov	r9,-60416
80002d7c:	fc 1a aa 00 	movh	r10,0xaa00
80002d80:	f3 4a 00 58 	st.w	r9[88],r10
	AVR32_PM.mcctrl = src;
80002d84:	93 0c       	st.w	r9[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d86:	ed b8 00 10 	bld	r8,0x10
80002d8a:	c0 20       	breq	80002d8e <sysclk_set_source+0x1c>
      cpu_irq_enable();
80002d8c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002d8e:	5e fc       	retal	r12

80002d90 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80002d90:	d4 01       	pushm	lr
	uint32_t   pbb_cksel = 0;

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80002d92:	58 0c       	cp.w	r12,0
80002d94:	c0 30       	breq	80002d9a <sysclk_set_prescalers+0xa>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80002d96:	20 1c       	sub	r12,1
80002d98:	a7 bc       	sbr	r12,0x7
				| (1U << AVR32_PM_CPUSEL_CPUDIV);

	if (pba_shift > 0)
80002d9a:	58 0b       	cp.w	r11,0
80002d9c:	c0 30       	breq	80002da2 <sysclk_set_prescalers+0x12>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80002d9e:	20 1b       	sub	r11,1
80002da0:	a7 bb       	sbr	r11,0x7
				| (1U << AVR32_PM_PBASEL_PBDIV);

	if (pbb_shift > 0)
80002da2:	58 0a       	cp.w	r10,0
80002da4:	c0 30       	breq	80002daa <sysclk_set_prescalers+0x1a>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80002da6:	20 1a       	sub	r10,1
80002da8:	a7 ba       	sbr	r10,0x7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002daa:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002dae:	d3 03       	ssrf	0x10
				| (1U << AVR32_PM_PBBSEL_PBDIV);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80002db0:	fe 78 14 00 	mov	r8,-60416
80002db4:	30 4e       	mov	lr,4
80002db6:	ea 1e aa 00 	orh	lr,0xaa00
80002dba:	f1 4e 00 58 	st.w	r8[88],lr
	AVR32_PM.cpusel = cpu_cksel;
80002dbe:	91 1c       	st.w	r8[0x4],r12
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80002dc0:	30 cc       	mov	r12,12
80002dc2:	ea 1c aa 00 	orh	r12,0xaa00
80002dc6:	f1 4c 00 58 	st.w	r8[88],r12
	AVR32_PM.pbasel = pba_cksel;
80002dca:	91 3b       	st.w	r8[0xc],r11
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80002dcc:	31 0b       	mov	r11,16
80002dce:	ea 1b aa 00 	orh	r11,0xaa00
80002dd2:	f1 4b 00 58 	st.w	r8[88],r11
	AVR32_PM.pbbsel = pbb_cksel;
80002dd6:	91 4a       	st.w	r8[0x10],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002dd8:	ed b9 00 10 	bld	r9,0x10
80002ddc:	c0 20       	breq	80002de0 <sysclk_set_prescalers+0x50>
      cpu_irq_enable();
80002dde:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002de0:	d8 02       	popm	pc
80002de2:	d7 03       	nop

80002de4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
80002de4:	d4 01       	pushm	lr
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
80002de6:	30 2a       	mov	r10,2
80002de8:	14 9c       	mov	r12,r10
80002dea:	14 9b       	mov	r11,r10
80002dec:	cd 2f       	rcall	80002d90 <sysclk_set_prescalers>
80002dee:	30 0c       	mov	r12,0
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
80002df0:	c7 ef       	rcall	80002cec <dfll_enable_config_defaults>
80002df2:	e0 6c 90 00 	mov	r12,36864
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80002df6:	ea 1c 00 98 	orh	r12,0x98
80002dfa:	fe b0 fb ef 	rcall	800025d8 <flashcdw_set_flash_waitstate_and_readmode>
80002dfe:	30 2c       	mov	r12,2
80002e00:	cb 9f       	rcall	80002d72 <sysclk_set_source>
		sysclk_set_source(SYSCLK_SRC_DFLL);
80002e02:	e1 b8 00 00 	mfsr	r8,0x0
80002e06:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e08:	ed b8 00 10 	bld	r8,0x10
	cpu_irq_disable();
80002e0c:	c0 20       	breq	80002e10 <sysclk_init+0x2c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e0e:	d5 03       	csrf	0x10
80002e10:	d8 02       	popm	pc
80002e12:	d7 03       	nop

80002e14 <sysclk_priv_enable_module>:
      cpu_irq_enable();
80002e14:	d4 01       	pushm	lr

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002e16:	e1 b8 00 00 	mfsr	r8,0x0
80002e1a:	d3 03       	ssrf	0x10
80002e1c:	fe 7a 14 00 	mov	r10,-60416
80002e20:	a3 6c       	lsl	r12,0x2
80002e22:	32 0e       	mov	lr,32
80002e24:	ea 1e aa 00 	orh	lr,0xaa00
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e28:	f8 0e 00 0e 	add	lr,r12,lr
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002e2c:	e0 2c eb e0 	sub	r12,60384
80002e30:	78 09       	ld.w	r9,r12[0x0]
	mask |= 1U << module_index;
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002e32:	f5 4e 00 58 	st.w	r10[88],lr

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80002e36:	30 1a       	mov	r10,1
80002e38:	f4 0b 09 4b 	lsl	r11,r10,r11
80002e3c:	12 4b       	or	r11,r9
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002e3e:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e40:	ed b8 00 10 	bld	r8,0x10
80002e44:	c0 20       	breq	80002e48 <sysclk_priv_enable_module+0x34>
      cpu_irq_enable();
80002e46:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002e48:	d8 02       	popm	pc
80002e4a:	d7 03       	nop

80002e4c <configure_interrupts>:
	/* Allow the module to transfer data */
	spi_enable(SPI_ADDRESS);
}

void configure_interrupts(void)
{
80002e4c:	d4 01       	pushm	lr
	Disable_global_interrupt();
80002e4e:	d3 03       	ssrf	0x10
	
	/* Configure global interrupt controller */
	INTC_init_interrupts();
80002e50:	fe b0 fd 02 	rcall	80002854 <INTC_init_interrupts>
	/* Register interrupts */
	
// 	INTC_register_interrupt(&usart_irq_fn, AVR32_USART2_IRQ, AVR32_INTC_INT2);
// 	USART_MODULE->ier = AVR32_USART_IER_RXRDY_MASK;
	
	INTC_register_interrupt(&eic_irq_fn, ADS1299_DRDY_IRQ, AVR32_INTC_INT3);
80002e54:	30 3a       	mov	r10,3
80002e56:	e0 6b 01 60 	mov	r11,352
80002e5a:	fe cc ff ce 	sub	r12,pc,-50
80002e5e:	fe b0 fc b9 	rcall	800027d0 <INTC_register_interrupt>
	eic_init(&AVR32_EIC, &eic_opt, 1);
80002e62:	30 1a       	mov	r10,1
80002e64:	48 9b       	lddpc	r11,80002e88 <configure_interrupts+0x3c>
80002e66:	fe 7c 24 00 	mov	r12,-56320
80002e6a:	fe b0 fa f5 	rcall	80002454 <eic_init>
	eic_enable_line(&AVR32_EIC, ADS1299_DRDY_INT);
80002e6e:	30 1b       	mov	r11,1
80002e70:	fe 7c 24 00 	mov	r12,-56320
80002e74:	fe b0 fb 6c 	rcall	8000254c <eic_enable_line>
	eic_enable_interrupt_line(&AVR32_EIC, ADS1299_DRDY_INT);
80002e78:	30 1b       	mov	r11,1
80002e7a:	fe 7c 24 00 	mov	r12,-56320
80002e7e:	fe b0 fb 6c 	rcall	80002556 <eic_enable_interrupt_line>
	
	/* Enable all interrupts */
	Enable_global_interrupt();
}
80002e82:	d5 03       	csrf	0x10
80002e84:	d8 02       	popm	pc
80002e86:	d7 03       	nop
80002e88:	80 00       	ld.sh	r0,r0[0x0]
80002e8a:	37 e8       	mov	r8,126

80002e8c <eic_irq_fn>:
80002e8c:	eb cd 40 80 	pushm	r7,lr
80002e90:	48 c7       	lddpc	r7,80002ec0 <eic_irq_fn+0x34>
80002e92:	48 db       	lddpc	r11,80002ec4 <eic_irq_fn+0x38>
80002e94:	6e 0a       	ld.w	r10,r7[0x0]
80002e96:	48 d9       	lddpc	r9,80002ec8 <eic_irq_fn+0x3c>
80002e98:	30 0c       	mov	r12,0
80002e9a:	fe b0 f8 b7 	rcall	80002008 <ads1299_rdata32>
80002e9e:	6e 08       	ld.w	r8,r7[0x0]
	/* Read back 24-bit status word and 8 channels of 24-bit data */
	ads1299_rdata32(SPI_ADS1299_CHIPNUM, &status_word, sample_idx, channel_array);
	#ifdef BUFFER_SIZE_NOT_POWER_2
	sample_idx = (sample_idx + 1) % SIGNAL_BUFFER_SIZE;
	#else
	sample_idx = (sample_idx + 1) & (SIGNAL_BUFFER_SIZE - 1);
80002ea0:	2f f8       	sub	r8,-1
80002ea2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
	#endif
	
	read_request_flag = 2;															// DELETE THIS LATER MAYBE
80002ea6:	30 29       	mov	r9,2
	/* Read back 24-bit status word and 8 channels of 24-bit data */
	ads1299_rdata32(SPI_ADS1299_CHIPNUM, &status_word, sample_idx, channel_array);
	#ifdef BUFFER_SIZE_NOT_POWER_2
	sample_idx = (sample_idx + 1) % SIGNAL_BUFFER_SIZE;
	#else
	sample_idx = (sample_idx + 1) & (SIGNAL_BUFFER_SIZE - 1);
80002ea8:	8f 08       	st.w	r7[0x0],r8
	#endif
	
	read_request_flag = 2;															// DELETE THIS LATER MAYBE
80002eaa:	48 98       	lddpc	r8,80002ecc <eic_irq_fn+0x40>
	
	eic_clear_interrupt_line(&AVR32_EIC, ADS1299_DRDY_INT);
80002eac:	30 1b       	mov	r11,1
	sample_idx = (sample_idx + 1) % SIGNAL_BUFFER_SIZE;
	#else
	sample_idx = (sample_idx + 1) & (SIGNAL_BUFFER_SIZE - 1);
	#endif
	
	read_request_flag = 2;															// DELETE THIS LATER MAYBE
80002eae:	b0 89       	st.b	r8[0x0],r9
	
	eic_clear_interrupt_line(&AVR32_EIC, ADS1299_DRDY_INT);
80002eb0:	fe 7c 24 00 	mov	r12,-56320
80002eb4:	fe b0 fb 56 	rcall	80002560 <eic_clear_interrupt_line>
}
80002eb8:	e3 cd 40 80 	ldm	sp++,r7,lr
80002ebc:	d6 03       	rete
80002ebe:	d7 03       	nop
80002ec0:	00 00       	add	r0,r0
80002ec2:	0d 0c       	ld.w	r12,r6++
80002ec4:	00 00       	add	r0,r0
80002ec6:	01 00       	ld.w	r0,r0++
80002ec8:	00 00       	add	r0,r0
80002eca:	01 06       	ld.w	r6,r0++
80002ecc:	00 00       	add	r0,r0
80002ece:	01 04       	ld.w	r4,r0++

80002ed0 <spi_init_module>:
80002ed0:	eb cd 40 80 	pushm	r7,lr
80002ed4:	30 2b       	mov	r11,2
80002ed6:	32 2c       	mov	r12,34
}

void spi_init_module(void)
{
	/* Init SPI pins */
	gpio_enable_module_pin(AVR32_SPI_MISO_0_1_PIN, AVR32_SPI_MISO_0_1_FUNCTION);	// PB02
80002ed8:	fe b0 fb aa 	rcall	8000262c <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_MOSI_0_1_PIN, AVR32_SPI_MOSI_0_1_FUNCTION);	// PB03
80002edc:	30 2b       	mov	r11,2
80002ede:	32 3c       	mov	r12,35
80002ee0:	fe b0 fb a6 	rcall	8000262c <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_SCK_0_1_PIN, AVR32_SPI_SCK_0_1_FUNCTION);		// PB01
80002ee4:	30 2b       	mov	r11,2
80002ee6:	32 1c       	mov	r12,33
80002ee8:	fe b0 fb a2 	rcall	8000262c <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_NPCS_0_1_PIN, AVR32_SPI_NPCS_0_1_FUNCTION);	// PB00
80002eec:	30 2b       	mov	r11,2
80002eee:	32 0c       	mov	r12,32
80002ef0:	fe b0 fb 9e 	rcall	8000262c <gpio_enable_module_pin>
	/* Init SPI module as master */
	spi_initMaster(SPI_ADDRESS, &spi_opt);
80002ef4:	fe 7c 40 00 	mov	r12,-49152
80002ef8:	48 a7       	lddpc	r7,80002f20 <spi_init_module+0x50>
80002efa:	0e 9b       	mov	r11,r7
80002efc:	fe b0 fc fc 	rcall	800028f4 <spi_initMaster>
	/* Setup configuration for chip connected to CS1 */
	spi_setupChipReg(SPI_ADDRESS, &spi_opt, sysclk_get_pba_hz());
80002f00:	0e 9b       	mov	r11,r7
80002f02:	e0 6a 90 00 	mov	r10,36864
80002f06:	ea 1a 00 98 	orh	r10,0x98
80002f0a:	fe 7c 40 00 	mov	r12,-49152
80002f0e:	fe b0 fd 4d 	rcall	800029a8 <spi_setupChipReg>
	/* Allow the module to transfer data */
	spi_enable(SPI_ADDRESS);
80002f12:	fe 7c 40 00 	mov	r12,-49152
80002f16:	fe b0 fd 9f 	rcall	80002a54 <spi_enable>
}
80002f1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f1e:	d7 03       	nop
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	37 d8       	mov	r8,125

80002f24 <sysclk_enable_pba_module>:
80002f24:	d4 01       	pushm	lr
80002f26:	18 9b       	mov	r11,r12
80002f28:	30 2c       	mov	r12,2
80002f2a:	c7 5f       	rcall	80002e14 <sysclk_priv_enable_module>
80002f2c:	d8 02       	popm	pc
80002f2e:	d7 03       	nop

80002f30 <main>:
80002f30:	d4 31       	pushm	r0-r7,lr
80002f32:	20 1d       	sub	sp,4
	int n, m;
	uint8_t packet_num, data_out;
	volatile signal_t checksum, sample;
	
	read_request_flag = 0;
	status_request_flag = 0;
80002f34:	4e a8       	lddpc	r8,800030dc <main+0x1ac>
	uint8_t read_idx;
	int n, m;
	uint8_t packet_num, data_out;
	volatile signal_t checksum, sample;
	
	read_request_flag = 0;
80002f36:	4e b7       	lddpc	r7,800030e0 <main+0x1b0>
80002f38:	30 06       	mov	r6,0
80002f3a:	ae 86       	st.b	r7[0x0],r6
	status_request_flag = 0;
80002f3c:	b0 86       	st.b	r8[0x0],r6
// 	#endif
	
// 	const uint32_t channel_mask = SIGNAL_BUFFER_SIZE - 1;
// 	const uint32_t buffer_mask  = (MAX_CHANNELS * SIGNAL_BUFFER_SIZE) - 1;
	
	board_init();
80002f3e:	fe b0 f9 ff 	rcall	8000233c <board_init>
	sysclk_init();
80002f42:	c5 1f       	rcall	80002de4 <sysclk_init>
80002f44:	4e 85       	lddpc	r5,800030e4 <main+0x1b4>
80002f46:	0a 98       	mov	r8,r5
80002f48:	ea c9 ff f9 	sub	r9,r5,-7
// 		read_request_flag = 2;
// 	}
// 	
// }

int main(void)
80002f4c:	10 c6       	st.b	r8++,r6
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
80002f4e:	12 38       	cp.w	r8,r9
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
80002f50:	cf e1       	brne	80002f4c <main+0x1c>
80002f52:	30 18       	mov	r8,1
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
80002f54:	4e 56       	lddpc	r6,800030e8 <main+0x1b8>
80002f56:	aa f8       	st.b	r5[0x7],r8
80002f58:	30 08       	mov	r8,0
80002f5a:	10 99       	mov	r9,r8
	/* Initialize arrays */
	for (m = 0; m < SIGNAL_BUFFER_SIZE; m++)
	{
		for (n = 0; n < MAX_CHANNELS; n++)
		{
			channel_array[n][m] = 0;
80002f5c:	ec 08 0a 19 	st.h	r6[r8<<0x1],r9
80002f60:	f0 ca ff 00 	sub	r10,r8,-256
80002f64:	ec 0a 0a 19 	st.h	r6[r10<<0x1],r9
80002f68:	f0 ca fe 00 	sub	r10,r8,-512
80002f6c:	ec 0a 0a 19 	st.h	r6[r10<<0x1],r9
80002f70:	f0 ca fd 00 	sub	r10,r8,-768
80002f74:	ec 0a 0a 19 	st.h	r6[r10<<0x1],r9
80002f78:	f0 ca fc 00 	sub	r10,r8,-1024
80002f7c:	ec 0a 0a 19 	st.h	r6[r10<<0x1],r9
80002f80:	f0 ca fb 00 	sub	r10,r8,-1280
80002f84:	ec 0a 0a 19 	st.h	r6[r10<<0x1],r9
80002f88:	2f f8       	sub	r8,-1
	board_init();
	sysclk_init();
	sleepmgr_init();
	
	/* Initialize arrays */
	for (m = 0; m < SIGNAL_BUFFER_SIZE; m++)
80002f8a:	e0 48 01 00 	cp.w	r8,256
80002f8e:	ce 71       	brne	80002f5c <main+0x2c>
80002f90:	30 bc       	mov	r12,11
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
80002f92:	cc 9f       	rcall	80002f24 <sysclk_enable_pba_module>
80002f94:	e0 6a 90 00 	mov	r10,36864
		}
	}
	
	/* Configure and enable USART module */
	sysclk_enable_peripheral_clock(USART_MODULE);
	usart_init_rs232(USART_MODULE, &usart_opt, sysclk_get_peripheral_bus_hz(USART_MODULE));
80002f98:	ea 1a 00 98 	orh	r10,0x98
80002f9c:	4d 4b       	lddpc	r11,800030ec <main+0x1bc>
80002f9e:	fe 7c 38 00 	mov	r12,-51200
80002fa2:	fe b0 fd ab 	rcall	80002af8 <usart_init_rs232>
80002fa6:	c9 5f       	rcall	80002ed0 <spi_init_module>
80002fa8:	32 6c       	mov	r12,38
	#ifdef USE_TERMINAL
	usart_write_line(USART_MODULE, "USART initialized.\r\n");
	#endif
	
	/* Configure and enable SPI master module */
	spi_init_module();
80002faa:	fe b0 fb a3 	rcall	800026f0 <gpio_enable_gpio_pin>
	#endif
	
	/* Debugging pin for checking timing
	 * This is the pin marked 'ADC6' on UC3-L0 Xplained
	 */
	gpio_enable_gpio_pin(AVR32_PIN_PB06);
80002fae:	30 1b       	mov	r11,1
80002fb0:	32 6c       	mov	r12,38
80002fb2:	fe b0 fb b4 	rcall	8000271a <gpio_configure_pin>
	gpio_configure_pin(AVR32_PIN_PB06, GPIO_DIR_OUTPUT);
80002fb6:	32 6c       	mov	r12,38
80002fb8:	fe b0 fb fe 	rcall	800027b4 <gpio_clr_gpio_pin>
	gpio_clr_gpio_pin(AVR32_PIN_PB06);
80002fbc:	30 0c       	mov	r12,0
80002fbe:	fe b0 f9 0d 	rcall	800021d8 <ads1299_device_init>

	/* Initialize the ADS1299 */
	//ads1299_host_init();
	ads1299_device_init(SPI_ADS1299_CHIPNUM);
80002fc2:	e1 b8 00 00 	mfsr	r8,0x0
80002fc6:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fc8:	0b 99       	ld.ub	r9,r5[0x1]
80002fca:	2f f9       	sub	r9,-1
	cpu_irq_disable();
80002fcc:	aa 99       	st.b	r5[0x1],r9
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002fce:	ed b8 00 10 	bld	r8,0x10
80002fd2:	c0 20       	breq	80002fd6 <main+0xa6>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fd4:	d5 03       	csrf	0x10
80002fd6:	34 0a       	mov	r10,64
80002fd8:	30 cb       	mov	r11,12
      cpu_irq_enable();
80002fda:	30 0c       	mov	r12,0
		while(1);
	}
	#endif

	/* Write to CH8 settings register, set as normal input, gain 8 */
	ads1299_wreg(SPI_ADS1299_CHIPNUM, ADS1299_REGADDR_CH8SET, 0b01000000);
80002fdc:	fe b0 f8 c0 	rcall	8000215c <ads1299_wreg>
80002fe0:	e0 6a 00 96 	mov	r10,150
80002fe4:	30 1b       	mov	r11,1
	/* Write to CONFIG1, set data rate to 250 Hz */
	ads1299_wreg(SPI_ADS1299_CHIPNUM, ADS1299_REGADDR_CONFIG1, 0b10010110);
80002fe6:	30 0c       	mov	r12,0
80002fe8:	fe b0 f8 ba 	rcall	8000215c <ads1299_wreg>
80002fec:	32 0a       	mov	r10,32
80002fee:	31 5b       	mov	r11,21
80002ff0:	30 0c       	mov	r12,0
	/* Write to MISC1 register, SRB1 on (ref electrode) */
	ads1299_wreg(SPI_ADS1299_CHIPNUM, ADS1299_REGADDR_MISC1, 0b00100000);
80002ff2:	fe b0 f8 b5 	rcall	8000215c <ads1299_wreg>
80002ff6:	c2 bf       	rcall	80002e4c <configure_interrupts>
80002ff8:	30 08       	mov	r8,0
80002ffa:	31 1c       	mov	r12,17
	
	//pdca_init_channel(1, &pdca_opt);
	
	/* Initialize interrupt controller and register USART RX and EIC interrupts */
	configure_interrupts();
80002ffc:	ba 18       	st.h	sp[0x2],r8
80002ffe:	30 01       	mov	r1,0
	
	packet_num = 0;
	checksum = 0;
80003000:	fe b0 fb cd 	rcall	8000279a <gpio_set_gpio_pin>
80003004:	30 23       	mov	r3,2
 * The START pin is defined at the top of ads1299.h with the macro ADS1299_PIN_START.
 */
static inline void ads1299_hard_start_conversion(void)
{
	//#if UC3
	gpio_set_gpio_pin(ADS1299_PIN_START);
80003006:	fe 75 38 00 	mov	r5,-51200
8000300a:	3f f0       	mov	r0,-1
	ads1299_hard_start_conversion();
	//sleepmgr_enter_sleep();
	
	while(1)
	{				
		if (read_request_flag == 2)
8000300c:	0f 88       	ld.ub	r8,r7[0x0]
			 */
			Disable_global_interrupt();
			read_idx = sample_idx;
			
			/* Send sync bytes per modEEG protocol v2 */
			usart_write_char(USART_MODULE, 0xA5);
8000300e:	e6 08 18 00 	cp.b	r8,r3
			usart_write_char(USART_MODULE, 2);
			while(!usart_tx_ready(USART_MODULE));
			/* Send packet number (0-255) */
			usart_write_char(USART_MODULE, packet_num);
			while(!usart_tx_ready(USART_MODULE));
			packet_num = (packet_num == 255)? 0: (packet_num+1);
80003012:	cf d1       	brne	8000300c <main+0xdc>
	ads1299_hard_start_conversion();
	//sleepmgr_enter_sleep();
	
	while(1)
	{				
		if (read_request_flag == 2)
80003014:	d3 03       	ssrf	0x10
80003016:	4b 78       	lddpc	r8,800030f0 <main+0x1c0>
80003018:	e0 6b 00 a5 	mov	r11,165
			 *				   for 24-bit precision is (3*payload_size*MAX_CHANNELS) bytes
			 * Total trailer size is 'FF'+checksum								 = 3 bytes
			 * ---------------------------------------------------------------------------
			 *															5+(2*32*6)+3 = 392 bytes	
			 */
			Disable_global_interrupt();
8000301c:	70 02       	ld.w	r2,r8[0x0]
			read_idx = sample_idx;
8000301e:	fe 7c 38 00 	mov	r12,-51200
			
			/* Send sync bytes per modEEG protocol v2 */
			usart_write_char(USART_MODULE, 0xA5);
80003022:	fe b0 fd 4b 	rcall	80002ab8 <usart_write_char>
80003026:	6a 58       	ld.w	r8,r5[0x14]
80003028:	ed b8 00 01 	bld	r8,0x1
8000302c:	cf d1       	brne	80003026 <main+0xf6>
8000302e:	35 ab       	mov	r11,90
			while(!usart_tx_ready(USART_MODULE));
80003030:	fe 7c 38 00 	mov	r12,-51200
80003034:	fe b0 fd 42 	rcall	80002ab8 <usart_write_char>
			usart_write_char(USART_MODULE, 0x5A);
80003038:	6a 58       	ld.w	r8,r5[0x14]
8000303a:	ed b8 00 01 	bld	r8,0x1
8000303e:	cf d1       	brne	80003038 <main+0x108>
80003040:	30 2b       	mov	r11,2
			while(!usart_tx_ready(USART_MODULE));
80003042:	fe 7c 38 00 	mov	r12,-51200
80003046:	fe b0 fd 39 	rcall	80002ab8 <usart_write_char>
			/* Send version number */
			usart_write_char(USART_MODULE, 2);
8000304a:	6a 58       	ld.w	r8,r5[0x14]
8000304c:	ed b8 00 01 	bld	r8,0x1
80003050:	cf d1       	brne	8000304a <main+0x11a>
80003052:	02 9b       	mov	r11,r1
			while(!usart_tx_ready(USART_MODULE));
80003054:	fe 7c 38 00 	mov	r12,-51200
80003058:	fe b0 fd 30 	rcall	80002ab8 <usart_write_char>
			/* Send packet number (0-255) */
			usart_write_char(USART_MODULE, packet_num);
8000305c:	6a 58       	ld.w	r8,r5[0x14]
8000305e:	ed b8 00 01 	bld	r8,0x1
80003062:	cf d1       	brne	8000305c <main+0x12c>
80003064:	e0 01 18 00 	cp.b	r1,r0
			while(!usart_tx_ready(USART_MODULE));
80003068:	c3 80       	breq	800030d8 <main+0x1a8>
8000306a:	2f f1       	sub	r1,-1
			packet_num = (packet_num == 255)? 0: (packet_num+1);
8000306c:	5c 51       	castu.b	r1
8000306e:	5c 52       	castu.b	r2
80003070:	30 04       	mov	r4,0
80003072:	e8 08 15 08 	lsl	r8,r4,0x8
80003076:	04 08       	add	r8,r2
80003078:	ec 08 04 18 	ld.sh	r8,r6[r8<<0x1]
			
			for (m = 0; m < MAX_PAYLOAD_SIZE; m++)
			{				
				for (n = 0; n < MAX_CHANNELS; n++)
				{
					sample = channel_array[n][read_idx];
8000307c:	ba 08       	st.h	sp[0x0],r8
8000307e:	9a 08       	ld.sh	r8,sp[0x0]
80003080:	9a 19       	ld.sh	r9,sp[0x2]
80003082:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
					/* Checksum(n) = Checksum(n-1) XOR lower byte of sample */
					/* Checksum initialized to 0 */
					checksum ^= (sample & 0xFF);
80003086:	f3 e8 20 08 	eor	r8,r9,r8
8000308a:	fe 7c 38 00 	mov	r12,-51200
8000308e:	ba 18       	st.h	sp[0x2],r8
80003090:	9a 0b       	ld.sh	r11,sp[0x0]
					usart_write_char(USART_MODULE, data_out);
					while(!usart_tx_ready(USART_MODULE));
					#endif /* #ifdef USE_32_BIT_DATA */
					
					data_out = (int)((sample>>8) & 0xFF);
					usart_write_char(USART_MODULE, data_out);
80003092:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
				for (n = 0; n < MAX_CHANNELS; n++)
				{
					sample = channel_array[n][read_idx];
					/* Checksum(n) = Checksum(n-1) XOR lower byte of sample */
					/* Checksum initialized to 0 */
					checksum ^= (sample & 0xFF);
80003096:	fe b0 fd 11 	rcall	80002ab8 <usart_write_char>
					usart_write_char(USART_MODULE, data_out);
					while(!usart_tx_ready(USART_MODULE));
					#endif /* #ifdef USE_32_BIT_DATA */
					
					data_out = (int)((sample>>8) & 0xFF);
					usart_write_char(USART_MODULE, data_out);
8000309a:	6a 58       	ld.w	r8,r5[0x14]
8000309c:	ed b8 00 01 	bld	r8,0x1
800030a0:	cf d1       	brne	8000309a <main+0x16a>
800030a2:	9a 0b       	ld.sh	r11,sp[0x0]
					while(!usart_tx_ready(USART_MODULE));
800030a4:	fe 7c 38 00 	mov	r12,-51200
800030a8:	5c 5b       	castu.b	r11
					
					data_out = (int)(sample & 0x0000FF);
800030aa:	fe b0 fd 07 	rcall	80002ab8 <usart_write_char>
					usart_write_char(USART_MODULE, data_out);
800030ae:	6a 58       	ld.w	r8,r5[0x14]
800030b0:	ed b8 00 01 	bld	r8,0x1
800030b4:	cf d1       	brne	800030ae <main+0x17e>
800030b6:	2f f4       	sub	r4,-1
					while(!usart_tx_ready(USART_MODULE));
800030b8:	58 64       	cp.w	r4,6
800030ba:	cd c1       	brne	80003072 <main+0x142>
800030bc:	30 0b       	mov	r11,0
// 			while(!usart_tx_ready(USART_MODULE));
// 			#endif
			
			for (m = 0; m < MAX_PAYLOAD_SIZE; m++)
			{				
				for (n = 0; n < MAX_CHANNELS; n++)
800030be:	fe 7c 38 00 	mov	r12,-51200
800030c2:	fe b0 fc fb 	rcall	80002ab8 <usart_write_char>
// 			usart_write_char(USART_MODULE, checksum);
// 			while(!usart_tx_ready(USART_MODULE));
// 			#endif
			
			/* Send dummy byte ("switches" from modEEG protocol) */
			usart_write_char(USART_MODULE, 0);
800030c6:	6a 58       	ld.w	r8,r5[0x14]
800030c8:	ed b8 00 01 	bld	r8,0x1
800030cc:	cf d1       	brne	800030c6 <main+0x196>
800030ce:	30 08       	mov	r8,0
			while(!usart_tx_ready(USART_MODULE));
800030d0:	ba 18       	st.h	sp[0x2],r8
800030d2:	ae 88       	st.b	r7[0x0],r8
800030d4:	d5 03       	csrf	0x10
// 			while(!usart_tx_ready(USART_MODULE));
// 			usart_write_char(USART_MODULE, 'F');
// 			while(!usart_tx_ready(USART_MODULE));
			
			/* Reset checksum and flags, re-enable interrupts, and IDLE */
			checksum = 0;		
800030d6:	c9 bb       	rjmp	8000300c <main+0xdc>
800030d8:	30 01       	mov	r1,0
			read_request_flag = 0;
800030da:	cc ab       	rjmp	8000306e <main+0x13e>
			Enable_global_interrupt();
800030dc:	00 00       	add	r0,r0
800030de:	0d 08       	ld.w	r8,r6++
			usart_write_char(USART_MODULE, 2);
			while(!usart_tx_ready(USART_MODULE));
			/* Send packet number (0-255) */
			usart_write_char(USART_MODULE, packet_num);
			while(!usart_tx_ready(USART_MODULE));
			packet_num = (packet_num == 255)? 0: (packet_num+1);
800030e0:	00 00       	add	r0,r0
800030e2:	01 04       	ld.w	r4,r0++
800030e4:	00 00       	add	r0,r0
800030e6:	00 f4       	st.b	--r0,r4
800030e8:	00 00       	add	r0,r0
800030ea:	01 06       	ld.w	r6,r0++
800030ec:	80 00       	ld.sh	r0,r0[0x0]
800030ee:	37 cc       	mov	r12,124
800030f0:	00 00       	add	r0,r0
800030f2:	0d 0c       	ld.w	r12,r6++

800030f4 <__avr32_udiv64>:
800030f4:	d4 31       	pushm	r0-r7,lr
800030f6:	1a 97       	mov	r7,sp
800030f8:	20 3d       	sub	sp,12
800030fa:	10 9c       	mov	r12,r8
800030fc:	12 9e       	mov	lr,r9
800030fe:	14 93       	mov	r3,r10
80003100:	58 09       	cp.w	r9,0
80003102:	e0 81 00 bd 	brne	8000327c <__avr32_udiv64+0x188>
80003106:	16 38       	cp.w	r8,r11
80003108:	e0 88 00 40 	brls	80003188 <__avr32_udiv64+0x94>
8000310c:	f0 08 12 00 	clz	r8,r8
80003110:	c0 d0       	breq	8000312a <__avr32_udiv64+0x36>
80003112:	f6 08 09 4b 	lsl	r11,r11,r8
80003116:	f0 09 11 20 	rsub	r9,r8,32
8000311a:	f8 08 09 4c 	lsl	r12,r12,r8
8000311e:	f4 09 0a 49 	lsr	r9,r10,r9
80003122:	f4 08 09 43 	lsl	r3,r10,r8
80003126:	f3 eb 10 0b 	or	r11,r9,r11
8000312a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000312e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003132:	f6 0e 0d 00 	divu	r0,r11,lr
80003136:	e6 0b 16 10 	lsr	r11,r3,0x10
8000313a:	00 99       	mov	r9,r0
8000313c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003140:	e0 0a 02 48 	mul	r8,r0,r10
80003144:	10 3b       	cp.w	r11,r8
80003146:	c0 a2       	brcc	8000315a <__avr32_udiv64+0x66>
80003148:	20 19       	sub	r9,1
8000314a:	18 0b       	add	r11,r12
8000314c:	18 3b       	cp.w	r11,r12
8000314e:	c0 63       	brcs	8000315a <__avr32_udiv64+0x66>
80003150:	10 3b       	cp.w	r11,r8
80003152:	f7 b9 03 01 	sublo	r9,1
80003156:	f7 dc e3 0b 	addcs	r11,r11,r12
8000315a:	f6 08 01 01 	sub	r1,r11,r8
8000315e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003162:	e2 0e 0d 00 	divu	r0,r1,lr
80003166:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000316a:	00 98       	mov	r8,r0
8000316c:	e0 0a 02 4a 	mul	r10,r0,r10
80003170:	14 33       	cp.w	r3,r10
80003172:	c0 82       	brcc	80003182 <__avr32_udiv64+0x8e>
80003174:	20 18       	sub	r8,1
80003176:	18 03       	add	r3,r12
80003178:	18 33       	cp.w	r3,r12
8000317a:	c0 43       	brcs	80003182 <__avr32_udiv64+0x8e>
8000317c:	14 33       	cp.w	r3,r10
8000317e:	f7 b8 03 01 	sublo	r8,1
80003182:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003186:	cd f8       	rjmp	80003344 <__avr32_udiv64+0x250>
80003188:	58 08       	cp.w	r8,0
8000318a:	c0 51       	brne	80003194 <__avr32_udiv64+0xa0>
8000318c:	30 19       	mov	r9,1
8000318e:	f2 08 0d 08 	divu	r8,r9,r8
80003192:	10 9c       	mov	r12,r8
80003194:	f8 06 12 00 	clz	r6,r12
80003198:	c0 41       	brne	800031a0 <__avr32_udiv64+0xac>
8000319a:	18 1b       	sub	r11,r12
8000319c:	30 19       	mov	r9,1
8000319e:	c4 08       	rjmp	8000321e <__avr32_udiv64+0x12a>
800031a0:	ec 01 11 20 	rsub	r1,r6,32
800031a4:	f4 01 0a 49 	lsr	r9,r10,r1
800031a8:	f8 06 09 4c 	lsl	r12,r12,r6
800031ac:	f6 06 09 48 	lsl	r8,r11,r6
800031b0:	f6 01 0a 41 	lsr	r1,r11,r1
800031b4:	f3 e8 10 08 	or	r8,r9,r8
800031b8:	f8 03 16 10 	lsr	r3,r12,0x10
800031bc:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800031c0:	e2 03 0d 00 	divu	r0,r1,r3
800031c4:	f0 0b 16 10 	lsr	r11,r8,0x10
800031c8:	00 9e       	mov	lr,r0
800031ca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800031ce:	e0 05 02 49 	mul	r9,r0,r5
800031d2:	12 3b       	cp.w	r11,r9
800031d4:	c0 a2       	brcc	800031e8 <__avr32_udiv64+0xf4>
800031d6:	20 1e       	sub	lr,1
800031d8:	18 0b       	add	r11,r12
800031da:	18 3b       	cp.w	r11,r12
800031dc:	c0 63       	brcs	800031e8 <__avr32_udiv64+0xf4>
800031de:	12 3b       	cp.w	r11,r9
800031e0:	f7 be 03 01 	sublo	lr,1
800031e4:	f7 dc e3 0b 	addcs	r11,r11,r12
800031e8:	12 1b       	sub	r11,r9
800031ea:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800031ee:	f6 03 0d 02 	divu	r2,r11,r3
800031f2:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800031f6:	04 99       	mov	r9,r2
800031f8:	e4 05 02 4b 	mul	r11,r2,r5
800031fc:	16 38       	cp.w	r8,r11
800031fe:	c0 a2       	brcc	80003212 <__avr32_udiv64+0x11e>
80003200:	20 19       	sub	r9,1
80003202:	18 08       	add	r8,r12
80003204:	18 38       	cp.w	r8,r12
80003206:	c0 63       	brcs	80003212 <__avr32_udiv64+0x11e>
80003208:	16 38       	cp.w	r8,r11
8000320a:	f7 b9 03 01 	sublo	r9,1
8000320e:	f1 dc e3 08 	addcs	r8,r8,r12
80003212:	f4 06 09 43 	lsl	r3,r10,r6
80003216:	f0 0b 01 0b 	sub	r11,r8,r11
8000321a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000321e:	f8 06 16 10 	lsr	r6,r12,0x10
80003222:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003226:	f6 06 0d 00 	divu	r0,r11,r6
8000322a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000322e:	00 9a       	mov	r10,r0
80003230:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003234:	e0 0e 02 48 	mul	r8,r0,lr
80003238:	10 3b       	cp.w	r11,r8
8000323a:	c0 a2       	brcc	8000324e <__avr32_udiv64+0x15a>
8000323c:	20 1a       	sub	r10,1
8000323e:	18 0b       	add	r11,r12
80003240:	18 3b       	cp.w	r11,r12
80003242:	c0 63       	brcs	8000324e <__avr32_udiv64+0x15a>
80003244:	10 3b       	cp.w	r11,r8
80003246:	f7 ba 03 01 	sublo	r10,1
8000324a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000324e:	f6 08 01 01 	sub	r1,r11,r8
80003252:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003256:	e2 06 0d 00 	divu	r0,r1,r6
8000325a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000325e:	00 98       	mov	r8,r0
80003260:	e0 0e 02 4b 	mul	r11,r0,lr
80003264:	16 33       	cp.w	r3,r11
80003266:	c0 82       	brcc	80003276 <__avr32_udiv64+0x182>
80003268:	20 18       	sub	r8,1
8000326a:	18 03       	add	r3,r12
8000326c:	18 33       	cp.w	r3,r12
8000326e:	c0 43       	brcs	80003276 <__avr32_udiv64+0x182>
80003270:	16 33       	cp.w	r3,r11
80003272:	f7 b8 03 01 	sublo	r8,1
80003276:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000327a:	c6 98       	rjmp	8000334c <__avr32_udiv64+0x258>
8000327c:	16 39       	cp.w	r9,r11
8000327e:	e0 8b 00 65 	brhi	80003348 <__avr32_udiv64+0x254>
80003282:	f2 09 12 00 	clz	r9,r9
80003286:	c0 b1       	brne	8000329c <__avr32_udiv64+0x1a8>
80003288:	10 3a       	cp.w	r10,r8
8000328a:	5f 2a       	srhs	r10
8000328c:	1c 3b       	cp.w	r11,lr
8000328e:	5f b8       	srhi	r8
80003290:	10 4a       	or	r10,r8
80003292:	f2 0a 18 00 	cp.b	r10,r9
80003296:	c5 90       	breq	80003348 <__avr32_udiv64+0x254>
80003298:	30 18       	mov	r8,1
8000329a:	c5 98       	rjmp	8000334c <__avr32_udiv64+0x258>
8000329c:	f0 09 09 46 	lsl	r6,r8,r9
800032a0:	f2 03 11 20 	rsub	r3,r9,32
800032a4:	fc 09 09 4e 	lsl	lr,lr,r9
800032a8:	f0 03 0a 48 	lsr	r8,r8,r3
800032ac:	f6 09 09 4c 	lsl	r12,r11,r9
800032b0:	f4 03 0a 42 	lsr	r2,r10,r3
800032b4:	ef 46 ff f4 	st.w	r7[-12],r6
800032b8:	f6 03 0a 43 	lsr	r3,r11,r3
800032bc:	18 42       	or	r2,r12
800032be:	f1 ee 10 0c 	or	r12,r8,lr
800032c2:	f8 01 16 10 	lsr	r1,r12,0x10
800032c6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800032ca:	e6 01 0d 04 	divu	r4,r3,r1
800032ce:	e4 03 16 10 	lsr	r3,r2,0x10
800032d2:	08 9e       	mov	lr,r4
800032d4:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800032d8:	e8 06 02 48 	mul	r8,r4,r6
800032dc:	10 33       	cp.w	r3,r8
800032de:	c0 a2       	brcc	800032f2 <__avr32_udiv64+0x1fe>
800032e0:	20 1e       	sub	lr,1
800032e2:	18 03       	add	r3,r12
800032e4:	18 33       	cp.w	r3,r12
800032e6:	c0 63       	brcs	800032f2 <__avr32_udiv64+0x1fe>
800032e8:	10 33       	cp.w	r3,r8
800032ea:	f7 be 03 01 	sublo	lr,1
800032ee:	e7 dc e3 03 	addcs	r3,r3,r12
800032f2:	10 13       	sub	r3,r8
800032f4:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800032f8:	e6 01 0d 00 	divu	r0,r3,r1
800032fc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003300:	00 98       	mov	r8,r0
80003302:	e0 06 02 46 	mul	r6,r0,r6
80003306:	0c 3b       	cp.w	r11,r6
80003308:	c0 a2       	brcc	8000331c <__avr32_udiv64+0x228>
8000330a:	20 18       	sub	r8,1
8000330c:	18 0b       	add	r11,r12
8000330e:	18 3b       	cp.w	r11,r12
80003310:	c0 63       	brcs	8000331c <__avr32_udiv64+0x228>
80003312:	0c 3b       	cp.w	r11,r6
80003314:	f7 dc e3 0b 	addcs	r11,r11,r12
80003318:	f7 b8 03 01 	sublo	r8,1
8000331c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003320:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003324:	0c 1b       	sub	r11,r6
80003326:	f0 04 06 42 	mulu.d	r2,r8,r4
8000332a:	06 95       	mov	r5,r3
8000332c:	16 35       	cp.w	r5,r11
8000332e:	e0 8b 00 0a 	brhi	80003342 <__avr32_udiv64+0x24e>
80003332:	5f 0b       	sreq	r11
80003334:	f4 09 09 49 	lsl	r9,r10,r9
80003338:	12 32       	cp.w	r2,r9
8000333a:	5f b9       	srhi	r9
8000333c:	f7 e9 00 09 	and	r9,r11,r9
80003340:	c0 60       	breq	8000334c <__avr32_udiv64+0x258>
80003342:	20 18       	sub	r8,1
80003344:	30 09       	mov	r9,0
80003346:	c0 38       	rjmp	8000334c <__avr32_udiv64+0x258>
80003348:	30 09       	mov	r9,0
8000334a:	12 98       	mov	r8,r9
8000334c:	10 9a       	mov	r10,r8
8000334e:	12 93       	mov	r3,r9
80003350:	10 92       	mov	r2,r8
80003352:	12 9b       	mov	r11,r9
80003354:	2f dd       	sub	sp,-12
80003356:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80003400 <_evba>:
80003400:	c0 08       	rjmp	80003400 <_evba>
	...

80003404 <_handle_TLB_Multiple_Hit>:
80003404:	c0 08       	rjmp	80003404 <_handle_TLB_Multiple_Hit>
	...

80003408 <_handle_Bus_Error_Data_Fetch>:
80003408:	c0 08       	rjmp	80003408 <_handle_Bus_Error_Data_Fetch>
	...

8000340c <_handle_Bus_Error_Instruction_Fetch>:
8000340c:	c0 08       	rjmp	8000340c <_handle_Bus_Error_Instruction_Fetch>
	...

80003410 <_handle_NMI>:
80003410:	c0 08       	rjmp	80003410 <_handle_NMI>
	...

80003414 <_handle_Instruction_Address>:
80003414:	c0 08       	rjmp	80003414 <_handle_Instruction_Address>
	...

80003418 <_handle_ITLB_Protection>:
80003418:	c0 08       	rjmp	80003418 <_handle_ITLB_Protection>
	...

8000341c <_handle_Breakpoint>:
8000341c:	c0 08       	rjmp	8000341c <_handle_Breakpoint>
	...

80003420 <_handle_Illegal_Opcode>:
80003420:	c0 08       	rjmp	80003420 <_handle_Illegal_Opcode>
	...

80003424 <_handle_Unimplemented_Instruction>:
80003424:	c0 08       	rjmp	80003424 <_handle_Unimplemented_Instruction>
	...

80003428 <_handle_Privilege_Violation>:
80003428:	c0 08       	rjmp	80003428 <_handle_Privilege_Violation>
	...

8000342c <_handle_Floating_Point>:
8000342c:	c0 08       	rjmp	8000342c <_handle_Floating_Point>
	...

80003430 <_handle_Coprocessor_Absent>:
80003430:	c0 08       	rjmp	80003430 <_handle_Coprocessor_Absent>
	...

80003434 <_handle_Data_Address_Read>:
80003434:	c0 08       	rjmp	80003434 <_handle_Data_Address_Read>
	...

80003438 <_handle_Data_Address_Write>:
80003438:	c0 08       	rjmp	80003438 <_handle_Data_Address_Write>
	...

8000343c <_handle_DTLB_Protection_Read>:
8000343c:	c0 08       	rjmp	8000343c <_handle_DTLB_Protection_Read>
	...

80003440 <_handle_DTLB_Protection_Write>:
80003440:	c0 08       	rjmp	80003440 <_handle_DTLB_Protection_Write>
	...

80003444 <_handle_DTLB_Modified>:
80003444:	c0 08       	rjmp	80003444 <_handle_DTLB_Modified>
	...

80003450 <_handle_ITLB_Miss>:
80003450:	c0 08       	rjmp	80003450 <_handle_ITLB_Miss>
	...

80003460 <_handle_DTLB_Miss_Read>:
80003460:	c0 08       	rjmp	80003460 <_handle_DTLB_Miss_Read>
	...

80003470 <_handle_DTLB_Miss_Write>:
80003470:	c0 08       	rjmp	80003470 <_handle_DTLB_Miss_Write>
	...

80003500 <_handle_Supervisor_Call>:
80003500:	c0 08       	rjmp	80003500 <_handle_Supervisor_Call>
80003502:	d7 03       	nop

80003504 <_int0>:
80003504:	30 0c       	mov	r12,0
80003506:	fe b0 f9 cb 	rcall	8000289c <_get_interrupt_handler>
8000350a:	58 0c       	cp.w	r12,0
8000350c:	f8 0f 17 10 	movne	pc,r12
80003510:	d6 03       	rete

80003512 <_int1>:
80003512:	30 1c       	mov	r12,1
80003514:	fe b0 f9 c4 	rcall	8000289c <_get_interrupt_handler>
80003518:	58 0c       	cp.w	r12,0
8000351a:	f8 0f 17 10 	movne	pc,r12
8000351e:	d6 03       	rete

80003520 <_int2>:
80003520:	30 2c       	mov	r12,2
80003522:	fe b0 f9 bd 	rcall	8000289c <_get_interrupt_handler>
80003526:	58 0c       	cp.w	r12,0
80003528:	f8 0f 17 10 	movne	pc,r12
8000352c:	d6 03       	rete

8000352e <_int3>:
8000352e:	30 3c       	mov	r12,3
80003530:	fe b0 f9 b6 	rcall	8000289c <_get_interrupt_handler>
80003534:	58 0c       	cp.w	r12,0
80003536:	f8 0f 17 10 	movne	pc,r12
8000353a:	d6 03       	rete
8000353c:	d7 03       	nop
8000353e:	d7 03       	nop
80003540:	d7 03       	nop
80003542:	d7 03       	nop
80003544:	d7 03       	nop
80003546:	d7 03       	nop
80003548:	d7 03       	nop
8000354a:	d7 03       	nop
8000354c:	d7 03       	nop
8000354e:	d7 03       	nop
80003550:	d7 03       	nop
80003552:	d7 03       	nop
80003554:	d7 03       	nop
80003556:	d7 03       	nop
80003558:	d7 03       	nop
8000355a:	d7 03       	nop
8000355c:	d7 03       	nop
8000355e:	d7 03       	nop
80003560:	d7 03       	nop
80003562:	d7 03       	nop
80003564:	d7 03       	nop
80003566:	d7 03       	nop
80003568:	d7 03       	nop
8000356a:	d7 03       	nop
8000356c:	d7 03       	nop
8000356e:	d7 03       	nop
80003570:	d7 03       	nop
80003572:	d7 03       	nop
80003574:	d7 03       	nop
80003576:	d7 03       	nop
80003578:	d7 03       	nop
8000357a:	d7 03       	nop
8000357c:	d7 03       	nop
8000357e:	d7 03       	nop
80003580:	d7 03       	nop
80003582:	d7 03       	nop
80003584:	d7 03       	nop
80003586:	d7 03       	nop
80003588:	d7 03       	nop
8000358a:	d7 03       	nop
8000358c:	d7 03       	nop
8000358e:	d7 03       	nop
80003590:	d7 03       	nop
80003592:	d7 03       	nop
80003594:	d7 03       	nop
80003596:	d7 03       	nop
80003598:	d7 03       	nop
8000359a:	d7 03       	nop
8000359c:	d7 03       	nop
8000359e:	d7 03       	nop
800035a0:	d7 03       	nop
800035a2:	d7 03       	nop
800035a4:	d7 03       	nop
800035a6:	d7 03       	nop
800035a8:	d7 03       	nop
800035aa:	d7 03       	nop
800035ac:	d7 03       	nop
800035ae:	d7 03       	nop
800035b0:	d7 03       	nop
800035b2:	d7 03       	nop
800035b4:	d7 03       	nop
800035b6:	d7 03       	nop
800035b8:	d7 03       	nop
800035ba:	d7 03       	nop
800035bc:	d7 03       	nop
800035be:	d7 03       	nop
800035c0:	d7 03       	nop
800035c2:	d7 03       	nop
800035c4:	d7 03       	nop
800035c6:	d7 03       	nop
800035c8:	d7 03       	nop
800035ca:	d7 03       	nop
800035cc:	d7 03       	nop
800035ce:	d7 03       	nop
800035d0:	d7 03       	nop
800035d2:	d7 03       	nop
800035d4:	d7 03       	nop
800035d6:	d7 03       	nop
800035d8:	d7 03       	nop
800035da:	d7 03       	nop
800035dc:	d7 03       	nop
800035de:	d7 03       	nop
800035e0:	d7 03       	nop
800035e2:	d7 03       	nop
800035e4:	d7 03       	nop
800035e6:	d7 03       	nop
800035e8:	d7 03       	nop
800035ea:	d7 03       	nop
800035ec:	d7 03       	nop
800035ee:	d7 03       	nop
800035f0:	d7 03       	nop
800035f2:	d7 03       	nop
800035f4:	d7 03       	nop
800035f6:	d7 03       	nop
800035f8:	d7 03       	nop
800035fa:	d7 03       	nop
800035fc:	d7 03       	nop
800035fe:	d7 03       	nop
