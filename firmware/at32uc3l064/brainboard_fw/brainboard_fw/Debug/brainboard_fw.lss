
brainboard_fw.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c30  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003e00  80003e00  00004200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001c0  80004000  80004000  00004400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000002a  00000004  800041c0  00004804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .balign       00000002  0000002e  800041ea  0000482e  2**0
                  ALLOC
  7 .bss          000022c8  00000030  800041ec  0000482e  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  0000482e  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000608  00000000  00000000  0000485e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000010ab  00000000  00000000  00004e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000140b2  00000000  00000000  00005f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002123  00000000  00000000  00019fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a129  00000000  00000000  0001c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e38  00000000  00000000  00026210  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003338  00000000  00000000  00027048  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002d73  00000000  00000000  0002a380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 008df7ef  00000000  00000000  0002d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 19 .debug_ranges 000012b0  00000000  00000000  0090c8e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f0 7c 	sub	pc,pc,-3972

Disassembly of section .text:

80002004 <ads1299_rdata32_generic>:
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_rdata32_generic(uint8_t chip_select, volatile uint32_t sample_idx, volatile uint32_t status, volatile int32_t data_array[][MAX_EEG_CHANNELS])
{
80002004:	eb cd 40 f8 	pushm	r3-r7,lr
80002008:	20 5d       	sub	sp,20
8000200a:	50 1b       	stdsp	sp[0x4],r11
	} __attribute__((packed)) statustemp;
	union {
		int32_t raw;
		uint8_t data[4];
	} __attribute__((packed)) sigtemp;
	statustemp.raw = 0;
8000200c:	30 05       	mov	r5,0
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_rdata32_generic(uint8_t chip_select, volatile uint32_t sample_idx, volatile uint32_t status, volatile int32_t data_array[][MAX_EEG_CHANNELS])
{
8000200e:	18 97       	mov	r7,r12
80002010:	12 96       	mov	r6,r9
	} __attribute__((packed)) sigtemp;
	statustemp.raw = 0;
	sigtemp.raw = 0;
	
	/* Begin SPI comms */
	spi_selectChip(SPI_ADDRESS, chip_select);
80002012:	18 9b       	mov	r11,r12
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_rdata32_generic(uint8_t chip_select, volatile uint32_t sample_idx, volatile uint32_t status, volatile int32_t data_array[][MAX_EEG_CHANNELS])
{
80002014:	50 0a       	stdsp	sp[0x0],r10
	} __attribute__((packed)) statustemp;
	union {
		int32_t raw;
		uint8_t data[4];
	} __attribute__((packed)) sigtemp;
	statustemp.raw = 0;
80002016:	fb 65 00 0f 	st.b	sp[15],r5
8000201a:	fb 65 00 10 	st.b	sp[16],r5
8000201e:	fb 65 00 11 	st.b	sp[17],r5
80002022:	fb 65 00 12 	st.b	sp[18],r5
	sigtemp.raw = 0;
80002026:	fb 65 00 0b 	st.b	sp[11],r5
8000202a:	fb 65 00 0c 	st.b	sp[12],r5
8000202e:	fb 65 00 0d 	st.b	sp[13],r5
80002032:	fb 65 00 0e 	st.b	sp[14],r5
	
	/* Begin SPI comms */
	spi_selectChip(SPI_ADDRESS, chip_select);
80002036:	fe 7c 40 00 	mov	r12,-49152
8000203a:	e0 a0 03 f8 	rcall	8000282a <spi_selectChip>
	
	/* Function assumes we've already sent RDATA command or are in RDATAC mode */
	
	/* Read in status word first (24 bits) */
	spi_read_packet(SPI_ADDRESS, &statustemp.status[1], 3);
8000203e:	30 3a       	mov	r10,3
80002040:	fa cb ff f0 	sub	r11,sp,-16
80002044:	fe 7c 40 00 	mov	r12,-49152
80002048:	e0 a0 08 04 	rcall	80003050 <spi_read_packet>
	status = statustemp.raw;
8000204c:	fb 39 00 0f 	ld.ub	r9,sp[15]
80002050:	fb 38 00 10 	ld.ub	r8,sp[16]
80002054:	b1 68       	lsl	r8,0x10
80002056:	f1 e9 11 88 	or	r8,r8,r9<<0x18
8000205a:	fb 39 00 11 	ld.ub	r9,sp[17]
8000205e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002062:	fb 39 00 12 	ld.ub	r9,sp[18]
80002066:	f3 e8 10 08 	or	r8,r9,r8
8000206a:	50 08       	stdsp	sp[0x0],r8
	
	/* Begin reading in data */
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
8000206c:	fb 65 00 13 	st.b	sp[19],r5
80002070:	30 73       	mov	r3,7
80002072:	fb 38 00 13 	ld.ub	r8,sp[19]
80002076:	e6 08 18 00 	cp.b	r8,r3
8000207a:	e0 8b 00 31 	brhi	800020dc <ads1299_rdata32_generic+0xd8>
8000207e:	fa c4 ff f4 	sub	r4,sp,-12
	{
		spi_read_packet(SPI_ADDRESS, &sigtemp.data[1], 3);
		data_array[sample_idx][channel_idx] = SIGN_EXT_24(sigtemp.raw);
80002082:	fc 15 ff 80 	movh	r5,0xff80
	
	/* Begin reading in data */
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
	{
		spi_read_packet(SPI_ADDRESS, &sigtemp.data[1], 3);
80002086:	30 3a       	mov	r10,3
80002088:	08 9b       	mov	r11,r4
8000208a:	fe 7c 40 00 	mov	r12,-49152
8000208e:	e0 a0 07 e1 	rcall	80003050 <spi_read_packet>
		data_array[sample_idx][channel_idx] = SIGN_EXT_24(sigtemp.raw);
80002092:	fb 3b 00 0b 	ld.ub	r11,sp[11]
80002096:	fb 38 00 0c 	ld.ub	r8,sp[12]
8000209a:	b1 68       	lsl	r8,0x10
8000209c:	f1 eb 11 88 	or	r8,r8,r11<<0x18
800020a0:	fb 3b 00 0d 	ld.ub	r11,sp[13]
800020a4:	40 19       	lddsp	r9,sp[0x4]
800020a6:	f1 eb 10 88 	or	r8,r8,r11<<0x8
800020aa:	fb 3a 00 13 	ld.ub	r10,sp[19]
800020ae:	fb 3b 00 0e 	ld.ub	r11,sp[14]
800020b2:	a5 79       	lsl	r9,0x5
800020b4:	f7 e8 10 08 	or	r8,r11,r8
800020b8:	ec 09 00 09 	add	r9,r6,r9
800020bc:	ee 18 00 80 	eorh	r8,0x80
800020c0:	0a 08       	add	r8,r5
800020c2:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
	spi_read_packet(SPI_ADDRESS, &statustemp.status[1], 3);
	status = statustemp.raw;
	
	/* Begin reading in data */
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
800020c6:	fb 38 00 13 	ld.ub	r8,sp[19]
800020ca:	2f f8       	sub	r8,-1
800020cc:	fb 68 00 13 	st.b	sp[19],r8
800020d0:	fb 38 00 13 	ld.ub	r8,sp[19]
800020d4:	e6 08 18 00 	cp.b	r8,r3
800020d8:	fe 98 ff d7 	brls	80002086 <ads1299_rdata32_generic+0x82>
	{
		spi_read_packet(SPI_ADDRESS, &sigtemp.data[1], 3);
		data_array[sample_idx][channel_idx] = SIGN_EXT_24(sigtemp.raw);
	}
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
800020dc:	0e 9b       	mov	r11,r7
800020de:	fe 7c 40 00 	mov	r12,-49152
800020e2:	e0 a0 03 cc 	rcall	8000287a <spi_unselectChip>
	
	#else
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}
800020e6:	2f bd       	sub	sp,-20
800020e8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

800020ec <ads1299_rdata24_packet>:
800020ec:	d4 21       	pushm	r4-r7,lr
800020ee:	20 2d       	sub	sp,8
800020f0:	14 97       	mov	r7,r10
800020f2:	50 0b       	stdsp	sp[0x0],r11
800020f4:	18 94       	mov	r4,r12
800020f6:	fe 7c 40 00 	mov	r12,-49152
	volatile uint8_t channel_idx;
	
	uint8_t temp[3];
	
	/* Begin SPI comms */
	spi_selectChip(SPI_ADDRESS, chip_select);
800020fa:	08 9b       	mov	r11,r4
800020fc:	e0 a0 03 97 	rcall	8000282a <spi_selectChip>
	
	/* Function assumes we've already sent RDATA command or are in RDATAC mode */
	
	/* Read in status word first (24 bits) */
	spi_read_packet(SPI_ADDRESS, temp, 3);
80002100:	fa c6 ff fc 	sub	r6,sp,-4
80002104:	30 3a       	mov	r10,3
80002106:	0c 9b       	mov	r11,r6
80002108:	fe 7c 40 00 	mov	r12,-49152
8000210c:	e0 a0 07 a2 	rcall	80003050 <spi_read_packet>
	packet_ptr->eegstatus[0] = temp[0];
80002110:	1b c8       	ld.ub	r8,sp[0x4]
80002112:	ae b8       	st.b	r7[0x3],r8
	packet_ptr->eegstatus[1] = temp[1];
80002114:	1b d8       	ld.ub	r8,sp[0x5]
80002116:	ae c8       	st.b	r7[0x4],r8
	packet_ptr->eegstatus[2] = temp[2];
80002118:	1b e8       	ld.ub	r8,sp[0x6]
8000211a:	ae d8       	st.b	r7[0x5],r8
	
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
8000211c:	30 08       	mov	r8,0
8000211e:	ba f8       	st.b	sp[0x7],r8
80002120:	30 75       	mov	r5,7
80002122:	1b f8       	ld.ub	r8,sp[0x7]
80002124:	ea 08 18 00 	cp.b	r8,r5
80002128:	e0 8b 00 37 	brhi	80002196 <ads1299_rdata24_packet+0xaa>
	{
		spi_read_packet(SPI_ADDRESS, temp, 3);
8000212c:	30 3a       	mov	r10,3
8000212e:	0c 9b       	mov	r11,r6
80002130:	fe 7c 40 00 	mov	r12,-49152
80002134:	e0 a0 07 8e 	rcall	80003050 <spi_read_packet>
		packet_ptr->eegdata[sample_idx][channel_idx][0] = temp[0];
80002138:	40 08       	lddsp	r8,sp[0x0]
8000213a:	f0 08 00 1a 	add	r10,r8,r8<<0x1
8000213e:	1b f8       	ld.ub	r8,sp[0x7]
80002140:	f0 08 00 19 	add	r9,r8,r8<<0x1
80002144:	f2 0a 00 38 	add	r8,r9,r10<<0x3
80002148:	ee 08 00 08 	add	r8,r7,r8
8000214c:	2f a8       	sub	r8,-6
8000214e:	1b c9       	ld.ub	r9,sp[0x4]
80002150:	b0 89       	st.b	r8[0x0],r9
		packet_ptr->eegdata[sample_idx][channel_idx][1] = temp[1];
80002152:	40 08       	lddsp	r8,sp[0x0]
80002154:	f0 08 00 1a 	add	r10,r8,r8<<0x1
80002158:	1b f8       	ld.ub	r8,sp[0x7]
8000215a:	f0 08 00 19 	add	r9,r8,r8<<0x1
8000215e:	f2 0a 00 38 	add	r8,r9,r10<<0x3
80002162:	ee 08 00 08 	add	r8,r7,r8
80002166:	2f 98       	sub	r8,-7
80002168:	1b d9       	ld.ub	r9,sp[0x5]
8000216a:	b0 89       	st.b	r8[0x0],r9
		packet_ptr->eegdata[sample_idx][channel_idx][2] = temp[2];
8000216c:	40 08       	lddsp	r8,sp[0x0]
8000216e:	f0 08 00 1a 	add	r10,r8,r8<<0x1
80002172:	1b f8       	ld.ub	r8,sp[0x7]
80002174:	f0 08 00 19 	add	r9,r8,r8<<0x1
80002178:	f2 0a 00 38 	add	r8,r9,r10<<0x3
8000217c:	1b e9       	ld.ub	r9,sp[0x6]
8000217e:	ee 08 00 08 	add	r8,r7,r8
80002182:	2f 88       	sub	r8,-8
80002184:	b0 89       	st.b	r8[0x0],r9
	packet_ptr->eegstatus[0] = temp[0];
	packet_ptr->eegstatus[1] = temp[1];
	packet_ptr->eegstatus[2] = temp[2];
	
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
80002186:	1b f8       	ld.ub	r8,sp[0x7]
80002188:	2f f8       	sub	r8,-1
8000218a:	ba f8       	st.b	sp[0x7],r8
8000218c:	1b f8       	ld.ub	r8,sp[0x7]
8000218e:	ea 08 18 00 	cp.b	r8,r5
80002192:	fe 98 ff cd 	brls	8000212c <ads1299_rdata24_packet+0x40>
		packet_ptr->eegdata[sample_idx][channel_idx][0] = temp[0];
		packet_ptr->eegdata[sample_idx][channel_idx][1] = temp[1];
		packet_ptr->eegdata[sample_idx][channel_idx][2] = temp[2];
	}
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002196:	08 9b       	mov	r11,r4
80002198:	fe 7c 40 00 	mov	r12,-49152
8000219c:	e0 a0 03 6f 	rcall	8000287a <spi_unselectChip>
	
	#else
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}
800021a0:	2f ed       	sub	sp,-8
800021a2:	d8 2a       	popm	r4-r7,pc,r12=0

800021a4 <ads1299_wreg>:
800021a4:	eb cd 40 e0 	pushm	r5-r7,lr
800021a8:	18 97       	mov	r7,r12
800021aa:	14 95       	mov	r5,r10
800021ac:	16 96       	mov	r6,r11
800021ae:	18 9b       	mov	r11,r12
}

ads1299_error_t ads1299_wreg(uint8_t chip_select, uint8_t reg_addr, uint8_t reg_val_to_write)
{
	#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
800021b0:	fe 7c 40 00 	mov	r12,-49152
800021b4:	e0 a0 03 3b 	rcall	8000282a <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800021b8:	fe 7a 40 00 	mov	r10,-49152
800021bc:	74 48       	ld.w	r8,r10[0x10]
800021be:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800021c2:	e2 18 00 02 	andl	r8,0x2,COH
800021c6:	cf b0       	breq	800021bc <ads1299_wreg+0x18>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021c8:	a7 a6       	sbr	r6,0x6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021ca:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021cc:	5c 56       	castu.b	r6
800021ce:	93 36       	st.w	r9[0xc],r6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021d0:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800021d2:	ed b8 00 09 	bld	r8,0x9
800021d6:	cf d1       	brne	800021d0 <ads1299_wreg+0x2c>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800021d8:	fe 7a 40 00 	mov	r10,-49152
800021dc:	74 48       	ld.w	r8,r10[0x10]
800021de:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800021e2:	e2 18 00 02 	andl	r8,0x2,COH
800021e6:	cf b0       	breq	800021dc <ads1299_wreg+0x38>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021e8:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021ea:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800021ec:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800021ee:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
800021f0:	ed b8 00 09 	bld	r8,0x9
800021f4:	cf d1       	brne	800021ee <ads1299_wreg+0x4a>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800021f6:	fe 7a 40 00 	mov	r10,-49152
800021fa:	74 48       	ld.w	r8,r10[0x10]
800021fc:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
80002200:	e2 18 00 02 	andl	r8,0x2,COH
80002204:	cf b0       	breq	800021fa <ads1299_wreg+0x56>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002206:	5c 75       	castu.h	r5
80002208:	93 35       	st.w	r9[0xc],r5
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000220a:	72 48       	ld.w	r8,r9[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000220c:	ed b8 00 09 	bld	r8,0x9
80002210:	cf d1       	brne	8000220a <ads1299_wreg+0x66>
	ads1299_send_byte_no_cs(0x00);
	
	/* Third byte: write register value */
	ads1299_send_byte_no_cs(reg_val_to_write);
		
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002212:	0e 9b       	mov	r11,r7
80002214:	fe 7c 40 00 	mov	r12,-49152
80002218:	e0 a0 03 31 	rcall	8000287a <spi_unselectChip>
		
	return ADS1299_STATUS_OK;
	#else
	#endif /* #if UC3 */
}
8000221c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002220 <ads1299_rreg>:
80002220:	eb cd 40 e0 	pushm	r5-r7,lr
80002224:	18 97       	mov	r7,r12
80002226:	14 95       	mov	r5,r10


/* REGISTER READ/WRITE FUNCTIONS *****************************************************************************************************************/

ads1299_error_t ads1299_rreg(uint8_t chip_select, uint8_t reg_addr, uint8_t* read_reg_val_ptr)
{
80002228:	16 96       	mov	r6,r11
	#if UC3
	uint16_t read_data;
		
	spi_selectChip(SPI_ADDRESS, chip_select);
8000222a:	18 9b       	mov	r11,r12
8000222c:	fe 7c 40 00 	mov	r12,-49152
80002230:	e0 a0 02 fd 	rcall	8000282a <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002234:	fe 7a 40 00 	mov	r10,-49152
80002238:	74 48       	ld.w	r8,r10[0x10]
8000223a:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000223e:	e2 18 00 02 	andl	r8,0x2,COH
80002242:	cf b0       	breq	80002238 <ads1299_rreg+0x18>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002244:	a5 b6       	sbr	r6,0x5
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002246:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002248:	5c 56       	castu.b	r6
8000224a:	93 36       	st.w	r9[0xc],r6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000224c:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000224e:	ed b8 00 09 	bld	r8,0x9
80002252:	cf d1       	brne	8000224c <ads1299_rreg+0x2c>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002254:	fe 7a 40 00 	mov	r10,-49152
80002258:	74 48       	ld.w	r8,r10[0x10]
8000225a:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000225e:	e2 18 00 02 	andl	r8,0x2,COH
80002262:	cf b0       	breq	80002258 <ads1299_rreg+0x38>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002264:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002266:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002268:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000226a:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000226c:	ed b8 00 09 	bld	r8,0x9
80002270:	cf d1       	brne	8000226a <ads1299_rreg+0x4a>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80002272:	fe 7a 40 00 	mov	r10,-49152
80002276:	74 48       	ld.w	r8,r10[0x10]
80002278:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000227c:	e2 18 00 02 	andl	r8,0x2,COH
80002280:	cf b0       	breq	80002276 <ads1299_rreg+0x56>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002282:	30 08       	mov	r8,0
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002284:	12 9a       	mov	r10,r9
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002286:	93 38       	st.w	r9[0xc],r8
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
80002288:	74 48       	ld.w	r8,r10[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000228a:	ed b8 00 09 	bld	r8,0x9
8000228e:	cf d1       	brne	80002288 <ads1299_rreg+0x68>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002290:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002294:	f0 ca ff fe 	sub	r10,r8,-2
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002298:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000229c:	14 38       	cp.w	r8,r10
8000229e:	e0 88 00 13 	brls	800022c4 <ads1299_rreg+0xa4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022a2:	10 39       	cp.w	r9,r8
800022a4:	cf a2       	brcc	80002298 <ads1299_rreg+0x78>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022a6:	14 39       	cp.w	r9,r10
800022a8:	fe 98 ff f8 	brls	80002298 <ads1299_rreg+0x78>
	
	/* Dummy byte to clock in data */
	ads1299_send_byte_no_cs(DUMMY_BYTE);
	
	delay_us(10);
	spi_unselectChip(SPI_ADDRESS, chip_select);
800022ac:	0e 9b       	mov	r11,r7
800022ae:	fe 7c 40 00 	mov	r12,-49152
800022b2:	e0 a0 02 e4 	rcall	8000287a <spi_unselectChip>
	*read_reg_val_ptr = (uint8_t) read_data;	
		
	return ADS1299_STATUS_OK;
	#else
	#endif /* #if UC3 */
}
800022b6:	30 0c       	mov	r12,0
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
800022b8:	fe 78 40 00 	mov	r8,-49152
800022bc:	70 28       	ld.w	r8,r8[0x8]
	delay_us(10);
	spi_unselectChip(SPI_ADDRESS, chip_select);
	
	/* Read SPI RX register */
	read_data = spi_get(SPI_ADDRESS);
	*read_reg_val_ptr = (uint8_t) read_data;	
800022be:	aa 88       	st.b	r5[0x0],r8
		
	return ADS1299_STATUS_OK;
	#else
	#endif /* #if UC3 */
}
800022c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022c4:	10 39       	cp.w	r9,r8
800022c6:	cf 33       	brcs	800022ac <ads1299_rreg+0x8c>
800022c8:	ce fb       	rjmp	800022a6 <ads1299_rreg+0x86>
800022ca:	d7 03       	nop

800022cc <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800022cc:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800022d0:	58 0a       	cp.w	r10,0
800022d2:	c7 70       	breq	800023c0 <eic_init+0xf4>
#include "preprocessor.h"
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
800022d4:	30 08       	mov	r8,0
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800022d6:	30 19       	mov	r9,1
#include "preprocessor.h"
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
800022d8:	10 97       	mov	r7,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800022da:	30 1e       	mov	lr,1
800022dc:	c3 88       	rjmp	8000234c <eic_init+0x80>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
800022de:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800022e0:	11 86       	ld.ub	r6,r8[0x0]
800022e2:	fc 06 09 46 	lsl	r6,lr,r6
800022e6:	5c d6       	com	r6
800022e8:	0a 66       	and	r6,r5
800022ea:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800022ec:	11 a6       	ld.ub	r6,r8[0x2]
800022ee:	f2 06 18 00 	cp.b	r6,r9
800022f2:	c3 f0       	breq	80002370 <eic_init+0xa4>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
800022f4:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800022f6:	11 86       	ld.ub	r6,r8[0x0]
800022f8:	fc 06 09 46 	lsl	r6,lr,r6
800022fc:	5c d6       	com	r6
800022fe:	0a 66       	and	r6,r5
80002300:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002302:	11 b6       	ld.ub	r6,r8[0x3]
80002304:	f2 06 18 00 	cp.b	r6,r9
80002308:	c3 e0       	breq	80002384 <eic_init+0xb8>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
8000230a:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000230c:	11 86       	ld.ub	r6,r8[0x0]
8000230e:	fc 06 09 46 	lsl	r6,lr,r6
80002312:	5c d6       	com	r6
80002314:	0a 66       	and	r6,r5
80002316:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002318:	11 c6       	ld.ub	r6,r8[0x4]
8000231a:	f2 06 18 00 	cp.b	r6,r9
8000231e:	c3 d0       	breq	80002398 <eic_init+0xcc>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002320:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002322:	11 86       	ld.ub	r6,r8[0x0]
80002324:	fc 06 09 46 	lsl	r6,lr,r6
80002328:	5c d6       	com	r6
8000232a:	0a 66       	and	r6,r5
8000232c:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000232e:	11 d6       	ld.ub	r6,r8[0x5]
80002330:	f2 06 18 00 	cp.b	r6,r9
80002334:	c3 c0       	breq	800023ac <eic_init+0xe0>
80002336:	11 88       	ld.ub	r8,r8[0x0]
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80002338:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000233a:	fc 08 09 48 	lsl	r8,lr,r8
8000233e:	5c d8       	com	r8
80002340:	0c 68       	and	r8,r6
80002342:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80002344:	2f f7       	sub	r7,-1
80002346:	0e 98       	mov	r8,r7
80002348:	14 37       	cp.w	r7,r10
8000234a:	c3 b0       	breq	800023c0 <eic_init+0xf4>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000234c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002350:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002354:	11 96       	ld.ub	r6,r8[0x1]
80002356:	f2 06 18 00 	cp.b	r6,r9
8000235a:	cc 21       	brne	800022de <eic_init+0x12>
			? (eic->mode | (1 << opt[i].eic_line))
8000235c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000235e:	11 86       	ld.ub	r6,r8[0x0]
80002360:	fc 06 09 46 	lsl	r6,lr,r6
80002364:	0a 46       	or	r6,r5
80002366:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002368:	11 a6       	ld.ub	r6,r8[0x2]
8000236a:	f2 06 18 00 	cp.b	r6,r9
8000236e:	cc 31       	brne	800022f4 <eic_init+0x28>
			? (eic->edge | (1 << opt[i].eic_line))
80002370:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002372:	11 86       	ld.ub	r6,r8[0x0]
80002374:	fc 06 09 46 	lsl	r6,lr,r6
80002378:	0a 46       	or	r6,r5
8000237a:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000237c:	11 b6       	ld.ub	r6,r8[0x3]
8000237e:	f2 06 18 00 	cp.b	r6,r9
80002382:	cc 41       	brne	8000230a <eic_init+0x3e>
			? (eic->level | (1 << opt[i].eic_line))
80002384:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002386:	11 86       	ld.ub	r6,r8[0x0]
80002388:	fc 06 09 46 	lsl	r6,lr,r6
8000238c:	0a 46       	or	r6,r5
8000238e:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002390:	11 c6       	ld.ub	r6,r8[0x4]
80002392:	f2 06 18 00 	cp.b	r6,r9
80002396:	cc 51       	brne	80002320 <eic_init+0x54>
			? (eic->filter | (1 << opt[i].eic_line))
80002398:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000239a:	11 86       	ld.ub	r6,r8[0x0]
8000239c:	fc 06 09 46 	lsl	r6,lr,r6
800023a0:	0a 46       	or	r6,r5
800023a2:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800023a4:	11 d6       	ld.ub	r6,r8[0x5]
800023a6:	f2 06 18 00 	cp.b	r6,r9
800023aa:	cc 61       	brne	80002336 <eic_init+0x6a>
800023ac:	11 88       	ld.ub	r8,r8[0x0]
			? (eic->async | (1 << opt[i].eic_line))
800023ae:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800023b0:	fc 08 09 48 	lsl	r8,lr,r8
800023b4:	0c 48       	or	r8,r6
800023b6:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800023b8:	2f f7       	sub	r7,-1
800023ba:	0e 98       	mov	r8,r7
800023bc:	14 37       	cp.w	r7,r10
800023be:	cc 71       	brne	8000234c <eic_init+0x80>
800023c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800023c4 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800023c4:	30 18       	mov	r8,1
800023c6:	f0 0b 09 48 	lsl	r8,r8,r11
800023ca:	99 c8       	st.w	r12[0x30],r8
}
800023cc:	5e fc       	retal	r12

800023ce <eic_enable_interrupt_line>:
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->ier = 1 << line_number;
800023ce:	30 18       	mov	r8,1
800023d0:	f0 0b 09 48 	lsl	r8,r8,r11
800023d4:	99 08       	st.w	r12[0x0],r8
}
800023d6:	5e fc       	retal	r12

800023d8 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800023d8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800023dc:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800023de:	30 19       	mov	r9,1
800023e0:	f2 0b 09 4b 	lsl	r11,r9,r11
800023e4:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800023e6:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800023e8:	ed b8 00 10 	bld	r8,0x10
800023ec:	c0 20       	breq	800023f0 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800023ee:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800023f0:	5e fc       	retal	r12
800023f2:	d7 03       	nop

800023f4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023f4:	f8 08 16 05 	lsr	r8,r12,0x5
800023f8:	a9 78       	lsl	r8,0x9
800023fa:	e0 28 d4 00 	sub	r8,54272

	/* Enable the correct function. */
	switch (function) {
800023fe:	58 7b       	cp.w	r11,7
80002400:	e0 88 00 03 	brls	80002406 <gpio_enable_module_pin+0x12>
80002404:	5e ff       	retal	1
80002406:	4a 29       	lddpc	r9,8000248c <gpio_enable_module_pin+0x98>
80002408:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
		gpio_port->pmr1c = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000240c:	30 19       	mov	r9,1
8000240e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002412:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002414:	91 9c       	st.w	r8[0x24],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002416:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002418:	91 2c       	st.w	r8[0x8],r12
8000241a:	5e fd       	retal	0
		gpio_port->pmr1s = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000241c:	30 19       	mov	r9,1
8000241e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002422:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002424:	91 9c       	st.w	r8[0x24],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002426:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002428:	91 2c       	st.w	r8[0x8],r12
8000242a:	5e fd       	retal	0
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000242c:	30 19       	mov	r9,1
8000242e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002432:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002434:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002436:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002438:	91 2c       	st.w	r8[0x8],r12
8000243a:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000243c:	30 19       	mov	r9,1
8000243e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002442:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002444:	91 ac       	st.w	r8[0x28],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002446:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002448:	91 2c       	st.w	r8[0x8],r12
8000244a:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000244c:	30 19       	mov	r9,1
8000244e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002452:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002454:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002456:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002458:	91 2c       	st.w	r8[0x8],r12
8000245a:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000245c:	30 19       	mov	r9,1
8000245e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002462:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002464:	91 9c       	st.w	r8[0x24],r12
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002466:	91 ec       	st.w	r8[0x38],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002468:	91 2c       	st.w	r8[0x8],r12
8000246a:	5e fd       	retal	0
#endif
		break;

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000246c:	30 19       	mov	r9,1
8000246e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002472:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002474:	91 ac       	st.w	r8[0x28],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002476:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002478:	91 2c       	st.w	r8[0x8],r12
8000247a:	5e fd       	retal	0
		gpio_port->pmr1c = 1 << (pin & 0x1F);
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000247c:	30 19       	mov	r9,1
8000247e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002482:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002484:	91 ac       	st.w	r8[0x28],r12
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002486:	91 dc       	st.w	r8[0x34],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002488:	91 2c       	st.w	r8[0x8],r12
8000248a:	5e fd       	retal	0
8000248c:	80 00       	ld.sh	r0,r0[0x0]
8000248e:	40 00       	lddsp	r0,sp[0x0]

80002490 <gpio_enable_gpio_pin>:
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002490:	30 18       	mov	r8,1
80002492:	f0 0c 09 48 	lsl	r8,r8,r12
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002496:	a5 9c       	lsr	r12,0x5
80002498:	a9 7c       	lsl	r12,0x9
8000249a:	e0 2c d4 00 	sub	r12,54272
	
	gpio_port->oderc = 1 << (pin & 0x1F);
8000249e:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
800024a2:	99 18       	st.w	r12[0x4],r8
}
800024a4:	5e fc       	retal	r12

800024a6 <gpio_enable_pin_pull_up>:
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->puers = 1 << (pin & 0x1F);
800024a6:	30 18       	mov	r8,1
800024a8:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024ac:	a5 9c       	lsr	r12,0x5
800024ae:	a9 7c       	lsl	r12,0x9
800024b0:	e0 2c d4 00 	sub	r12,54272
	
	gpio_port->puers = 1 << (pin & 0x1F);
800024b4:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800024b8:	5e fc       	retal	r12

800024ba <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024ba:	f8 08 16 05 	lsr	r8,r12,0x5
800024be:	a9 78       	lsl	r8,0x9
800024c0:	e0 28 d4 00 	sub	r8,54272
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800024c4:	ed bb 00 02 	bld	r11,0x2
800024c8:	c1 e1       	brne	80002504 <gpio_configure_pin+0x4a>
		gpio_port->puers = 1 << (pin & 0x1F);
800024ca:	30 19       	mov	r9,1
800024cc:	f2 0c 09 4c 	lsl	r12,r9,r12
800024d0:	f1 4c 00 74 	st.w	r8[116],r12
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800024d4:	ed bb 00 07 	bld	r11,0x7
800024d8:	c0 91       	brne	800024ea <gpio_configure_pin+0x30>
		if (flags & GPIO_BOTHEDGES) {
800024da:	16 99       	mov	r9,r11
800024dc:	e2 19 01 80 	andl	r9,0x180,COH
800024e0:	c1 c0       	breq	80002518 <gpio_configure_pin+0x5e>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800024e2:	f1 4c 00 a8 	st.w	r8[168],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
800024e6:	f1 4c 00 b8 	st.w	r8[184],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800024ea:	ed bb 00 00 	bld	r11,0x0
800024ee:	c1 11       	brne	80002510 <gpio_configure_pin+0x56>
		if (flags & GPIO_INIT_HIGH) {
			gpio_port->ovrs = 1 << (pin & 0x1F);
800024f0:	ed bb 00 01 	bld	r11,0x1
800024f4:	f1 fc 0a 15 	st.weq	r8[0x54],r12
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800024f8:	f1 fc 1a 16 	st.wne	r8[0x58],r12
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800024fc:	f1 4c 00 44 	st.w	r8[68],r12
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002500:	91 1c       	st.w	r8[0x4],r12
}
80002502:	5e fc       	retal	r12

#endif
	if (flags & GPIO_PULL_UP) {
		gpio_port->puers = 1 << (pin & 0x1F);
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002504:	30 19       	mov	r9,1
80002506:	f2 0c 09 4c 	lsl	r12,r9,r12
8000250a:	f1 4c 00 78 	st.w	r8[120],r12
8000250e:	ce 3b       	rjmp	800024d4 <gpio_configure_pin+0x1a>
			gpio_port->ovrc = 1 << (pin & 0x1F);
		}

		gpio_port->oders = 1 << (pin & 0x1F);
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002510:	f1 4c 00 48 	st.w	r8[72],r12
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002514:	91 1c       	st.w	r8[0x4],r12
}
80002516:	5e fc       	retal	r12
	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
		if (flags & GPIO_BOTHEDGES) {
			gpio_port->imr0c = 1 << (pin & 0x1F);
			gpio_port->imr1c = 1 << (pin & 0x1F);
		} else if (flags & GPIO_RISING) {
80002518:	16 99       	mov	r9,r11
8000251a:	e2 19 02 80 	andl	r9,0x280,COH
8000251e:	c0 60       	breq	8000252a <gpio_configure_pin+0x70>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002520:	f1 4c 00 a4 	st.w	r8[164],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002524:	f1 4c 00 b8 	st.w	r8[184],r12
80002528:	ce 1b       	rjmp	800024ea <gpio_configure_pin+0x30>
		} else if (flags & GPIO_FALLING) {
8000252a:	16 99       	mov	r9,r11
8000252c:	e2 19 03 80 	andl	r9,0x380,COH
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002530:	f1 fc 1a 2a 	st.wne	r8[0xa8],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002534:	f1 fc 1a 2d 	st.wne	r8[0xb4],r12
80002538:	cd 9b       	rjmp	800024ea <gpio_configure_pin+0x30>

8000253a <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000253a:	f8 08 16 05 	lsr	r8,r12,0x5
8000253e:	a9 78       	lsl	r8,0x9
80002540:	e0 28 d4 00 	sub	r8,54272
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002544:	71 88       	ld.w	r8,r8[0x60]
80002546:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000254a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000254e:	5e fc       	retal	r12

80002550 <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002550:	30 18       	mov	r8,1
80002552:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002556:	a5 9c       	lsr	r12,0x5
80002558:	a9 7c       	lsl	r12,0x9
8000255a:	e0 2c d4 00 	sub	r12,54272
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000255e:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002562:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002566:	99 18       	st.w	r12[0x4],r8
}
80002568:	5e fc       	retal	r12

8000256a <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000256a:	30 18       	mov	r8,1
8000256c:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002570:	a5 9c       	lsr	r12,0x5
80002572:	a9 7c       	lsl	r12,0x9
80002574:	e0 2c d4 00 	sub	r12,54272
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002578:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000257c:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002580:	99 18       	st.w	r12[0x4],r8
}
80002582:	5e fc       	retal	r12

80002584 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002584:	c0 08       	rjmp	80002584 <_unhandled_interrupt>
80002586:	d7 03       	nop

80002588 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002588:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
8000258c:	49 f8       	lddpc	r8,80002608 <INTC_register_interrupt+0x80>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000258e:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002590:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80002594:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002596:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000259a:	58 0a       	cp.w	r10,0
8000259c:	c1 20       	breq	800025c0 <INTC_register_interrupt+0x38>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
8000259e:	58 1a       	cp.w	r10,1
800025a0:	c1 b0       	breq	800025d6 <INTC_register_interrupt+0x4e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
800025a2:	58 2a       	cp.w	r10,2
800025a4:	c2 50       	breq	800025ee <INTC_register_interrupt+0x66>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800025a6:	fe c9 e6 78 	sub	r9,pc,-6536
800025aa:	fe c8 e7 aa 	sub	r8,pc,-6230
800025ae:	f2 08 01 08 	sub	r8,r9,r8
800025b2:	fe 79 10 00 	mov	r9,-61440
800025b6:	ea 18 c0 00 	orh	r8,0xc000
800025ba:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025be:	5e fc       	retal	r12
800025c0:	fe 78 10 00 	mov	r8,-61440
800025c4:	fe c9 e7 c4 	sub	r9,pc,-6204
800025c8:	fe ca e6 c4 	sub	r10,pc,-6460
800025cc:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800025d0:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
800025d4:	5e fc       	retal	r12
800025d6:	fe c9 e6 c4 	sub	r9,pc,-6460
800025da:	fe c8 e7 da 	sub	r8,pc,-6182
800025de:	f2 08 01 08 	sub	r8,r9,r8
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800025e2:	fe 79 10 00 	mov	r9,-61440
800025e6:	bf a8       	sbr	r8,0x1e
800025e8:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800025ec:	5e fc       	retal	r12
800025ee:	fe c9 e6 ce 	sub	r9,pc,-6450
800025f2:	fe c8 e7 f2 	sub	r8,pc,-6158
800025f6:	f2 08 01 08 	sub	r8,r9,r8
800025fa:	fe 79 10 00 	mov	r9,-61440
800025fe:	bf b8       	sbr	r8,0x1f
80002600:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80002604:	5e fc       	retal	r12
80002606:	d7 03       	nop
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	40 20       	lddsp	r0,sp[0x8]

8000260c <INTC_init_interrupts>:
8000260c:	eb cd 40 e0 	pushm	r5-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002610:	fe c8 e8 10 	sub	r8,pc,-6128
80002614:	e3 b8 00 01 	mtsr	0x4,r8
80002618:	fe c5 e7 14 	sub	r5,pc,-6380
8000261c:	48 d7       	lddpc	r7,80002650 <INTC_init_interrupts+0x44>
8000261e:	10 15       	sub	r5,r8

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002620:	30 0e       	mov	lr,0
80002622:	fe cc 00 9e 	sub	r12,pc,158

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002626:	fe 76 10 00 	mov	r6,-61440
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000262a:	6e 0a       	ld.w	r10,r7[0x0]
8000262c:	58 0a       	cp.w	r10,0
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000262e:	c0 90       	breq	80002640 <INTC_init_interrupts+0x34>
80002630:	30 08       	mov	r8,0
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002632:	6e 1b       	ld.w	r11,r7[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002634:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80002638:	2f f8       	sub	r8,-1

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000263a:	10 3a       	cp.w	r10,r8
8000263c:	fe 9b ff fc 	brhi	80002634 <INTC_init_interrupts+0x28>
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002640:	ec 0e 09 25 	st.w	r6[lr<<0x2],r5
80002644:	2f 87       	sub	r7,-8
80002646:	2f fe       	sub	lr,-1
80002648:	59 fe       	cp.w	lr,31
8000264a:	cf 01       	brne	8000262a <INTC_init_interrupts+0x1e>
8000264c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002650:	80 00       	ld.sh	r0,r0[0x0]
80002652:	40 20       	lddsp	r0,sp[0x8]

80002654 <_get_interrupt_handler>:
80002654:	e0 68 00 83 	mov	r8,131
80002658:	f0 0c 01 0c 	sub	r12,r8,r12
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000265c:	fe 78 10 00 	mov	r8,-61440
80002660:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002664:	f2 ca ff c0 	sub	r10,r9,-64
80002668:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000266c:	58 0c       	cp.w	r12,0
8000266e:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002670:	48 68       	lddpc	r8,80002688 <_get_interrupt_handler+0x34>
80002672:	f8 0c 12 00 	clz	r12,r12
80002676:	f0 09 00 39 	add	r9,r8,r9<<0x3
8000267a:	f8 0c 11 1f 	rsub	r12,r12,31
8000267e:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002680:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002684:	5e fc       	retal	r12
80002686:	d7 03       	nop
80002688:	80 00       	ld.sh	r0,r0[0x0]
8000268a:	40 20       	lddsp	r0,sp[0x8]

8000268c <pdca_disable>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8000268c:	30 b8       	mov	r8,11
8000268e:	f0 0c 18 00 	cp.b	r12,r8
80002692:	e0 8b 00 08 	brhi	800026a2 <pdca_disable+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80002696:	a7 6c       	lsl	r12,0x6
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002698:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8000269a:	e0 3c 00 00 	sub	r12,65536
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000269e:	99 58       	st.w	r12[0x14],r8
}
800026a0:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026a2:	3f fc       	mov	r12,-1
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
800026a4:	30 28       	mov	r8,2
800026a6:	99 58       	st.w	r12[0x14],r8
}
800026a8:	5e fc       	retal	r12

800026aa <pdca_enable>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026aa:	30 b8       	mov	r8,11
800026ac:	f0 0c 18 00 	cp.b	r12,r8
800026b0:	e0 8b 00 08 	brhi	800026c0 <pdca_enable+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800026b4:	a7 6c       	lsl	r12,0x6
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
800026b6:	30 18       	mov	r8,1

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800026b8:	e0 3c 00 00 	sub	r12,65536
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
800026bc:	99 58       	st.w	r12[0x14],r8
}
800026be:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026c0:	3f fc       	mov	r12,-1
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
800026c2:	30 18       	mov	r8,1
800026c4:	99 58       	st.w	r12[0x14],r8
}
800026c6:	5e fc       	retal	r12

800026c8 <pdca_enable_interrupt_transfer_complete>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026c8:	30 b8       	mov	r8,11
800026ca:	f0 0c 18 00 	cp.b	r12,r8
800026ce:	e0 8b 00 08 	brhi	800026de <pdca_enable_interrupt_transfer_complete+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800026d2:	a7 6c       	lsl	r12,0x6
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
800026d4:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800026d6:	e0 3c 00 00 	sub	r12,65536
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
800026da:	99 88       	st.w	r12[0x20],r8
}
800026dc:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026de:	3f fc       	mov	r12,-1
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
800026e0:	30 28       	mov	r8,2
800026e2:	99 88       	st.w	r12[0x20],r8
}
800026e4:	5e fc       	retal	r12

800026e6 <pdca_disable_interrupt_reload_counter_zero>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026e6:	30 b8       	mov	r8,11
800026e8:	f0 0c 18 00 	cp.b	r12,r8
800026ec:	e0 88 00 0e 	brls	80002708 <pdca_disable_interrupt_reload_counter_zero+0x22>
800026f0:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026f2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026f6:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800026f8:	30 19       	mov	r9,1
800026fa:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800026fc:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800026fe:	ed b8 00 10 	bld	r8,0x10
80002702:	c0 20       	breq	80002706 <pdca_disable_interrupt_reload_counter_zero+0x20>
      cpu_irq_enable();
80002704:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002706:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80002708:	a7 6c       	lsl	r12,0x6
8000270a:	e0 3c 00 00 	sub	r12,65536
8000270e:	cf 2b       	rjmp	800026f2 <pdca_disable_interrupt_reload_counter_zero+0xc>

80002710 <pdca_disable_interrupt_transfer_complete>:

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002710:	30 b8       	mov	r8,11
80002712:	f0 0c 18 00 	cp.b	r12,r8
80002716:	e0 88 00 0e 	brls	80002732 <pdca_disable_interrupt_transfer_complete+0x22>
8000271a:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000271c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002720:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002722:	30 29       	mov	r9,2
80002724:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
80002726:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002728:	ed b8 00 10 	bld	r8,0x10
8000272c:	c0 20       	breq	80002730 <pdca_disable_interrupt_transfer_complete+0x20>
      cpu_irq_enable();
8000272e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002730:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80002732:	a7 6c       	lsl	r12,0x6
80002734:	e0 3c 00 00 	sub	r12,65536
80002738:	cf 2b       	rjmp	8000271c <pdca_disable_interrupt_transfer_complete+0xc>

8000273a <pdca_load_channel>:

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8000273a:	30 b8       	mov	r8,11
8000273c:	f0 0c 18 00 	cp.b	r12,r8
80002740:	e0 88 00 11 	brls	80002762 <pdca_load_channel+0x28>
80002744:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002746:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000274a:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)addr;
8000274c:	99 0b       	st.w	r12[0x0],r11
	pdca_channel->tcr = size;
8000274e:	99 2a       	st.w	r12[0x8],r10
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002750:	e0 69 01 00 	mov	r9,256
80002754:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
80002756:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002758:	ed b8 00 10 	bld	r8,0x10
8000275c:	c0 20       	breq	80002760 <pdca_load_channel+0x26>
      cpu_irq_enable();
8000275e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80002760:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80002762:	a7 6c       	lsl	r12,0x6
80002764:	e0 3c 00 00 	sub	r12,65536
80002768:	ce fb       	rjmp	80002746 <pdca_load_channel+0xc>
8000276a:	d7 03       	nop

8000276c <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
8000276c:	eb cd 40 e0 	pushm	r5-r7,lr
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002770:	30 b8       	mov	r8,11
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002772:	18 97       	mov	r7,r12
80002774:	16 95       	mov	r5,r11
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002776:	f0 0c 18 00 	cp.b	r12,r8
8000277a:	e0 88 00 24 	brls	800027c2 <pdca_init_channel+0x56>
8000277e:	3f f6       	mov	r6,-1
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
80002780:	0e 9c       	mov	r12,r7
80002782:	cc 7f       	rcall	80002710 <pdca_disable_interrupt_transfer_complete>
80002784:	0e 9c       	mov	r12,r7
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002786:	cb 0f       	rcall	800026e6 <pdca_disable_interrupt_reload_counter_zero>
80002788:	e1 b8 00 00 	mfsr	r8,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000278c:	d3 03       	ssrf	0x10
8000278e:	6a 09       	ld.w	r9,r5[0x0]
	cpu_irq_disable();
80002790:	8d 09       	st.w	r6[0x0],r9
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
80002792:	6a 19       	ld.w	r9,r5[0x4]
80002794:	8d 29       	st.w	r6[0x8],r9
	pdca_channel->tcr = opt->size;
80002796:	6a 49       	ld.w	r9,r5[0x10]
80002798:	8d 19       	st.w	r6[0x4],r9
	pdca_channel->psr = opt->pid;
8000279a:	6a 29       	ld.w	r9,r5[0x8]
8000279c:	8d 39       	st.w	r6[0xc],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
8000279e:	6a 39       	ld.w	r9,r5[0xc]
800027a0:	8d 49       	st.w	r6[0x10],r9
	pdca_channel->tcrr = opt->r_size;
800027a2:	6a 59       	ld.w	r9,r5[0x14]
800027a4:	eb 3a 00 18 	ld.ub	r10,r5[24]
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800027a8:	f3 ea 10 29 	or	r9,r9,r10<<0x2
800027ac:	8d 69       	st.w	r6[0x18],r9
800027ae:	e0 69 01 00 	mov	r9,256
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800027b2:	8d 59       	st.w	r6[0x14],r9
800027b4:	6c b9       	ld.w	r9,r6[0x2c]
800027b6:	ed b8 00 10 	bld	r8,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800027ba:	c0 20       	breq	800027be <pdca_init_channel+0x52>
800027bc:	d5 03       	csrf	0x10
800027be:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
	pdca_channel->isr;
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
800027c2:	f8 06 15 06 	lsl	r6,r12,0x6

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800027c6:	e0 36 00 00 	sub	r6,65536
800027ca:	cd bb       	rjmp	80002780 <pdca_init_channel+0x14>

800027cc <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027cc:	f8 c8 00 01 	sub	r8,r12,1
800027d0:	f0 0b 00 0b 	add	r11,r8,r11
800027d4:	f6 0c 0d 0a 	divu	r10,r11,r12
800027d8:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027da:	f4 c8 00 01 	sub	r8,r10,1
800027de:	e0 48 00 fe 	cp.w	r8,254
800027e2:	e0 8b 00 04 	brhi	800027ea <getBaudDiv+0x1e>
		return -1;
	}

	return baudDiv;
800027e6:	5c 8c       	casts.h	r12
}
800027e8:	5e fc       	retal	r12

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);

	if (baudDiv <= 0 || baudDiv > 255) {
800027ea:	5e fe       	retal	-1

800027ec <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800027ec:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800027ee:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800027f0:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800027f2:	f7 3a 00 0d 	ld.ub	r10,r11[13]
800027f6:	f0 0a 18 00 	cp.b	r10,r8
800027fa:	e0 88 00 04 	brls	80002802 <spi_initMaster+0x16>
800027fe:	30 2c       	mov	r12,2
80002800:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
80002802:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002804:	e0 68 00 80 	mov	r8,128
80002808:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
8000280a:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
8000280c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000280e:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
80002812:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80002814:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002818:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
8000281c:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002820:	30 fa       	mov	r10,15
80002822:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80002826:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80002828:	d8 02       	popm	pc

8000282a <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000282a:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000282c:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000282e:	ea 19 00 0f 	orh	r9,0xf
80002832:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002834:	78 1c       	ld.w	r12,r12[0x4]
80002836:	e2 1c 00 04 	andl	r12,0x4,COH
8000283a:	c0 80       	breq	8000284a <spi_selectChip+0x20>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000283c:	30 e9       	mov	r9,14
8000283e:	f2 0b 18 00 	cp.b	r11,r9
80002842:	e0 88 00 12 	brls	80002866 <spi_selectChip+0x3c>
	} else {
		if (chip > 3) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002846:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002848:	5e fc       	retal	r12
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000284a:	30 39       	mov	r9,3
8000284c:	f2 0b 18 00 	cp.b	r11,r9
80002850:	fe 9b ff fb 	brhi	80002846 <spi_selectChip+0x1c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002854:	70 19       	ld.w	r9,r8[0x4]
80002856:	2f 0b       	sub	r11,-16
80002858:	30 1a       	mov	r10,1
8000285a:	f4 0b 09 4b 	lsl	r11,r10,r11
8000285e:	5c db       	com	r11
80002860:	12 6b       	and	r11,r9
80002862:	91 1b       	st.w	r8[0x4],r11
80002864:	5e fc       	retal	r12
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002866:	70 19       	ld.w	r9,r8[0x4]
80002868:	b1 6b       	lsl	r11,0x10
8000286a:	30 0c       	mov	r12,0
8000286c:	ea 1b ff f0 	orh	r11,0xfff0
80002870:	e8 1b ff ff 	orl	r11,0xffff
80002874:	12 6b       	and	r11,r9
80002876:	91 1b       	st.w	r8[0x4],r11
80002878:	5e fc       	retal	r12

8000287a <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000287a:	e0 69 3a 98 	mov	r9,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000287e:	c0 48       	rjmp	80002886 <spi_unselectChip+0xc>
		if (!timeout--) {
80002880:	58 09       	cp.w	r9,0
80002882:	c0 e0       	breq	8000289e <spi_unselectChip+0x24>
80002884:	20 19       	sub	r9,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002886:	78 48       	ld.w	r8,r12[0x10]
80002888:	ed b8 00 09 	bld	r8,0x9
8000288c:	cf a1       	brne	80002880 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000288e:	78 18       	ld.w	r8,r12[0x4]
80002890:	ea 18 00 0f 	orh	r8,0xf
80002894:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002896:	fc 18 01 00 	movh	r8,0x100
8000289a:	99 08       	st.w	r12[0x0],r8
8000289c:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
8000289e:	5e ff       	retal	1

800028a0 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a0:	eb cd 40 fe 	pushm	r1-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028a4:	30 34       	mov	r4,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a6:	16 97       	mov	r7,r11
800028a8:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028aa:	f7 35 00 0c 	ld.ub	r5,r11[12]
800028ae:	e8 05 18 00 	cp.b	r5,r4
800028b2:	e0 8b 00 09 	brhi	800028c4 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
800028b6:	f7 32 00 0b 	ld.ub	r2,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028ba:	30 13       	mov	r3,1
800028bc:	e6 02 18 00 	cp.b	r2,r3
800028c0:	e0 88 00 05 	brls	800028ca <spi_setupChipReg+0x2a>
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
		break;
800028c4:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800028c6:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028ca:	f7 31 00 08 	ld.ub	r1,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028ce:	30 78       	mov	r8,7
800028d0:	f0 01 18 00 	cp.b	r1,r8
800028d4:	fe 98 ff f8 	brls	800028c4 <spi_setupChipReg+0x24>
800028d8:	31 08       	mov	r8,16
800028da:	f0 01 18 00 	cp.b	r1,r8
800028de:	fe 9b ff f3 	brhi	800028c4 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028e2:	14 9b       	mov	r11,r10
800028e4:	6e 1c       	ld.w	r12,r7[0x4]
800028e6:	c7 3f       	rcall	800027cc <getBaudDiv>
800028e8:	ce e5       	brlt	800028c4 <spi_setupChipReg+0x24>

	if (baudDiv < 0) {
800028ea:	0a 9a       	mov	r10,r5
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028ec:	ec 1a 00 01 	eorl	r10,0x1
800028f0:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028f2:	a1 95       	lsr	r5,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028f4:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
800028f8:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028fc:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002900:	20 81       	sub	r1,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002902:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002906:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80002908:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000290c:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002910:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002914:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002918:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8000291c:	e6 09 18 00 	cp.b	r9,r3

	switch (options->reg) {
80002920:	c0 f0       	breq	8000293e <spi_setupChipReg+0x9e>
80002922:	c0 b3       	brcs	80002938 <spi_setupChipReg+0x98>
80002924:	30 2a       	mov	r10,2
80002926:	f4 09 18 00 	cp.b	r9,r10
8000292a:	c0 d0       	breq	80002944 <spi_setupChipReg+0xa4>
8000292c:	e8 09 18 00 	cp.b	r9,r4
80002930:	cc a1       	brne	800028c4 <spi_setupChipReg+0x24>
80002932:	8d f8       	st.w	r6[0x3c],r8
	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002934:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002938:	8d c8       	st.w	r6[0x30],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000293a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000293e:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002940:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002944:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002946:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000294a:	d7 03       	nop

8000294c <spi_enable>:
8000294c:	30 18       	mov	r8,1
8000294e:	99 08       	st.w	r12[0x0],r8
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80002950:	5e fc       	retal	r12
80002952:	d7 03       	nop

80002954 <twim_master_interrupt_handler>:
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80002954:	4a b8       	lddpc	r8,80002a00 <twim_master_interrupt_handler+0xac>
80002956:	4a ca       	lddpc	r10,80002a04 <twim_master_interrupt_handler+0xb0>
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	70 79       	ld.w	r9,r8[0x1c]
8000295c:	74 0a       	ld.w	r10,r10[0x0]
8000295e:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002962:	12 9a       	mov	r10,r9
80002964:	e2 1a 07 00 	andl	r10,0x700,COH
80002968:	c1 40       	breq	80002990 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000296a:	4a 8a       	lddpc	r10,80002a08 <twim_master_interrupt_handler+0xb4>
8000296c:	e2 19 03 00 	andl	r9,0x300,COH
80002970:	f9 b9 01 fc 	movne	r9,-4
80002974:	f9 b9 00 fe 	moveq	r9,-2
80002978:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000297a:	30 09       	mov	r9,0
8000297c:	70 3a       	ld.w	r10,r8[0xc]
8000297e:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002982:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002984:	3f fa       	mov	r10,-1
80002986:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
80002988:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000298a:	4a 18       	lddpc	r8,80002a0c <twim_master_interrupt_handler+0xb8>
8000298c:	b0 89       	st.b	r8[0x0],r9
8000298e:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002990:	ed b9 00 00 	bld	r9,0x0
80002994:	c1 21       	brne	800029b8 <twim_master_interrupt_handler+0x64>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80002996:	70 5b       	ld.w	r11,r8[0x14]
80002998:	49 ea       	lddpc	r10,80002a10 <twim_master_interrupt_handler+0xbc>
8000299a:	74 09       	ld.w	r9,r10[0x0]
8000299c:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
8000299e:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
800029a0:	49 d9       	lddpc	r9,80002a14 <twim_master_interrupt_handler+0xc0>
800029a2:	72 0a       	ld.w	r10,r9[0x0]
800029a4:	20 1a       	sub	r10,1
800029a6:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
800029a8:	72 09       	ld.w	r9,r9[0x0]
800029aa:	58 09       	cp.w	r9,0
800029ac:	c2 31       	brne	800029f2 <twim_master_interrupt_handler+0x9e>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
800029ae:	30 1a       	mov	r10,1
800029b0:	91 9a       	st.w	r8[0x24],r10
			// set busy to false
			twim_next = false;
800029b2:	49 78       	lddpc	r8,80002a0c <twim_master_interrupt_handler+0xb8>
800029b4:	b0 89       	st.b	r8[0x0],r9
800029b6:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800029b8:	ed b9 00 01 	bld	r9,0x1
800029bc:	c1 b1       	brne	800029f2 <twim_master_interrupt_handler+0x9e>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800029be:	49 79       	lddpc	r9,80002a18 <twim_master_interrupt_handler+0xc4>
800029c0:	72 0a       	ld.w	r10,r9[0x0]
800029c2:	58 0a       	cp.w	r10,0
800029c4:	c1 80       	breq	800029f4 <twim_master_interrupt_handler+0xa0>
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
			// set busy to false
			twim_next = false;
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800029c6:	49 6b       	lddpc	r11,80002a1c <twim_master_interrupt_handler+0xc8>
800029c8:	76 0a       	ld.w	r10,r11[0x0]
800029ca:	15 3c       	ld.ub	r12,r10++
800029cc:	91 6c       	st.w	r8[0x18],r12
800029ce:	97 0a       	st.w	r11[0x0],r10
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
800029d0:	72 08       	ld.w	r8,r9[0x0]
800029d2:	20 18       	sub	r8,1
800029d4:	93 08       	st.w	r9[0x0],r8
			if (twim_tx_nb_bytes == 0) {
800029d6:	72 08       	ld.w	r8,r9[0x0]
800029d8:	58 08       	cp.w	r8,0
800029da:	c0 c1       	brne	800029f2 <twim_master_interrupt_handler+0x9e>
				// Check for next transfer
				if(twim_next) {
800029dc:	48 ca       	lddpc	r10,80002a0c <twim_master_interrupt_handler+0xb8>
800029de:	15 8c       	ld.ub	r12,r10[0x0]
800029e0:	58 0c       	cp.w	r12,0
800029e2:	c0 80       	breq	800029f2 <twim_master_interrupt_handler+0x9e>
					twim_next = false;
800029e4:	b4 88       	st.b	r10[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
800029e6:	48 f8       	lddpc	r8,80002a20 <twim_master_interrupt_handler+0xcc>
800029e8:	70 08       	ld.w	r8,r8[0x0]
800029ea:	70 3a       	ld.w	r10,r8[0xc]
800029ec:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800029ee:	70 28       	ld.w	r8,r8[0x8]
800029f0:	97 08       	st.w	r11[0x0],r8
800029f2:	d6 03       	rete
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800029f4:	30 29       	mov	r9,2
800029f6:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800029f8:	48 58       	lddpc	r8,80002a0c <twim_master_interrupt_handler+0xb8>
800029fa:	b0 8a       	st.b	r8[0x0],r10
800029fc:	d6 03       	rete
800029fe:	d7 03       	nop
80002a00:	00 00       	add	r0,r0
80002a02:	01 10       	ld.sh	r0,r0++
80002a04:	00 00       	add	r0,r0
80002a06:	01 24       	ld.uh	r4,r0++
80002a08:	00 00       	add	r0,r0
80002a0a:	01 1c       	ld.sh	r12,r0++
80002a0c:	00 00       	add	r0,r0
80002a0e:	01 28       	ld.uh	r8,r0++
80002a10:	00 00       	add	r0,r0
80002a12:	01 14       	ld.sh	r4,r0++
80002a14:	00 00       	add	r0,r0
80002a16:	01 18       	ld.sh	r8,r0++
80002a18:	00 00       	add	r0,r0
80002a1a:	01 30       	ld.ub	r0,r0++
80002a1c:	00 00       	add	r0,r0
80002a1e:	01 20       	ld.uh	r0,r0++
80002a20:	00 00       	add	r0,r0
80002a22:	01 2c       	ld.uh	r12,r0++

80002a24 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80002a24:	eb cd 40 80 	pushm	r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
80002a28:	f4 0b 0d 0a 	divu	r10,r10,r11
80002a2c:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002a30:	e0 48 00 ff 	cp.w	r8,255
80002a34:	e0 88 00 28 	brls	80002a84 <twim_set_speed+0x60>
80002a38:	30 09       	mov	r9,0
80002a3a:	30 77       	mov	r7,7
80002a3c:	12 9e       	mov	lr,r9
		// increase clock divider
		cwgr_exp++;
80002a3e:	2f f9       	sub	r9,-1
		// divide f_prescaled value
		f_prescaled /= 2;
80002a40:	a1 98       	lsr	r8,0x1
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		// increase clock divider
		cwgr_exp++;
80002a42:	5c 59       	castu.b	r9
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002a44:	e0 48 00 ff 	cp.w	r8,255
80002a48:	5f ba       	srhi	r10
80002a4a:	ee 09 18 00 	cp.b	r9,r7
80002a4e:	5f 8b       	srls	r11
80002a50:	f7 ea 00 0a 	and	r10,r11,r10
80002a54:	fc 0a 18 00 	cp.b	r10,lr
80002a58:	cf 31       	brne	80002a3e <twim_set_speed+0x1a>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80002a5a:	30 7a       	mov	r10,7
80002a5c:	f4 09 18 00 	cp.b	r9,r10
80002a60:	e0 8b 00 0f 	brhi	80002a7e <twim_set_speed+0x5a>
80002a64:	bd 69       	lsl	r9,0x1c
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80002a66:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002a6a:	f0 0a 01 0b 	sub	r11,r8,r10
80002a6e:	f5 e8 11 08 	or	r8,r10,r8<<0x10
80002a72:	12 48       	or	r8,r9
80002a74:	f1 eb 10 88 	or	r8,r8,r11<<0x8
80002a78:	99 18       	st.w	r12[0x4],r8
80002a7a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80002a7e:	3f 8c       	mov	r12,-8
80002a80:	e3 cd 80 80 	ldm	sp++,r7,pc
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80002a84:	30 09       	mov	r9,0
80002a86:	cf 0b       	rjmp	80002a66 <twim_set_speed+0x42>

80002a88 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002a88:	eb cd 40 80 	pushm	r7,lr
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002a8c:	30 1e       	mov	lr,1
80002a8e:	99 0e       	st.w	r12[0x0],lr
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002a90:	e0 6e 00 80 	mov	lr,128
80002a94:	99 0e       	st.w	r12[0x0],lr
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002a96:	30 2e       	mov	lr,2
80002a98:	99 0e       	st.w	r12[0x0],lr
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002a9a:	4a 4e       	lddpc	lr,80002b28 <twim_write+0xa0>
80002a9c:	9d 0c       	st.w	lr[0x0],r12
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002a9e:	e1 b7 00 00 	mfsr	r7,0x0
	if (global_interrupt_enabled) {
80002aa2:	ed b7 00 10 	bld	r7,0x10
80002aa6:	c3 81       	brne	80002b16 <twim_write+0x8e>
		cpu_irq_disable ();
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002aa8:	3f f7       	mov	r7,-1
80002aaa:	99 97       	st.w	r12[0x24],r7
	// Clear the status flags
	twim->scr = ~0UL;
80002aac:	99 b7       	st.w	r12[0x2c],r7
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// get a pointer to applicative data
	twim_tx_data = buffer;
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80002aae:	4a 0c       	lddpc	r12,80002b2c <twim_write+0xa4>
80002ab0:	99 0a       	st.w	r12[0x0],r10
	// Set next transfer to false
	twim_next = false;
80002ab2:	4a 0c       	lddpc	r12,80002b30 <twim_write+0xa8>
80002ab4:	30 07       	mov	r7,0
80002ab6:	b8 87       	st.b	r12[0x0],r7
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// get a pointer to applicative data
	twim_tx_data = buffer;
80002ab8:	49 fc       	lddpc	r12,80002b34 <twim_write+0xac>
80002aba:	99 0b       	st.w	r12[0x0],r11
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002abc:	49 fb       	lddpc	r11,80002b38 <twim_write+0xb0>
80002abe:	30 0c       	mov	r12,0
80002ac0:	97 0c       	st.w	r11[0x0],r12
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80002ac2:	b1 6a       	lsl	r10,0x10
80002ac4:	7c 0c       	ld.w	r12,lr[0x0]
80002ac6:	e8 1a e0 00 	orl	r10,0xe000
80002aca:	f5 e9 10 1a 	or	r10,r10,r9<<0x1
80002ace:	f5 e8 10 ba 	or	r10,r10,r8<<0xb
80002ad2:	99 3a       	st.w	r12[0xc],r10
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002ad4:	49 a8       	lddpc	r8,80002b3c <twim_write+0xb4>
80002ad6:	e0 69 03 02 	mov	r9,770
80002ada:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002adc:	70 08       	ld.w	r8,r8[0x0]
80002ade:	99 88       	st.w	r12[0x20],r8
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002ae0:	30 18       	mov	r8,1
80002ae2:	99 08       	st.w	r12[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80002ae4:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002ae6:	76 08       	ld.w	r8,r11[0x0]
80002ae8:	58 08       	cp.w	r8,0
80002aea:	c1 11       	brne	80002b0c <twim_write+0x84>
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002aec:	48 f8       	lddpc	r8,80002b28 <twim_write+0xa0>
80002aee:	70 08       	ld.w	r8,r8[0x0]
80002af0:	70 78       	ld.w	r8,r8[0x1c]
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80002af2:	ed b8 00 04 	bld	r8,0x4
80002af6:	c0 b0       	breq	80002b0c <twim_write+0x84>
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
80002af8:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002afc:	76 08       	ld.w	r8,r11[0x0]
80002afe:	58 08       	cp.w	r8,0
80002b00:	c0 61       	brne	80002b0c <twim_write+0x84>
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002b02:	7c 08       	ld.w	r8,lr[0x0]
80002b04:	70 78       	ld.w	r8,r8[0x1c]
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80002b06:	ed b8 00 04 	bld	r8,0x4
80002b0a:	cf 71       	brne	80002af8 <twim_write+0x70>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002b0c:	76 08       	ld.w	r8,r11[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002b0e:	5b c8       	cp.w	r8,-4
80002b10:	c0 51       	brne	80002b1a <twim_write+0x92>
80002b12:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
80002b16:	d3 03       	ssrf	0x10
80002b18:	cc 8b       	rjmp	80002aa8 <twim_write+0x20>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002b1a:	48 88       	lddpc	r8,80002b38 <twim_write+0xb0>
80002b1c:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80002b1e:	5b e8       	cp.w	r8,-2
80002b20:	cf 90       	breq	80002b12 <twim_write+0x8a>
80002b22:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002b26:	d7 03       	nop
80002b28:	00 00       	add	r0,r0
80002b2a:	01 10       	ld.sh	r0,r0++
80002b2c:	00 00       	add	r0,r0
80002b2e:	01 30       	ld.ub	r0,r0++
80002b30:	00 00       	add	r0,r0
80002b32:	01 28       	ld.uh	r8,r0++
80002b34:	00 00       	add	r0,r0
80002b36:	01 20       	ld.uh	r0,r0++
80002b38:	00 00       	add	r0,r0
80002b3a:	01 1c       	ld.sh	r12,r0++
80002b3c:	00 00       	add	r0,r0
80002b3e:	01 24       	ld.uh	r4,r0++

80002b40 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80002b40:	d4 01       	pushm	lr
80002b42:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002b44:	30 08       	mov	r8,0
	return (twim_write (twim,data,0,chip_addr,0));
80002b46:	16 99       	mov	r9,r11
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
	uint8_t data[1] = { 0 };
80002b48:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002b4a:	1a 9b       	mov	r11,sp
80002b4c:	30 08       	mov	r8,0
80002b4e:	10 9a       	mov	r10,r8
80002b50:	c9 cf       	rcall	80002a88 <twim_write>
80002b52:	2f fd       	sub	sp,-4
}
80002b54:	d8 02       	popm	pc
80002b56:	d7 03       	nop

80002b58 <twim_write_packet>:
80002b58:	eb cd 40 e0 	pushm	r5-r7,lr
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002b5c:	30 18       	mov	r8,1
80002b5e:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002b60:	e0 68 00 80 	mov	r8,128
80002b64:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002b66:	30 28       	mov	r8,2
80002b68:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002b6a:	4a c9       	lddpc	r9,80002c18 <twim_write_packet+0xc0>
80002b6c:	93 0c       	st.w	r9[0x0],r12
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002b6e:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002b72:	ed b8 00 10 	bld	r8,0x10
80002b76:	c4 91       	brne	80002c08 <twim_write_packet+0xb0>
		cpu_irq_disable ();
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002b78:	3f f8       	mov	r8,-1
80002b7a:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002b7c:	99 b8       	st.w	r12[0x2c],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002b7e:	4a 8a       	lddpc	r10,80002c1c <twim_write_packet+0xc4>
80002b80:	30 08       	mov	r8,0
80002b82:	95 08       	st.w	r10[0x0],r8
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80002b84:	e0 67 07 02 	mov	r7,1794
80002b88:	4a 6e       	lddpc	lr,80002c20 <twim_write_packet+0xc8>
80002b8a:	9d 07       	st.w	lr[0x0],r7
	// Set next transfer to false
	twim_next = false;
80002b8c:	4a 67       	lddpc	r7,80002c24 <twim_write_packet+0xcc>
80002b8e:	ae 88       	st.b	r7[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80002b90:	17 f8       	ld.ub	r8,r11[0x7]
80002b92:	58 08       	cp.w	r8,0
80002b94:	c3 30       	breq	80002bfa <twim_write_packet+0xa2>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002b96:	4a 56       	lddpc	r6,80002c28 <twim_write_packet+0xd0>
80002b98:	8d 08       	st.w	r6[0x0],r8
	// Set next transfer to false
	twim_next = false;
	//check if internal address access is performed
	if (package->addr_length) {
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002b9a:	4a 56       	lddpc	r6,80002c2c <twim_write_packet+0xd4>
80002b9c:	f6 c5 ff fc 	sub	r5,r11,-4
80002ba0:	8d 05       	st.w	r6[0x0],r5
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// set next transfer to true
		twim_next = true;
80002ba2:	30 16       	mov	r6,1
80002ba4:	ae 86       	st.b	r7[0x0],r6
		// Set the number of bytes & address for next transfer
		twim_package = package;
80002ba6:	4a 37       	lddpc	r7,80002c30 <twim_write_packet+0xd8>
80002ba8:	8f 0b       	st.w	r7[0x0],r11
80002baa:	76 37       	ld.w	r7,r11[0xc]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002bac:	f0 07 00 07 	add	r7,r8,r7
80002bb0:	76 08       	ld.w	r8,r11[0x0]
80002bb2:	a1 78       	lsl	r8,0x1
80002bb4:	e8 18 e0 00 	orl	r8,0xe000
80002bb8:	f1 e7 11 08 	or	r8,r8,r7<<0x10
80002bbc:	99 38       	st.w	r12[0xc],r8
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002bbe:	7c 0b       	ld.w	r11,lr[0x0]
80002bc0:	72 08       	ld.w	r8,r9[0x0]
80002bc2:	91 8b       	st.w	r8[0x20],r11
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002bc4:	30 1b       	mov	r11,1
80002bc6:	91 0b       	st.w	r8[0x0],r11
	// Enable all interrupts
	cpu_irq_enable ();
80002bc8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002bca:	74 08       	ld.w	r8,r10[0x0]
80002bcc:	58 08       	cp.w	r8,0
80002bce:	c1 11       	brne	80002bf0 <twim_write_packet+0x98>
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002bd0:	49 28       	lddpc	r8,80002c18 <twim_write_packet+0xc0>
80002bd2:	70 08       	ld.w	r8,r8[0x0]
80002bd4:	70 78       	ld.w	r8,r8[0x1c]
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80002bd6:	ed b8 00 04 	bld	r8,0x4
80002bda:	c0 b0       	breq	80002bf0 <twim_write_packet+0x98>
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
80002bdc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80002be0:	74 08       	ld.w	r8,r10[0x0]
80002be2:	58 08       	cp.w	r8,0
80002be4:	c0 61       	brne	80002bf0 <twim_write_packet+0x98>
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002be6:	72 08       	ld.w	r8,r9[0x0]
80002be8:	70 78       	ld.w	r8,r8[0x1c]
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80002bea:	ed b8 00 04 	bld	r8,0x4
80002bee:	cf 71       	brne	80002bdc <twim_write_packet+0x84>
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002bf0:	74 08       	ld.w	r8,r10[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80002bf2:	5b c8       	cp.w	r8,-4
80002bf4:	c0 c1       	brne	80002c0c <twim_write_packet+0xb4>
80002bf6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
80002bfa:	76 26       	ld.w	r6,r11[0x8]
80002bfc:	48 c7       	lddpc	r7,80002c2c <twim_write_packet+0xd4>
80002bfe:	8f 06       	st.w	r7[0x0],r6
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80002c00:	48 a6       	lddpc	r6,80002c28 <twim_write_packet+0xd0>
80002c02:	76 37       	ld.w	r7,r11[0xc]
80002c04:	8d 07       	st.w	r6[0x0],r7
80002c06:	cd 3b       	rjmp	80002bac <twim_write_packet+0x54>
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
80002c08:	d3 03       	ssrf	0x10
80002c0a:	cb 7b       	rjmp	80002b78 <twim_write_packet+0x20>
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002c0c:	48 48       	lddpc	r8,80002c1c <twim_write_packet+0xc4>
80002c0e:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80002c10:	5b e8       	cp.w	r8,-2
80002c12:	cf 20       	breq	80002bf6 <twim_write_packet+0x9e>
80002c14:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002c18:	00 00       	add	r0,r0
80002c1a:	01 10       	ld.sh	r0,r0++
80002c1c:	00 00       	add	r0,r0
80002c1e:	01 1c       	ld.sh	r12,r0++
80002c20:	00 00       	add	r0,r0
80002c22:	01 24       	ld.uh	r4,r0++
80002c24:	00 00       	add	r0,r0
80002c26:	01 28       	ld.uh	r8,r0++
80002c28:	00 00       	add	r0,r0
80002c2a:	01 30       	ld.ub	r0,r0++
80002c2c:	00 00       	add	r0,r0
80002c2e:	01 20       	ld.uh	r0,r0++
80002c30:	00 00       	add	r0,r0
80002c32:	01 2c       	ld.uh	r12,r0++

80002c34 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80002c34:	eb cd 40 c0 	pushm	r6-r7,lr
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002c38:	30 28       	mov	r8,2
80002c3a:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002c3c:	4b 79       	lddpc	r9,80002d18 <twim_read_packet+0xe4>
80002c3e:	93 0c       	st.w	r9[0x0],r12
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002c40:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002c44:	ed b8 00 10 	bld	r8,0x10
80002c48:	c5 f1       	brne	80002d06 <twim_read_packet+0xd2>
		cpu_irq_disable ();
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002c4a:	3f f8       	mov	r8,-1
80002c4c:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002c4e:	99 b8       	st.w	r12[0x2c],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80002c50:	4b 38       	lddpc	r8,80002d1c <twim_read_packet+0xe8>
80002c52:	76 2a       	ld.w	r10,r11[0x8]
80002c54:	91 0a       	st.w	r8[0x0],r10
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80002c56:	4b 38       	lddpc	r8,80002d20 <twim_read_packet+0xec>
80002c58:	76 37       	ld.w	r7,r11[0xc]
80002c5a:	91 07       	st.w	r8[0x0],r7
	// Set next write transfer to false
	twim_next = false;
80002c5c:	4b 2a       	lddpc	r10,80002d24 <twim_read_packet+0xf0>
80002c5e:	30 08       	mov	r8,0
80002c60:	b4 88       	st.b	r10[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002c62:	30 0e       	mov	lr,0
80002c64:	4b 1a       	lddpc	r10,80002d28 <twim_read_packet+0xf4>
80002c66:	95 0e       	st.w	r10[0x0],lr
	//check if internal address access is performed
	if (package->addr_length) {
80002c68:	17 f6       	ld.ub	r6,r11[0x7]
80002c6a:	f0 06 18 00 	cp.b	r6,r8
80002c6e:	c3 d0       	breq	80002ce8 <twim_read_packet+0xb4>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80002c70:	30 1e       	mov	lr,1
80002c72:	72 08       	ld.w	r8,r9[0x0]
80002c74:	91 0e       	st.w	r8[0x0],lr
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80002c76:	e0 6e 00 80 	mov	lr,128
80002c7a:	91 0e       	st.w	r8[0x0],lr
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80002c7c:	30 2e       	mov	lr,2
80002c7e:	91 0e       	st.w	r8[0x0],lr
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80002c80:	4a be       	lddpc	lr,80002d2c <twim_read_packet+0xf8>
80002c82:	f6 c7 ff fc 	sub	r7,r11,-4
80002c86:	9d 07       	st.w	lr[0x0],r7
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80002c88:	4a ae       	lddpc	lr,80002d30 <twim_read_packet+0xfc>
80002c8a:	17 f6       	ld.ub	r6,r11[0x7]
80002c8c:	9d 06       	st.w	lr[0x0],r6
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80002c8e:	e0 67 07 03 	mov	r7,1795
80002c92:	4a 9e       	lddpc	lr,80002d34 <twim_read_packet+0x100>
80002c94:	9d 07       	st.w	lr[0x0],r7
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002c96:	76 07       	ld.w	r7,r11[0x0]
80002c98:	a1 77       	lsl	r7,0x1
80002c9a:	e8 17 a0 00 	orl	r7,0xa000
80002c9e:	ef e6 11 07 	or	r7,r7,r6<<0x10
80002ca2:	91 37       	st.w	r8[0xc],r7
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80002ca4:	76 37       	ld.w	r7,r11[0xc]
80002ca6:	76 0b       	ld.w	r11,r11[0x0]
80002ca8:	b1 67       	lsl	r7,0x10
80002caa:	ef eb 10 1b 	or	r11,r7,r11<<0x1
80002cae:	e8 1b e0 01 	orl	r11,0xe001
80002cb2:	91 4b       	st.w	r8[0x10],r11
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80002cb4:	7c 0b       	ld.w	r11,lr[0x0]
80002cb6:	91 8b       	st.w	r8[0x20],r11
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002cb8:	30 18       	mov	r8,1
80002cba:	99 08       	st.w	r12[0x0],r8
	// Enable all interrupts
	cpu_irq_enable ();
80002cbc:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002cbe:	74 08       	ld.w	r8,r10[0x0]
80002cc0:	58 08       	cp.w	r8,0
80002cc2:	c0 61       	brne	80002cce <twim_read_packet+0x9a>
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002cc4:	72 08       	ld.w	r8,r9[0x0]
80002cc6:	70 78       	ld.w	r8,r8[0x1c]
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80002cc8:	ed b8 00 04 	bld	r8,0x4
80002ccc:	c0 81       	brne	80002cdc <twim_read_packet+0xa8>
	// get data
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002cce:	30 28       	mov	r8,2
80002cd0:	99 08       	st.w	r12[0x0],r8
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002cd2:	74 08       	ld.w	r8,r10[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002cd4:	5b c8       	cp.w	r8,-4
80002cd6:	c1 a1       	brne	80002d0a <twim_read_packet+0xd6>
80002cd8:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
80002cdc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80002ce0:	74 08       	ld.w	r8,r10[0x0]
80002ce2:	58 08       	cp.w	r8,0
80002ce4:	cf 00       	breq	80002cc4 <twim_read_packet+0x90>
80002ce6:	cf 4b       	rjmp	80002cce <twim_read_packet+0x9a>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80002ce8:	49 28       	lddpc	r8,80002d30 <twim_read_packet+0xfc>
80002cea:	91 0e       	st.w	r8[0x0],lr
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80002cec:	e0 68 07 01 	mov	r8,1793
80002cf0:	49 1e       	lddpc	lr,80002d34 <twim_read_packet+0x100>
80002cf2:	9d 08       	st.w	lr[0x0],r8
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80002cf4:	76 08       	ld.w	r8,r11[0x0]
80002cf6:	b1 67       	lsl	r7,0x10
80002cf8:	ef e8 10 17 	or	r7,r7,r8<<0x1
80002cfc:	72 08       	ld.w	r8,r9[0x0]
80002cfe:	e8 17 e0 01 	orl	r7,0xe001
80002d02:	91 37       	st.w	r8[0xc],r7
80002d04:	cd 8b       	rjmp	80002cb4 <twim_read_packet+0x80>
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
80002d06:	d3 03       	ssrf	0x10
80002d08:	ca 1b       	rjmp	80002c4a <twim_read_packet+0x16>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002d0a:	48 88       	lddpc	r8,80002d28 <twim_read_packet+0xf4>
80002d0c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80002d0e:	5b e8       	cp.w	r8,-2
80002d10:	ce 40       	breq	80002cd8 <twim_read_packet+0xa4>
80002d12:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002d16:	d7 03       	nop
80002d18:	00 00       	add	r0,r0
80002d1a:	01 10       	ld.sh	r0,r0++
80002d1c:	00 00       	add	r0,r0
80002d1e:	01 14       	ld.sh	r4,r0++
80002d20:	00 00       	add	r0,r0
80002d22:	01 18       	ld.sh	r8,r0++
80002d24:	00 00       	add	r0,r0
80002d26:	01 28       	ld.uh	r8,r0++
80002d28:	00 00       	add	r0,r0
80002d2a:	01 1c       	ld.sh	r12,r0++
80002d2c:	00 00       	add	r0,r0
80002d2e:	01 20       	ld.uh	r0,r0++
80002d30:	00 00       	add	r0,r0
80002d32:	01 30       	ld.ub	r0,r0++
80002d34:	00 00       	add	r0,r0
80002d36:	01 24       	ld.uh	r4,r0++

80002d38 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002d38:	d4 21       	pushm	r4-r7,lr
80002d3a:	18 97       	mov	r7,r12
80002d3c:	16 96       	mov	r6,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002d3e:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002d42:	4a 55       	lddpc	r5,80002dd4 <twim_master_init+0x9c>
80002d44:	30 09       	mov	r9,0
80002d46:	8b 09       	st.w	r5[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80002d48:	ed b8 00 10 	bld	r8,0x10
80002d4c:	c2 b1       	brne	80002da2 <twim_master_init+0x6a>
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002d4e:	3f f8       	mov	r8,-1
80002d50:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002d52:	30 18       	mov	r8,1
80002d54:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002d56:	e0 68 00 80 	mov	r8,128
80002d5a:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002d5c:	3f f8       	mov	r8,-1
80002d5e:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d60:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80002d64:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
80002d66:	30 1a       	mov	r10,1
80002d68:	e0 6b 02 80 	mov	r11,640
80002d6c:	fe cc 04 18 	sub	r12,pc,1048
80002d70:	fe b0 fc 0c 	rcall	80002588 <INTC_register_interrupt>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002d74:	e6 14 00 01 	andh	r4,0x1,COH
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
80002d78:	c1 f0       	breq	80002db6 <twim_master_init+0x7e>
80002d7a:	30 08       	mov	r8,0
80002d7c:	ed 39 00 0c 	ld.ub	r9,r6[12]
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80002d80:	f0 09 18 00 	cp.b	r9,r8
80002d84:	f9 b8 01 10 	movne	r8,16
80002d88:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
80002d8c:	f9 b8 01 ff 	movne	r8,-1
80002d90:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80002d94:	0e 9c       	mov	r12,r7
80002d96:	6c 0a       	ld.w	r10,r6[0x0]
80002d98:	6c 1b       	ld.w	r11,r6[0x4]
80002d9a:	c4 5e       	rcall	80002a24 <twim_set_speed>
80002d9c:	5b 8c       	cp.w	r12,-8
80002d9e:	c0 e1       	brne	80002dba <twim_master_init+0x82>
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80002da0:	d8 22       	popm	r4-r7,pc
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
80002da2:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002da4:	3f f8       	mov	r8,-1
80002da6:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002da8:	30 18       	mov	r8,1
80002daa:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80002dac:	e0 68 00 80 	mov	r8,128
80002db0:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002db2:	d5 03       	csrf	0x10
80002db4:	cd 4b       	rjmp	80002d5c <twim_master_init+0x24>
      cpu_irq_enable();
80002db6:	d5 03       	csrf	0x10
80002db8:	ce 1b       	rjmp	80002d7a <twim_master_init+0x42>
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80002dba:	6c 2b       	ld.w	r11,r6[0x8]
80002dbc:	0e 9c       	mov	r12,r7
80002dbe:	cc 1e       	rcall	80002b40 <twim_probe>
80002dc0:	6a 08       	ld.w	r8,r5[0x0]
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002dc2:	5b c8       	cp.w	r8,-4
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002dc4:	c0 31       	brne	80002dca <twim_master_init+0x92>
80002dc6:	3f fc       	mov	r12,-1
80002dc8:	ce cb       	rjmp	80002da0 <twim_master_init+0x68>
80002dca:	48 38       	lddpc	r8,80002dd4 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80002dcc:	70 08       	ld.w	r8,r8[0x0]
80002dce:	5b e8       	cp.w	r8,-2
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80002dd0:	cf b0       	breq	80002dc6 <twim_master_init+0x8e>
80002dd2:	d8 2a       	popm	r4-r7,pc,r12=0
80002dd4:	00 00       	add	r0,r0
80002dd6:	01 1c       	ld.sh	r12,r0++

80002dd8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002dd8:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002dda:	f6 08 15 04 	lsl	r8,r11,0x4
80002dde:	14 38       	cp.w	r8,r10
80002de0:	e0 8b 00 26 	brhi	80002e2c <usart_set_async_baudrate+0x54>
80002de4:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002de6:	f0 09 16 01 	lsr	r9,r8,0x1
80002dea:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80002dee:	f2 08 0d 08 	divu	r8,r9,r8
80002df2:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002df4:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002df6:	f0 cb 00 01 	sub	r11,r8,1
80002dfa:	e0 4b ff fe 	cp.w	r11,65534
80002dfe:	e0 8b 00 1b 	brhi	80002e34 <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002e02:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002e04:	e8 6b 00 00 	mov	r11,524288
80002e08:	e4 1a ff f7 	andh	r10,0xfff7
80002e0c:	e0 1a fe cf 	andl	r10,0xfecf
80002e10:	59 0e       	cp.w	lr,16
80002e12:	f6 0e 17 10 	movne	lr,r11
80002e16:	f9 be 00 00 	moveq	lr,0
80002e1a:	fd ea 10 0a 	or	r10,lr,r10
80002e1e:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002e20:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80002e24:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002e28:	99 88       	st.w	r12[0x20],r8
80002e2a:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002e2c:	f6 08 15 03 	lsl	r8,r11,0x3
80002e30:	30 8e       	mov	lr,8
80002e32:	cd ab       	rjmp	80002de6 <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002e34:	da 0a       	popm	pc,r12=1

80002e36 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002e36:	e0 69 27 0f 	mov	r9,9999
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002e3a:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002e3c:	ed b8 00 01 	bld	r8,0x1
80002e40:	c0 51       	brne	80002e4a <usart_putchar+0x14>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002e42:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002e46:	99 7b       	st.w	r12[0x1c],r11
80002e48:	5e fd       	retal	0
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002e4a:	58 09       	cp.w	r9,0
80002e4c:	c0 30       	breq	80002e52 <usart_putchar+0x1c>
80002e4e:	20 19       	sub	r9,1
80002e50:	cf 5b       	rjmp	80002e3a <usart_putchar+0x4>
80002e52:	5e fe       	retal	-1

80002e54 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002e54:	17 8a       	ld.ub	r10,r11[0x0]
80002e56:	58 0a       	cp.w	r10,0
80002e58:	5e 0c       	reteq	r12
80002e5a:	e0 69 27 0f 	mov	r9,9999
80002e5e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002e60:	ed b8 00 01 	bld	r8,0x1
80002e64:	c0 91       	brne	80002e76 <usart_write_line+0x22>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002e66:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9
80002e6a:	99 78       	st.w	r12[0x1c],r8


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80002e6c:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002e6e:	17 8a       	ld.ub	r10,r11[0x0]
80002e70:	58 0a       	cp.w	r10,0
80002e72:	cf 41       	brne	80002e5a <usart_write_line+0x6>
80002e74:	5e fc       	retal	r12
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002e76:	58 09       	cp.w	r9,0
80002e78:	cf a0       	breq	80002e6c <usart_write_line+0x18>
80002e7a:	20 19       	sub	r9,1
80002e7c:	cf 1b       	rjmp	80002e5e <usart_write_line+0xa>

80002e7e <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002e7e:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002e82:	ed b8 00 10 	bld	r8,0x10
80002e86:	c0 c1       	brne	80002e9e <usart_reset+0x20>
  usart->idr = 0xFFFFFFFF;
80002e88:	3f f8       	mov	r8,-1
80002e8a:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002e8c:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002e8e:	30 08       	mov	r8,0
80002e90:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002e92:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002e94:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002e96:	e8 68 61 0c 	mov	r8,549132
80002e9a:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002e9c:	5e fc       	retal	r12
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002e9e:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002ea0:	3f f8       	mov	r8,-1
80002ea2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002ea4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002ea6:	d5 03       	csrf	0x10
80002ea8:	cf 3b       	rjmp	80002e8e <usart_reset+0x10>
80002eaa:	d7 03       	nop

80002eac <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002eac:	d4 21       	pushm	r4-r7,lr
80002eae:	16 97       	mov	r7,r11
80002eb0:	14 94       	mov	r4,r10
80002eb2:	18 96       	mov	r6,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002eb4:	ce 5f       	rcall	80002e7e <usart_reset>
80002eb6:	58 07       	cp.w	r7,0

  // Check input values.
  if (!opt || // Null pointer.
80002eb8:	c2 00       	breq	80002ef8 <usart_init_rs232+0x4c>
80002eba:	0f c8       	ld.ub	r8,r7[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80002ebc:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002ebe:	f2 08 18 00 	cp.b	r8,r9
80002ec2:	e0 88 00 1b 	brls	80002ef8 <usart_init_rs232+0x4c>
80002ec6:	30 95       	mov	r5,9
80002ec8:	ea 08 18 00 	cp.b	r8,r5
80002ecc:	e0 8b 00 16 	brhi	80002ef8 <usart_init_rs232+0x4c>
80002ed0:	0f d9       	ld.ub	r9,r7[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002ed2:	30 78       	mov	r8,7
80002ed4:	f0 09 18 00 	cp.b	r9,r8
80002ed8:	e0 8b 00 10 	brhi	80002ef8 <usart_init_rs232+0x4c>
80002edc:	8e 39       	ld.sh	r9,r7[0x6]
      opt->stopbits > 2 + 255 ||
80002ede:	e0 68 01 01 	mov	r8,257
80002ee2:	f0 09 19 00 	cp.h	r9,r8
80002ee6:	e0 8b 00 09 	brhi	80002ef8 <usart_init_rs232+0x4c>
80002eea:	ef 39 00 08 	ld.ub	r9,r7[8]
      opt->channelmode > 3 ||
80002eee:	30 38       	mov	r8,3
80002ef0:	f0 09 18 00 	cp.b	r9,r8
80002ef4:	e0 88 00 03 	brls	80002efa <usart_init_rs232+0x4e>
80002ef8:	da 2a       	popm	r4-r7,pc,r12=1
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002efa:	08 9a       	mov	r10,r4
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002efc:	6e 0b       	ld.w	r11,r7[0x0]
80002efe:	0c 9c       	mov	r12,r6
80002f00:	c6 cf       	rcall	80002dd8 <usart_set_async_baudrate>
80002f02:	58 1c       	cp.w	r12,1
80002f04:	cf a0       	breq	80002ef8 <usart_init_rs232+0x4c>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002f06:	0f c8       	ld.ub	r8,r7[0x4]
80002f08:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002f0c:	c2 90       	breq	80002f5e <usart_init_rs232+0xb2>
80002f0e:	6c 19       	ld.w	r9,r6[0x4]
80002f10:	20 58       	sub	r8,5
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002f12:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002f16:	8d 18       	st.w	r6[0x4],r8
80002f18:	6c 19       	ld.w	r9,r6[0x4]
80002f1a:	ef 3a 00 08 	ld.ub	r10,r7[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002f1e:	0f d8       	ld.ub	r8,r7[0x5]
80002f20:	a9 78       	lsl	r8,0x9
80002f22:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002f26:	12 48       	or	r8,r9
80002f28:	8d 18       	st.w	r6[0x4],r8
80002f2a:	30 29       	mov	r9,2
80002f2c:	8e 38       	ld.sh	r8,r7[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002f2e:	f2 08 19 00 	cp.h	r8,r9
80002f32:	e0 88 00 10 	brls	80002f52 <usart_init_rs232+0xa6>
80002f36:	6c 18       	ld.w	r8,r6[0x4]
80002f38:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002f3a:	8d 18       	st.w	r6[0x4],r8
80002f3c:	8e b8       	ld.uh	r8,r7[0x6]
80002f3e:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002f40:	8d a8       	st.w	r6[0x28],r8
80002f42:	6c 18       	ld.w	r8,r6[0x4]
80002f44:	e0 18 ff f0 	andl	r8,0xfff0
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002f48:	8d 18       	st.w	r6[0x4],r8
80002f4a:	30 0c       	mov	r12,0
80002f4c:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002f4e:	8d 08       	st.w	r6[0x0],r8
80002f50:	d8 22       	popm	r4-r7,pc
80002f52:	6c 19       	ld.w	r9,r6[0x4]
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002f54:	5c 78       	castu.h	r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002f56:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002f5a:	8d 18       	st.w	r6[0x4],r8
80002f5c:	cf 3b       	rjmp	80002f42 <usart_init_rs232+0x96>
80002f5e:	6c 18       	ld.w	r8,r6[0x4]
80002f60:	b1 b8       	sbr	r8,0x11
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002f62:	8d 18       	st.w	r6[0x4],r8
80002f64:	cd ab       	rjmp	80002f18 <usart_init_rs232+0x6c>
80002f66:	d7 03       	nop

80002f68 <usart_init_hw_handshaking>:
80002f68:	eb cd 40 80 	pushm	r7,lr
80002f6c:	18 97       	mov	r7,r12
80002f6e:	c9 ff       	rcall	80002eac <usart_init_rs232>
80002f70:	58 1c       	cp.w	r12,1
80002f72:	c0 70       	breq	80002f80 <usart_init_hw_handshaking+0x18>


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
80002f74:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002f76:	30 0c       	mov	r12,0
80002f78:	e0 18 ff f0 	andl	r8,0xfff0
80002f7c:	a1 b8       	sbr	r8,0x1
80002f7e:	8f 18       	st.w	r7[0x4],r8
80002f80:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f84 <_stext>:
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
}
80002f84:	48 dd       	lddpc	sp,80002fb8 <udata_clear_loop_end+0x4>
80002f86:	fe c0 f1 86 	sub	r0,pc,-3706
80002f8a:	e3 b0 00 01 	mtsr	0x4,r0
80002f8e:	d5 53       	csrf	0x15
80002f90:	48 b0       	lddpc	r0,80002fbc <udata_clear_loop_end+0x8>
80002f92:	48 c1       	lddpc	r1,80002fc0 <udata_clear_loop_end+0xc>
80002f94:	02 30       	cp.w	r0,r1
80002f96:	c0 62       	brcc	80002fa2 <idata_load_loop_end>
80002f98:	48 b2       	lddpc	r2,80002fc4 <udata_clear_loop_end+0x10>

80002f9a <idata_load_loop>:
80002f9a:	a5 05       	ld.d	r4,r2++
80002f9c:	a1 24       	st.d	r0++,r4
80002f9e:	02 30       	cp.w	r0,r1
80002fa0:	cf d3       	brcs	80002f9a <idata_load_loop>

80002fa2 <idata_load_loop_end>:
80002fa2:	48 a0       	lddpc	r0,80002fc8 <udata_clear_loop_end+0x14>
80002fa4:	48 a1       	lddpc	r1,80002fcc <udata_clear_loop_end+0x18>
80002fa6:	02 30       	cp.w	r0,r1
80002fa8:	c0 62       	brcc	80002fb4 <udata_clear_loop_end>
80002faa:	30 02       	mov	r2,0
80002fac:	30 03       	mov	r3,0

80002fae <udata_clear_loop>:
80002fae:	a1 22       	st.d	r0++,r2
80002fb0:	02 30       	cp.w	r0,r1
80002fb2:	cf e3       	brcs	80002fae <udata_clear_loop>

80002fb4 <udata_clear_loop_end>:
80002fb4:	fe cf f8 5c 	sub	pc,pc,-1956
80002fb8:	00 00       	add	r0,r0
80002fba:	40 00       	lddsp	r0,sp[0x0]
80002fbc:	00 00       	add	r0,r0
80002fbe:	00 04       	add	r4,r0
80002fc0:	00 00       	add	r0,r0
80002fc2:	00 30       	cp.w	r0,r0
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	41 c0       	lddsp	r0,sp[0x70]
80002fc8:	00 00       	add	r0,r0
80002fca:	00 30       	cp.w	r0,r0
80002fcc:	00 00       	add	r0,r0
80002fce:	22 f8       	sub	r8,47

80002fd0 <sysclk_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fd0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002fd4:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fd6:	ed b8 00 10 	bld	r8,0x10
80002fda:	c0 20       	breq	80002fde <sysclk_init+0xe>
      cpu_irq_enable();
80002fdc:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002fde:	5e fc       	retal	r12

80002fe0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002fe0:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fe2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002fe6:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002fe8:	fe 7a 14 00 	mov	r10,-60416
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002fec:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002fee:	32 0e       	mov	lr,32
80002ff0:	ea 1e aa 00 	orh	lr,0xaa00
80002ff4:	f8 0e 00 0e 	add	lr,r12,lr
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002ff8:	e0 2c eb e0 	sub	r12,60384
80002ffc:	78 09       	ld.w	r9,r12[0x0]
	mask |= 1U << module_index;
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80002ffe:	f5 4e 00 58 	st.w	r10[88],lr

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80003002:	30 1a       	mov	r10,1
80003004:	f4 0b 09 4b 	lsl	r11,r10,r11
80003008:	12 4b       	or	r11,r9
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000300a:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000300c:	ed b8 00 10 	bld	r8,0x10
80003010:	c0 20       	breq	80003014 <sysclk_priv_enable_module+0x34>
      cpu_irq_enable();
80003012:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80003014:	d8 02       	popm	pc
80003016:	d7 03       	nop

80003018 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003018:	eb cd 40 e0 	pushm	r5-r7,lr
8000301c:	18 96       	mov	r6,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000301e:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80003022:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80003024:	48 a7       	lddpc	r7,8000304c <sysclk_enable_pbb_module+0x34>
80003026:	0f 88       	ld.ub	r8,r7[0x0]
80003028:	58 08       	cp.w	r8,0
8000302a:	c0 c0       	breq	80003042 <sysclk_enable_pbb_module+0x2a>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
8000302c:	2f f8       	sub	r8,-1
8000302e:	ae 88       	st.b	r7[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003030:	e6 15 00 01 	andh	r5,0x1,COH
80003034:	c0 21       	brne	80003038 <sysclk_enable_pbb_module+0x20>
      cpu_irq_enable();
80003036:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003038:	30 3c       	mov	r12,3
8000303a:	0c 9b       	mov	r11,r6
8000303c:	cd 2f       	rcall	80002fe0 <sysclk_priv_enable_module>
8000303e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
}
80003042:	30 3b       	mov	r11,3
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003044:	30 1c       	mov	r12,1
80003046:	cc df       	rcall	80002fe0 <sysclk_priv_enable_module>
80003048:	0f 88       	ld.ub	r8,r7[0x0]
8000304a:	cf 1b       	rjmp	8000302c <sysclk_enable_pbb_module+0x14>
8000304c:	00 00       	add	r0,r0
8000304e:	01 34       	ld.ub	r4,r0++

80003050 <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
80003050:	d4 01       	pushm	lr
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
80003052:	58 0a       	cp.w	r10,0
80003054:	c1 e0       	breq	80003090 <spi_read_packet+0x40>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003056:	e0 6e 00 ff 	mov	lr,255
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
			if (!timeout--) {
8000305a:	e0 69 3a 98 	mov	r9,15000
8000305e:	c0 48       	rjmp	80003066 <spi_read_packet+0x16>
80003060:	58 09       	cp.w	r9,0
80003062:	c1 80       	breq	80003092 <spi_read_packet+0x42>
80003064:	20 19       	sub	r9,1
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80003066:	78 48       	ld.w	r8,r12[0x10]
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80003068:	ed b8 00 01 	bld	r8,0x1
8000306c:	cf a1       	brne	80003060 <spi_read_packet+0x10>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000306e:	99 3e       	st.w	r12[0xc],lr
80003070:	e0 69 3a 98 	mov	r9,15000
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
80003074:	c0 48       	rjmp	8000307c <spi_read_packet+0x2c>
			if (!timeout--) {
80003076:	58 09       	cp.w	r9,0
80003078:	c0 d0       	breq	80003092 <spi_read_packet+0x42>
8000307a:	20 19       	sub	r9,1
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr &
8000307c:	78 48       	ld.w	r8,r12[0x10]
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
8000307e:	e2 18 02 01 	andl	r8,0x201,COH
80003082:	e0 48 02 01 	cp.w	r8,513
80003086:	cf 81       	brne	80003076 <spi_read_packet+0x26>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80003088:	78 28       	ld.w	r8,r12[0x8]
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
		data[i] = val;
8000308a:	16 c8       	st.b	r11++,r8
		i++;
		len--;
8000308c:	20 1a       	sub	r10,1
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
8000308e:	ce 61       	brne	8000305a <spi_read_packet+0xa>
80003090:	d8 0a       	popm	pc,r12=0
80003092:	3f dc       	mov	r12,-3
80003094:	d8 02       	popm	pc
80003096:	d7 03       	nop

80003098 <ads1299_check_device_id>:
			
	return STATUS_OK;
}

status_code_t ads1299_check_device_id(uint8_t chipselect)
{
80003098:	d4 01       	pushm	lr
8000309a:	20 1d       	sub	sp,4
	uint8_t id;
		
	ads1299_rreg(chipselect, ADS1299_REGADDR_ID, &id);
8000309c:	30 0b       	mov	r11,0
8000309e:	fa ca ff fd 	sub	r10,sp,-3
800030a2:	fe b0 f8 bf 	rcall	80002220 <ads1299_rreg>
	/* ADS1299 should return ID of 0bXXXX1110 */
	if ( (id & 0xF) != ADS1299_DEVICE_ID ) {
800030a6:	1b bc       	ld.ub	r12,sp[0x3]
800030a8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
		return ERR_IO_ERROR;
	}
	else {
		return STATUS_OK;
	}
}
800030ac:	58 ec       	cp.w	r12,14
800030ae:	f9 bc 01 ff 	movne	r12,-1
800030b2:	f9 bc 00 00 	moveq	r12,0
800030b6:	2f fd       	sub	sp,-4
800030b8:	d8 02       	popm	pc
800030ba:	d7 03       	nop

800030bc <config_rn42>:
800030bc:	eb cd 40 80 	pushm	r7,lr
	sysclk_enable_peripheral_clock(USARTBT_MODULE);
	usart_init_hw_handshaking(USARTBT_MODULE, &usartbt_opt, sysclk_get_pba_hz());
}

status_code_t config_rn42(volatile avr32_usart_t* usart)
{
800030c0:	18 97       	mov	r7,r12
	
	/* Reset-cycle RN-42 Bluetooth module */
	gpio_clr_gpio_pin(BT_RESET_PIN);
800030c2:	32 bc       	mov	r12,43
800030c4:	fe b0 fa 53 	rcall	8000256a <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030cc:	f0 ca ff f4 	sub	r10,r8,-12
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030d0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030d4:	14 38       	cp.w	r8,r10
800030d6:	e0 88 00 a0 	brls	80003216 <config_rn42+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030da:	12 38       	cp.w	r8,r9
800030dc:	fe 98 ff fa 	brls	800030d0 <config_rn42+0x14>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030e0:	12 3a       	cp.w	r10,r9
800030e2:	cf 72       	brcc	800030d0 <config_rn42+0x14>
	delay_us(100);
	gpio_set_gpio_pin(BT_RESET_PIN);
800030e4:	32 bc       	mov	r12,43
800030e6:	fe b0 fa 35 	rcall	80002550 <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030ea:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030ee:	f0 ca d3 14 	sub	r10,r8,-11500
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030f2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030f6:	14 38       	cp.w	r8,r10
800030f8:	e0 88 00 0c 	brls	80003110 <config_rn42+0x54>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030fc:	12 38       	cp.w	r8,r9
800030fe:	e0 88 00 04 	brls	80003106 <config_rn42+0x4a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003102:	12 3a       	cp.w	r10,r9
80003104:	c0 93       	brcs	80003116 <config_rn42+0x5a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003106:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000310a:	14 38       	cp.w	r8,r10
8000310c:	fe 9b ff f8 	brhi	800030fc <config_rn42+0x40>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003110:	12 38       	cp.w	r8,r9
80003112:	fe 98 ff f8 	brls	80003102 <config_rn42+0x46>
	delay_ms(100);
	
	/* Configure RN-42 */
	/* Enter command mode */
	usart_write_line(usart, "$$$");
80003116:	4c 3b       	lddpc	r11,80003220 <config_rn42+0x164>
80003118:	0e 9c       	mov	r12,r7
8000311a:	c9 de       	rcall	80002e54 <usart_write_line>
8000311c:	6e 58       	ld.w	r8,r7[0x14]
8000311e:	ed b8 00 01 	bld	r8,0x1
	while(!usart_tx_ready(usart));
80003122:	cf d1       	brne	8000311c <config_rn42+0x60>
80003124:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003128:	f0 ca f9 43 	sub	r10,r8,-1725
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000312c:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003130:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003132:	e0 88 00 6e 	brls	8000320e <config_rn42+0x152>
80003136:	12 38       	cp.w	r8,r9
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003138:	fe 98 ff fa 	brls	8000312c <config_rn42+0x70>
8000313c:	12 3a       	cp.w	r10,r9
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000313e:	cf 72       	brcc	8000312c <config_rn42+0x70>
80003140:	4b 9b       	lddpc	r11,80003224 <config_rn42+0x168>
	/* Reduce window for accepting device discovery requests (inquiry) to 80 ms. Default
	 * window is 160 ms (0x0100).
	 * The 16-bit hex value is multiplied by 0.625 ms to determine the interval. The minimum is
	 * 0x0012 (11.25 ms).
	 */
	usart_write_line(usart, "SI,0080\r\n");
80003142:	0e 9c       	mov	r12,r7
80003144:	c8 8e       	rcall	80002e54 <usart_write_line>
80003146:	6e 58       	ld.w	r8,r7[0x14]
80003148:	ed b8 00 01 	bld	r8,0x1
	while(!usart_tx_ready(usart));
8000314c:	cf d1       	brne	80003146 <config_rn42+0x8a>
8000314e:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003152:	f0 ca e9 8a 	sub	r10,r8,-5750
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003156:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000315a:	14 38       	cp.w	r8,r10
8000315c:	e0 88 00 55 	brls	80003206 <config_rn42+0x14a>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003160:	12 38       	cp.w	r8,r9
80003162:	fe 98 ff fa 	brls	80003156 <config_rn42+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003166:	12 3a       	cp.w	r10,r9
80003168:	cf 72       	brcc	80003156 <config_rn42+0x9a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000316a:	4b 0b       	lddpc	r11,80003228 <config_rn42+0x16c>
8000316c:	0e 9c       	mov	r12,r7
	 * is buffered by the RN-42, so it shouldn't be lost (depending on buffer size). This saves
	 * a good amount of power.
	 * The 16-bit hex value is multiplied by 0.625 ms to determine the interval. Maximum is
	 * 0x7FFF, or about 20 s.
	 */
	usart_write_line(usart, "SW,0028\r\n");
8000316e:	c7 3e       	rcall	80002e54 <usart_write_line>
80003170:	6e 58       	ld.w	r8,r7[0x14]
80003172:	ed b8 00 01 	bld	r8,0x1
80003176:	cf d1       	brne	80003170 <config_rn42+0xb4>
	while(!usart_tx_ready(usart));
80003178:	e1 b8 00 42 	mfsr	r8,0x108
8000317c:	f0 ca e9 8a 	sub	r10,r8,-5750
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003180:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003184:	14 38       	cp.w	r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003186:	e0 88 00 3c 	brls	800031fe <config_rn42+0x142>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000318a:	12 38       	cp.w	r8,r9
8000318c:	fe 98 ff fa 	brls	80003180 <config_rn42+0xc4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003190:	12 3a       	cp.w	r10,r9
80003192:	cf 72       	brcc	80003180 <config_rn42+0xc4>
80003194:	4a 6b       	lddpc	r11,8000322c <config_rn42+0x170>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003196:	0e 9c       	mov	r12,r7
80003198:	c5 ee       	rcall	80002e54 <usart_write_line>
	 * NOTE: the S% command is stored on the flash, and GPIOs retain these settings on
	 * power cycle or reset. To make the change temporary, use S@ with the same argument.
	 * This change will be lost on a reboot, so it will need to be moved to after the next
	 * next command.
	 */
	usart_write_line(usart, "S%,2424\r\n");
8000319a:	6e 58       	ld.w	r8,r7[0x14]
8000319c:	ed b8 00 01 	bld	r8,0x1
800031a0:	cf d1       	brne	8000319a <config_rn42+0xde>
800031a2:	e1 b8 00 42 	mfsr	r8,0x108
	while(!usart_tx_ready(usart));
800031a6:	f0 ca e9 8a 	sub	r10,r8,-5750
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031aa:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031ae:	14 38       	cp.w	r8,r10
800031b0:	e0 88 00 1e 	brls	800031ec <config_rn42+0x130>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031b4:	12 38       	cp.w	r8,r9
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031b6:	fe 98 ff fa 	brls	800031aa <config_rn42+0xee>
800031ba:	12 3a       	cp.w	r10,r9
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031bc:	cf 72       	brcc	800031aa <config_rn42+0xee>
800031be:	49 db       	lddpc	r11,80003230 <config_rn42+0x174>
800031c0:	0e 9c       	mov	r12,r7
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031c2:	c4 9e       	rcall	80002e54 <usart_write_line>
800031c4:	6e 58       	ld.w	r8,r7[0x14]
	delay_ms(50);

 	/* Reboot RN-42 */
	usart_write_line(usart, "R,1\r\n");
800031c6:	ed b8 00 01 	bld	r8,0x1
800031ca:	cf d1       	brne	800031c4 <config_rn42+0x108>
800031cc:	e1 b8 00 42 	mfsr	r8,0x108
	while(!usart_tx_ready(usart));
800031d0:	f0 ca f9 43 	sub	r10,r8,-1725
800031d4:	e1 b9 00 42 	mfsr	r9,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031d8:	14 38       	cp.w	r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031da:	e0 88 00 0d 	brls	800031f4 <config_rn42+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031de:	12 38       	cp.w	r8,r9
800031e0:	fe 98 ff fa 	brls	800031d4 <config_rn42+0x118>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031e4:	12 3a       	cp.w	r10,r9
800031e6:	cf 72       	brcc	800031d4 <config_rn42+0x118>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031e8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800031ec:	12 38       	cp.w	r8,r9
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031ee:	fe 9b ff e8 	brhi	800031be <config_rn42+0x102>
	delay_ms(15);
			
	return STATUS_OK;
}
800031f2:	ce 4b       	rjmp	800031ba <config_rn42+0xfe>
800031f4:	12 38       	cp.w	r8,r9
800031f6:	fe 98 ff f7 	brls	800031e4 <config_rn42+0x128>
800031fa:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800031fe:	12 38       	cp.w	r8,r9
80003200:	fe 9b ff ca 	brhi	80003194 <config_rn42+0xd8>
80003204:	cc 6b       	rjmp	80003190 <config_rn42+0xd4>
80003206:	12 38       	cp.w	r8,r9
80003208:	fe 9b ff b1 	brhi	8000316a <config_rn42+0xae>
8000320c:	ca db       	rjmp	80003166 <config_rn42+0xaa>
8000320e:	12 38       	cp.w	r8,r9
80003210:	fe 9b ff 98 	brhi	80003140 <config_rn42+0x84>
80003214:	c9 4b       	rjmp	8000313c <config_rn42+0x80>
80003216:	12 38       	cp.w	r8,r9
80003218:	fe 9b ff 66 	brhi	800030e4 <config_rn42+0x28>
8000321c:	c6 2b       	rjmp	800030e0 <config_rn42+0x24>
8000321e:	d7 03       	nop
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	41 24       	lddsp	r4,sp[0x48]
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	41 28       	lddsp	r8,sp[0x48]
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	41 34       	lddsp	r4,sp[0x4c]
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	41 40       	lddsp	r0,sp[0x50]
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	41 4c       	lddsp	r12,sp[0x50]

80003234 <sysclk_enable_pba_module>:
80003234:	d4 01       	pushm	lr
80003236:	18 9b       	mov	r11,r12
80003238:	30 2c       	mov	r12,2
8000323a:	cd 3e       	rcall	80002fe0 <sysclk_priv_enable_module>
8000323c:	d8 02       	popm	pc
8000323e:	d7 03       	nop

80003240 <sysclk_enable_peripheral_clock>:
80003240:	d4 01       	pushm	lr
80003242:	fe 5c 38 00 	cp.w	r12,-51200
80003246:	e0 80 00 a3 	breq	8000338c <sysclk_enable_peripheral_clock+0x14c>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000324a:	e0 88 00 1c 	brls	80003282 <sysclk_enable_peripheral_clock+0x42>
8000324e:	fe 5c 54 00 	cp.w	r12,-44032
80003252:	e0 80 00 a3 	breq	80003398 <sysclk_enable_peripheral_clock+0x158>
80003256:	e0 88 00 2d 	brls	800032b0 <sysclk_enable_peripheral_clock+0x70>
8000325a:	fe 5c 64 00 	cp.w	r12,-39936
8000325e:	e0 80 00 8b 	breq	80003374 <sysclk_enable_peripheral_clock+0x134>
80003262:	e0 8b 00 59 	brhi	80003314 <sysclk_enable_peripheral_clock+0xd4>
80003266:	fe 5c 5c 00 	cp.w	r12,-41984
8000326a:	e0 80 00 82 	breq	8000336e <sysclk_enable_peripheral_clock+0x12e>
8000326e:	fe 5c 60 00 	cp.w	r12,-40960
80003272:	e0 80 00 ae 	breq	800033ce <sysclk_enable_peripheral_clock+0x18e>
80003276:	fe 5c 58 00 	cp.w	r12,-43008
8000327a:	c2 61       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
		case AVR32_PWMA_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PWMA);
			break;

		case AVR32_TC0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC0);
8000327c:	31 3c       	mov	r12,19
8000327e:	cd bf       	rcall	80003234 <sysclk_enable_pba_module>
80003280:	d8 02       	popm	pc
			break;
80003282:	fe 5c 18 00 	cp.w	r12,-59392
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003286:	e0 80 00 86 	breq	80003392 <sysclk_enable_peripheral_clock+0x152>
8000328a:	e0 88 00 1f 	brls	800032c8 <sysclk_enable_peripheral_clock+0x88>
8000328e:	fe 5c 28 00 	cp.w	r12,-55296
80003292:	c6 b0       	breq	80003368 <sysclk_enable_peripheral_clock+0x128>
80003294:	e0 8b 00 34 	brhi	800032fc <sysclk_enable_peripheral_clock+0xbc>
80003298:	fe 5c 20 00 	cp.w	r12,-57344
8000329c:	c6 30       	breq	80003362 <sysclk_enable_peripheral_clock+0x122>
8000329e:	fe 5c 24 00 	cp.w	r12,-56320
800032a2:	c5 d0       	breq	8000335c <sysclk_enable_peripheral_clock+0x11c>
800032a4:	fe 5c 1c 00 	cp.w	r12,-58368
800032a8:	c0 f1       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
800032aa:	30 4c       	mov	r12,4
		case AVR32_SCIF_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SCIF);
			break;

		case AVR32_AST_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_AST);
800032ac:	cc 4f       	rcall	80003234 <sysclk_enable_pba_module>
800032ae:	d8 02       	popm	pc
800032b0:	fe 5c 44 00 	cp.w	r12,-48128
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800032b4:	c6 90       	breq	80003386 <sysclk_enable_peripheral_clock+0x146>
800032b6:	e0 8b 00 17 	brhi	800032e4 <sysclk_enable_peripheral_clock+0xa4>
800032ba:	fe 5c 3c 00 	cp.w	r12,-50176
800032be:	c6 10       	breq	80003380 <sysclk_enable_peripheral_clock+0x140>
800032c0:	fe 5c 40 00 	cp.w	r12,-49152
800032c4:	c5 b0       	breq	8000337a <sysclk_enable_peripheral_clock+0x13a>
800032c6:	d8 02       	popm	pc
800032c8:	fe 4c 08 00 	cp.w	r12,-129024
800032cc:	c7 b0       	breq	800033c2 <sysclk_enable_peripheral_clock+0x182>
800032ce:	e0 8b 00 2f 	brhi	8000332c <sysclk_enable_peripheral_clock+0xec>
800032d2:	fe 4c 00 00 	cp.w	r12,-131072
800032d6:	c7 00       	breq	800033b6 <sysclk_enable_peripheral_clock+0x176>
800032d8:	fe 4c 04 00 	cp.w	r12,-130048
800032dc:	cf 51       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
800032de:	30 1c       	mov	r12,1
800032e0:	c9 ce       	rcall	80003018 <sysclk_enable_pbb_module>
800032e2:	d8 02       	popm	pc
800032e4:	fe 5c 4c 00 	cp.w	r12,-46080
			sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
			sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
			break;
#endif
		case AVR32_HMATRIXB_ADDRESS:
			sysclk_enable_pbb_module(SYSCLK_HMATRIX);
800032e8:	c3 40       	breq	80003350 <sysclk_enable_peripheral_clock+0x110>
800032ea:	fe 5c 50 00 	cp.w	r12,-45056
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800032ee:	c2 e0       	breq	8000334a <sysclk_enable_peripheral_clock+0x10a>
800032f0:	fe 5c 48 00 	cp.w	r12,-47104
800032f4:	ce 91       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
800032f6:	30 fc       	mov	r12,15
800032f8:	c9 ef       	rcall	80003234 <sysclk_enable_pba_module>
800032fa:	d8 02       	popm	pc
800032fc:	fe 5c 30 00 	cp.w	r12,-53248
		case AVR32_TWIM0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM0);
			break;

		case AVR32_TWIM1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM1);
80003300:	c2 b0       	breq	80003356 <sysclk_enable_peripheral_clock+0x116>
80003302:	fe 5c 34 00 	cp.w	r12,-52224
			break;
80003306:	c4 f0       	breq	800033a4 <sysclk_enable_peripheral_clock+0x164>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003308:	fe 5c 2c 00 	cp.w	r12,-54272
8000330c:	cd d1       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
8000330e:	30 8c       	mov	r12,8
80003310:	c9 2f       	rcall	80003234 <sysclk_enable_pba_module>
80003312:	d8 02       	popm	pc
80003314:	fe 5c 6c 00 	cp.w	r12,-37888
80003318:	c4 c0       	breq	800033b0 <sysclk_enable_peripheral_clock+0x170>
		case AVR32_FREQM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_FREQM);
			break;

		case AVR32_GPIO_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GPIO);
8000331a:	fe 5c 70 00 	cp.w	r12,-36864
8000331e:	c4 60       	breq	800033aa <sysclk_enable_peripheral_clock+0x16a>
			break;
80003320:	fe 5c 68 00 	cp.w	r12,-38912
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003324:	cd 11       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
80003326:	31 7c       	mov	r12,23
80003328:	c8 6f       	rcall	80003234 <sysclk_enable_pba_module>
8000332a:	d8 02       	popm	pc
8000332c:	fe 5c 10 00 	cp.w	r12,-61440
80003330:	c3 70       	breq	8000339e <sysclk_enable_peripheral_clock+0x15e>
80003332:	fe 5c 14 00 	cp.w	r12,-60416
		case AVR32_ACIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ACIFB);
			break;

		case AVR32_CAT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_CAT);
80003336:	c4 f0       	breq	800033d4 <sysclk_enable_peripheral_clock+0x194>
80003338:	fe 5c 00 00 	cp.w	r12,-65536
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000333c:	cc 51       	brne	800032c6 <sysclk_enable_peripheral_clock+0x86>
8000333e:	30 0b       	mov	r11,0
80003340:	30 1c       	mov	r12,1
80003342:	c4 fe       	rcall	80002fe0 <sysclk_priv_enable_module>
80003344:	30 0c       	mov	r12,0
80003346:	c7 7f       	rcall	80003234 <sysclk_enable_pba_module>
80003348:	d8 02       	popm	pc
8000334a:	31 1c       	mov	r12,17
8000334c:	c7 4f       	rcall	80003234 <sysclk_enable_pba_module>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000334e:	d8 02       	popm	pc
80003350:	31 0c       	mov	r12,16
80003352:	c7 1f       	rcall	80003234 <sysclk_enable_pba_module>
80003354:	d8 02       	popm	pc
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
		case AVR32_PDCA_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
			sysclk_enable_pba_module(SYSCLK_PDCA_PB);
80003356:	30 9c       	mov	r12,9
80003358:	c6 ef       	rcall	80003234 <sysclk_enable_pba_module>
8000335a:	d8 02       	popm	pc
			break;
8000335c:	30 6c       	mov	r12,6
		case AVR32_TWIS0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS0);
			break;

		case AVR32_TWIS1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS1);
8000335e:	c6 bf       	rcall	80003234 <sysclk_enable_pba_module>
80003360:	d8 02       	popm	pc
80003362:	30 5c       	mov	r12,5
			break;
80003364:	c6 8f       	rcall	80003234 <sysclk_enable_pba_module>
		case AVR32_TWIM1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM1);
			break;

		case AVR32_TWIS0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS0);
80003366:	d8 02       	popm	pc
80003368:	30 7c       	mov	r12,7
8000336a:	c6 5f       	rcall	80003234 <sysclk_enable_pba_module>
			break;
8000336c:	d8 02       	popm	pc
		case AVR32_GPIO_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GPIO);
			break;

		case AVR32_USART0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART0);
8000336e:	31 4c       	mov	r12,20
80003370:	c6 2f       	rcall	80003234 <sysclk_enable_pba_module>
80003372:	d8 02       	popm	pc
			break;
80003374:	31 6c       	mov	r12,22
		case AVR32_WDT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_WDT);
			break;

		case AVR32_EIC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_EIC);
80003376:	c5 ff       	rcall	80003234 <sysclk_enable_pba_module>
80003378:	d8 02       	popm	pc
8000337a:	30 dc       	mov	r12,13
			break;
8000337c:	c5 cf       	rcall	80003234 <sysclk_enable_pba_module>
		case AVR32_AST_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_AST);
			break;

		case AVR32_WDT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_WDT);
8000337e:	d8 02       	popm	pc
80003380:	30 cc       	mov	r12,12
80003382:	c5 9f       	rcall	80003234 <sysclk_enable_pba_module>
			break;
80003384:	d8 02       	popm	pc
		case AVR32_EIC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_EIC);
			break;

		case AVR32_FREQM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_FREQM);
80003386:	30 ec       	mov	r12,14
80003388:	c5 6f       	rcall	80003234 <sysclk_enable_pba_module>
8000338a:	d8 02       	popm	pc
			break;
8000338c:	30 bc       	mov	r12,11
		case AVR32_TC0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC0);
			break;

		case AVR32_TC1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC1);
8000338e:	c5 3f       	rcall	80003234 <sysclk_enable_pba_module>
80003390:	d8 02       	popm	pc
80003392:	30 3c       	mov	r12,3
			break;
80003394:	c5 0f       	rcall	80003234 <sysclk_enable_pba_module>
		case AVR32_ADCIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ADCIFB);
			break;

		case AVR32_ACIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ACIFB);
80003396:	d8 02       	popm	pc
80003398:	31 2c       	mov	r12,18
8000339a:	c4 df       	rcall	80003234 <sysclk_enable_pba_module>
			break;
8000339c:	d8 02       	popm	pc
		case AVR32_USART3_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART3);
			break;

		case AVR32_SPI_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SPI);
8000339e:	30 1c       	mov	r12,1
800033a0:	c4 af       	rcall	80003234 <sysclk_enable_pba_module>
800033a2:	d8 02       	popm	pc
			break;
800033a4:	30 ac       	mov	r12,10
		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
			break;

		case AVR32_USART3_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART3);
800033a6:	c4 7f       	rcall	80003234 <sysclk_enable_pba_module>
800033a8:	d8 02       	popm	pc
800033aa:	31 9c       	mov	r12,25
			break;
800033ac:	c4 4f       	rcall	80003234 <sysclk_enable_pba_module>
		case AVR32_SPI_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SPI);
			break;

		case AVR32_TWIM0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM0);
800033ae:	d8 02       	popm	pc
800033b0:	31 8c       	mov	r12,24
800033b2:	c4 1f       	rcall	80003234 <sysclk_enable_pba_module>
			break;
800033b4:	d8 02       	popm	pc
		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
			break;

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
800033b6:	30 1b       	mov	r11,1
800033b8:	16 9c       	mov	r12,r11
800033ba:	c1 3e       	rcall	80002fe0 <sysclk_priv_enable_module>
			break;
800033bc:	30 0c       	mov	r12,0
		case AVR32_PM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PM);
			break;

		case AVR32_SCIF_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SCIF);
800033be:	c2 de       	rcall	80003018 <sysclk_enable_pbb_module>
800033c0:	d8 02       	popm	pc
800033c2:	30 1c       	mov	r12,1
			break;
800033c4:	30 2b       	mov	r11,2
		case AVR32_TWIS1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS1);
			break;

		case AVR32_PWMA_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PWMA);
800033c6:	c0 de       	rcall	80002fe0 <sysclk_priv_enable_module>
800033c8:	30 2c       	mov	r12,2
800033ca:	c2 7e       	rcall	80003018 <sysclk_enable_pbb_module>
			break;
800033cc:	c7 db       	rjmp	800032c6 <sysclk_enable_peripheral_clock+0x86>
			sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
			sysclk_enable_pba_module(SYSCLK_PDCA_PB);
			break;

		case AVR32_INTC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_INTC);
800033ce:	31 5c       	mov	r12,21
800033d0:	c3 2f       	rcall	80003234 <sysclk_enable_pba_module>
800033d2:	d8 02       	popm	pc
			break;
800033d4:	30 2c       	mov	r12,2
		case AVR32_USART0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART0);
			break;

		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
800033d6:	c2 ff       	rcall	80003234 <sysclk_enable_pba_module>
800033d8:	d8 02       	popm	pc
800033da:	d7 03       	nop

800033dc <config_usart>:
			break;
800033dc:	eb cd 40 80 	pushm	r7,lr
		case AVR32_GLOC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GLOC);
			break;

		case AVR32_AW_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_AW);
800033e0:	20 3d       	sub	sp,12
800033e2:	48 b8       	lddpc	r8,8000340c <config_usart+0x30>
			break;
800033e4:	70 29       	ld.w	r9,r8[0x8]
		case AVR32_CAT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_CAT);
			break;

		case AVR32_GLOC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GLOC);
800033e6:	50 29       	stdsp	sp[0x8],r9
800033e8:	f0 e8 00 00 	ld.d	r8,r8[0]
			break;
800033ec:	1a 97       	mov	r7,sp
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800033ee:	fa e9 00 00 	st.d	sp[0],r8
800033f2:	fe 7c 3c 00 	mov	r12,-50176
			sysclk_enable_pba_module(SYSCLK_AW);
			break;

		case AVR32_FLASHCDW_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_FLASHCDW_DATA);
			sysclk_enable_pbb_module(SYSCLK_FLASHCDW_REGS);
800033f6:	c2 5f       	rcall	80003240 <sysclk_enable_peripheral_clock>
800033f8:	1a 9b       	mov	r11,sp
800033fa:	e0 7a c1 38 	mov	r10,115000
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800033fe:	fe 7c 3c 00 	mov	r12,-50176
80003402:	fe b0 fd b3 	rcall	80002f68 <usart_init_hw_handshaking>
			sysclk_enable_pbb_module(SYSCLK_HMATRIX);
			break;

		case AVR32_SAU_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_SAU_HSB);
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
80003406:	2f dd       	sub	sp,-12
80003408:	e3 cd 80 80 	ldm	sp++,r7,pc
8000340c:	80 00       	ld.sh	r0,r0[0x0]
		case AVR32_TC1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC1);
			break;

		case AVR32_ADCIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ADCIFB);
8000340e:	41 18       	lddsp	r8,sp[0x44]

80003410 <config_twim>:
80003410:	d4 01       	pushm	lr
80003412:	20 4d       	sub	sp,16
			break;
80003414:	e0 78 c1 38 	mov	r8,115000
		case AVR32_INTC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_INTC);
			break;

		case AVR32_PM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PM);
80003418:	50 08       	stdsp	sp[0x0],r8
8000341a:	e6 68 1a 80 	mov	r8,400000
			break;
8000341e:	50 18       	stdsp	sp[0x4],r8
80003420:	36 88       	mov	r8,104
80003422:	50 28       	stdsp	sp[0x8],r8
80003424:	30 08       	mov	r8,0
80003426:	fe 7c 44 00 	mov	r12,-48128
8000342a:	fb 68 00 0c 	st.b	sp[12],r8
		.chip	= MPU6050_DEFAULT_ADDRESS,
		.pba_hz = sysclk_get_pba_hz(),
		.smbus	= false 
	};
	
	sysclk_enable_peripheral_clock(I2C_MODULE);			
8000342e:	c0 9f       	rcall	80003240 <sysclk_enable_peripheral_clock>
80003430:	1a 9b       	mov	r11,sp
	return twim_master_init(I2C_MODULE, (const twim_options_t *)&twim_opt);
80003432:	fe 7c 44 00 	mov	r12,-48128
80003436:	fe b0 fc 81 	rcall	80002d38 <twim_master_init>
8000343a:	2f cd       	sub	sp,-16
}
8000343c:	d8 02       	popm	pc
8000343e:	d7 03       	nop

80003440 <config_gpios>:
80003440:	d4 01       	pushm	lr
80003442:	32 5c       	mov	r12,37
80003444:	fe b0 f8 26 	rcall	80002490 <gpio_enable_gpio_pin>
	/* Config GPIOs for I2C/TWI comms with inertial measurement unit */
	/* First we apparently have to assign the default TWIM pins as something so that we can
	 * use different ones. Stupid. Tore my hair out before I got this one...
	 */
	gpio_enable_gpio_pin(AVR32_PIN_PB05);												// Default TWIMS0 TWCK
	gpio_enable_gpio_pin(AVR32_PIN_PA21);												// Default TWIMS0 TWD
80003448:	31 5c       	mov	r12,21
8000344a:	fe b0 f8 23 	rcall	80002490 <gpio_enable_gpio_pin>
	gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);	// PA04
8000344e:	30 1b       	mov	r11,1
80003450:	30 4c       	mov	r12,4
80003452:	fe b0 f7 d1 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_2_PIN, AVR32_TWIMS0_TWD_0_2_FUNCTION);	// PA05
80003456:	30 6b       	mov	r11,6
80003458:	30 5c       	mov	r12,5
8000345a:	fe b0 f7 cd 	rcall	800023f4 <gpio_enable_module_pin>
	
	/* MPU6050 interrupt pin: polled at each ADS1299 DRDY */
	gpio_enable_gpio_pin(MPU6050_INT_PIN);												// PA10
8000345e:	30 7c       	mov	r12,7
80003460:	fe b0 f8 18 	rcall	80002490 <gpio_enable_gpio_pin>
	gpio_configure_pin(MPU6050_INT_PIN, GPIO_DIR_INPUT);
80003464:	30 0b       	mov	r11,0
80003466:	30 7c       	mov	r12,7
80003468:	fe b0 f8 29 	rcall	800024ba <gpio_configure_pin>
	#endif
	
	/* Config GPIOs for USART2 (wired data) */
	gpio_enable_module_pin(AVR32_USART2_TXD_0_1_PIN, AVR32_USART2_TXD_0_1_FUNCTION);	// PA06
8000346c:	30 1b       	mov	r11,1
8000346e:	30 6c       	mov	r12,6
80003470:	fe b0 f7 c2 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_pin_pull_up(AVR32_USART2_TXD_0_1_PIN);
80003474:	30 6c       	mov	r12,6
80003476:	fe b0 f8 18 	rcall	800024a6 <gpio_enable_pin_pull_up>
	gpio_enable_module_pin(AVR32_USART2_RXD_0_1_PIN, AVR32_USART2_RXD_0_1_FUNCTION);	// PA07
8000347a:	30 1b       	mov	r11,1
8000347c:	30 7c       	mov	r12,7
8000347e:	fe b0 f7 bb 	rcall	800023f4 <gpio_enable_module_pin>

	/* Config GPIOs for USART3 (RN-42 Bluetooth data) */
	gpio_enable_module_pin(AVR32_USART3_TXD_0_1_PIN, AVR32_USART3_TXD_0_1_FUNCTION);	// PB06
80003482:	30 1b       	mov	r11,1
80003484:	32 6c       	mov	r12,38
80003486:	fe b0 f7 b7 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_pin_pull_up(AVR32_USART3_TXD_0_1_PIN);
8000348a:	32 6c       	mov	r12,38
8000348c:	fe b0 f8 0d 	rcall	800024a6 <gpio_enable_pin_pull_up>
	gpio_enable_module_pin(AVR32_USART3_RXD_0_1_PIN, AVR32_USART3_RXD_0_1_FUNCTION);	// PB07
80003490:	30 1b       	mov	r11,1
80003492:	32 7c       	mov	r12,39
80003494:	fe b0 f7 b0 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_USART3_RTS_0_1_PIN, AVR32_USART3_RTS_0_1_FUNCTION);	// PB08
80003498:	30 1b       	mov	r11,1
8000349a:	32 8c       	mov	r12,40
8000349c:	fe b0 f7 ac 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_USART3_CTS_0_1_PIN, AVR32_USART3_CTS_0_1_FUNCTION);	// PB09
800034a0:	30 1b       	mov	r11,1
800034a2:	32 9c       	mov	r12,41
800034a4:	fe b0 f7 a8 	rcall	800023f4 <gpio_enable_module_pin>
	
	/* Config GPIOs for SPI */
	gpio_enable_module_pin(AVR32_SPI_MISO_0_1_PIN, AVR32_SPI_MISO_0_1_FUNCTION);		// PB02
800034a8:	30 2b       	mov	r11,2
800034aa:	32 2c       	mov	r12,34
800034ac:	fe b0 f7 a4 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_MOSI_0_1_PIN, AVR32_SPI_MOSI_0_1_FUNCTION);		// PB03
800034b0:	30 2b       	mov	r11,2
800034b2:	32 3c       	mov	r12,35
800034b4:	fe b0 f7 a0 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_SCK_0_1_PIN, AVR32_SPI_SCK_0_1_FUNCTION);			// PB01
800034b8:	30 2b       	mov	r11,2
800034ba:	32 1c       	mov	r12,33
800034bc:	fe b0 f7 9c 	rcall	800023f4 <gpio_enable_module_pin>
	gpio_enable_module_pin(AVR32_SPI_NPCS_0_1_PIN, AVR32_SPI_NPCS_0_1_FUNCTION);		// PB00
800034c0:	30 2b       	mov	r11,2
800034c2:	32 0c       	mov	r12,32
800034c4:	fe b0 f7 98 	rcall	800023f4 <gpio_enable_module_pin>
	
	/* RN-42 hardware reset pin */
	gpio_enable_gpio_pin(BT_RESET_PIN);													// PB11
800034c8:	32 bc       	mov	r12,43
800034ca:	fe b0 f7 e3 	rcall	80002490 <gpio_enable_gpio_pin>
	gpio_configure_pin(BT_RESET_PIN, GPIO_DIR_OUTPUT);
800034ce:	30 1b       	mov	r11,1
800034d0:	32 bc       	mov	r12,43
800034d2:	fe b0 f7 f4 	rcall	800024ba <gpio_configure_pin>
	gpio_enable_gpio_pin(ADS1299_PIN_START);											// PA17	
	gpio_configure_pin(ADS1299_PIN_START, GPIO_DIR_OUTPUT);
	gpio_enable_gpio_pin(ADS1299_PIN_RESET);											// PB04
	gpio_configure_pin(ADS1299_PIN_RESET, GPIO_DIR_OUTPUT);
	#endif
	gpio_enable_gpio_pin(ADS1299_PIN_PWDN);												// PA09
800034d6:	30 9c       	mov	r12,9
800034d8:	fe b0 f7 dc 	rcall	80002490 <gpio_enable_gpio_pin>
	gpio_configure_pin(ADS1299_PIN_PWDN, GPIO_DIR_OUTPUT);
800034dc:	30 1b       	mov	r11,1
800034de:	30 9c       	mov	r12,9
800034e0:	fe b0 f7 ed 	rcall	800024ba <gpio_configure_pin>
	/* ADS1299 DRDY interrupt pin */	
	gpio_enable_module_pin(ADS1299_PIN_DRDY, ADS1299_DRDY_INT_FN);						// PA18
800034e4:	30 6b       	mov	r11,6
800034e6:	31 2c       	mov	r12,18
800034e8:	fe b0 f7 86 	rcall	800023f4 <gpio_enable_module_pin>
}
800034ec:	d8 02       	popm	pc
800034ee:	d7 03       	nop

800034f0 <config_spi>:
800034f0:	eb cd 40 80 	pushm	r7,lr
800034f4:	20 4d       	sub	sp,16
800034f6:	48 f8       	lddpc	r8,80003530 <config_spi+0x40>
800034f8:	70 39       	ld.w	r9,r8[0xc]
800034fa:	50 39       	stdsp	sp[0xc],r9
800034fc:	70 09       	ld.w	r9,r8[0x0]
800034fe:	50 09       	stdsp	sp[0x0],r9
		.spck_delay		= 0,							// Delay before first clock pulse after selecting slave (in PBA clock periods)
		.trans_delay	= 0,							// Delay between each transfer/character (in PBA clock periods)
		.stay_act		= true,							// Sets this chip to stay active after last transfer to it
		.spi_mode		= SPI_MODE_1,					// Which SPI mode to use (ADS1299 is mode 1)
		.modfdis		= true							// Disable the mode fault detection
	};
80003500:	70 19       	ld.w	r9,r8[0x4]
80003502:	50 19       	stdsp	sp[0x4],r9
80003504:	70 28       	ld.w	r8,r8[0x8]
80003506:	1a 97       	mov	r7,sp
80003508:	50 28       	stdsp	sp[0x8],r8
	
	/* Init SPI module as master */
	spi_initMaster(SPI_ADDRESS, &spi_opt);
8000350a:	1a 9b       	mov	r11,sp
8000350c:	fe 7c 40 00 	mov	r12,-49152
80003510:	fe b0 f9 6e 	rcall	800027ec <spi_initMaster>
	
	/* Setup configuration for chip connected to CS0 */
	spi_setupChipReg(SPI_ADDRESS, &spi_opt, sysclk_get_pba_hz());
80003514:	1a 9b       	mov	r11,sp
80003516:	e0 7a c1 38 	mov	r10,115000
8000351a:	fe 7c 40 00 	mov	r12,-49152
8000351e:	fe b0 f9 c1 	rcall	800028a0 <spi_setupChipReg>
	
	/* Allow the module to transfer data */
	spi_enable(SPI_ADDRESS);
80003522:	fe 7c 40 00 	mov	r12,-49152
80003526:	fe b0 fa 13 	rcall	8000294c <spi_enable>
}
8000352a:	2f cd       	sub	sp,-16
8000352c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	41 b0       	lddsp	r0,sp[0x6c]

80003534 <config_eic>:
80003534:	eb cd 40 80 	pushm	r7,lr
80003538:	20 2d       	sub	sp,8
8000353a:	fa c8 ff fc 	sub	r8,sp,-4
8000353e:	30 09       	mov	r9,0
		.eic_mode    = EIC_MODE_EDGE_TRIGGERED,
		.eic_level   = EIC_EDGE_FALLING_EDGE,
		.eic_filter  = EIC_FILTER_DISABLED,
		.eic_async   = EIC_ASYNCH_MODE,
		.eic_line    = ADS1299_DRDY_INT
	};
80003540:	b0 09       	st.h	r8[0x0],r9
80003542:	fa c8 ff fa 	sub	r8,sp,-6
80003546:	fa c7 ff fe 	sub	r7,sp,-2
8000354a:	b0 09       	st.h	r8[0x0],r9
8000354c:	ae 09       	st.h	r7[0x0],r9
8000354e:	30 58       	mov	r8,5
80003550:	ba a8       	st.b	sp[0x2],r8
80003552:	30 18       	mov	r8,1
80003554:	ba f8       	st.b	sp[0x7],r8
	
	bool global_irq_enabled = cpu_irq_is_enabled();
80003556:	e1 ba 00 00 	mfsr	r10,0x0
	if (global_irq_enabled) {
8000355a:	e6 1a 00 01 	andh	r10,0x1,COH
8000355e:	c1 b0       	breq	80003594 <config_eic+0x60>
		Disable_global_interrupt();
	}
	
	/* Register external DRDY interrupt */
	INTC_register_interrupt((__int_handler)&eic_handler, ADS1299_DRDY_IRQ, AVR32_INTC_INT0);
80003560:	30 0a       	mov	r10,0
80003562:	e0 6b 01 80 	mov	r11,384
80003566:	fe cc ff 9a 	sub	r12,pc,-102
8000356a:	fe b0 f8 0f 	rcall	80002588 <INTC_register_interrupt>
	eic_init(&AVR32_EIC, &eic_drdy_opt, 1);
8000356e:	0e 9b       	mov	r11,r7
80003570:	30 1a       	mov	r10,1
80003572:	fe 7c 24 00 	mov	r12,-56320
80003576:	fe b0 f6 ab 	rcall	800022cc <eic_init>
	eic_enable_line(&AVR32_EIC, eic_drdy_opt.eic_line);
8000357a:	1b ab       	ld.ub	r11,sp[0x2]
8000357c:	fe 7c 24 00 	mov	r12,-56320
80003580:	fe b0 f7 22 	rcall	800023c4 <eic_enable_line>
	eic_enable_interrupt_line(&AVR32_EIC, eic_drdy_opt.eic_line);
80003584:	1b ab       	ld.ub	r11,sp[0x2]
80003586:	fe 7c 24 00 	mov	r12,-56320
8000358a:	fe b0 f7 22 	rcall	800023ce <eic_enable_interrupt_line>
	
	if (global_irq_enabled) {
		Enable_global_interrupt();
	}
}
8000358e:	2f ed       	sub	sp,-8
80003590:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (global_irq_enabled) {
		Disable_global_interrupt();
	}
	
	/* Register external DRDY interrupt */
	INTC_register_interrupt((__int_handler)&eic_handler, ADS1299_DRDY_IRQ, AVR32_INTC_INT0);
80003594:	d3 03       	ssrf	0x10
80003596:	e0 6b 01 80 	mov	r11,384
8000359a:	fe cc ff ce 	sub	r12,pc,-50
	eic_init(&AVR32_EIC, &eic_drdy_opt, 1);
8000359e:	fe b0 f7 f5 	rcall	80002588 <INTC_register_interrupt>
800035a2:	30 1a       	mov	r10,1
800035a4:	0e 9b       	mov	r11,r7
800035a6:	fe 7c 24 00 	mov	r12,-56320
	eic_enable_line(&AVR32_EIC, eic_drdy_opt.eic_line);
800035aa:	fe b0 f6 91 	rcall	800022cc <eic_init>
800035ae:	1b ab       	ld.ub	r11,sp[0x2]
800035b0:	fe 7c 24 00 	mov	r12,-56320
	eic_enable_interrupt_line(&AVR32_EIC, eic_drdy_opt.eic_line);
800035b4:	fe b0 f7 08 	rcall	800023c4 <eic_enable_line>
800035b8:	1b ab       	ld.ub	r11,sp[0x2]
800035ba:	fe 7c 24 00 	mov	r12,-56320
	
	if (global_irq_enabled) {
		Enable_global_interrupt();
800035be:	fe b0 f7 08 	rcall	800023ce <eic_enable_interrupt_line>
	}
}
800035c2:	d5 03       	csrf	0x10
800035c4:	2f ed       	sub	sp,-8
800035c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800035ca:	d7 03       	nop

800035cc <eic_handler>:
800035cc:	eb cd 40 80 	pushm	r7,lr
800035d0:	d3 03       	ssrf	0x10
800035d2:	fe 7c 24 00 	mov	r12,-56320
800035d6:	30 5b       	mov	r11,5
800035d8:	fe b0 f7 00 	rcall	800023d8 <eic_clear_interrupt_line>
__attribute__((__interrupt__)) static void eic_handler(void)
{	
	Disable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, ADS1299_DRDY_INT);
	
	if (processing_type == DATA_STREAM)
800035dc:	4a 28       	lddpc	r8,80003664 <eic_handler+0x98>
800035de:	70 0c       	ld.w	r12,r8[0x0]
800035e0:	58 0c       	cp.w	r12,0
800035e2:	c1 31       	brne	80003608 <eic_handler+0x3c>
	/* If we're in data stream mode, there is no intermediate buffering, so write directly to USART TX packet */
	{
		/* Read back 24-bit status word and 8 channels of 24-bit data */
		ads1299_rdata24_packet(SPI_ADS1299_MAIN_CHIPNUM, usart_tx_buffer_idx, &data_usart_tx_packet);
800035e4:	4a 17       	lddpc	r7,80003668 <eic_handler+0x9c>
800035e6:	4a 2a       	lddpc	r10,8000366c <eic_handler+0xa0>
800035e8:	6e 0b       	ld.w	r11,r7[0x0]
800035ea:	fe b0 f5 81 	rcall	800020ec <ads1299_rdata24_packet>
		if (gpio_get_pin_value(MPU6050_INT_PIN))
800035ee:	30 7c       	mov	r12,7
800035f0:	fe b0 f7 a5 	rcall	8000253a <gpio_get_pin_value>
800035f4:	c2 b1       	brne	8000364a <eic_handler+0x7e>
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
		}
		if (++usart_tx_buffer_idx == DATA_USART_TX_BUFFER_SIZE)
800035f6:	6e 08       	ld.w	r8,r7[0x0]
800035f8:	2f f8       	sub	r8,-1
800035fa:	8f 08       	st.w	r7[0x0],r8
800035fc:	6e 08       	ld.w	r8,r7[0x0]
800035fe:	58 18       	cp.w	r8,1
80003600:	c2 b0       	breq	80003656 <eic_handler+0x8a>
		if (spi_buf_write_idx % FRAME_SIZE == 0)
		{
			frame_complete_flag = 1;
		}
	}	
}
80003602:	e3 cd 40 80 	ldm	sp++,r7,lr
80003606:	d6 03       	rete
	}
	else
	/* We have to pre-buffer the data for processing */
	{
		/* Read back 24-bit status word and 8 channels of 24-bit data; store in 32-bit ints */
		ads1299_rdata32_generic(SPI_ADS1299_MAIN_CHIPNUM, spi_buf_write_idx, spi_rx_ads1299_status, spi_rx_data_buffer);			
80003608:	49 a8       	lddpc	r8,80003670 <eic_handler+0xa4>
8000360a:	49 b7       	lddpc	r7,80003674 <eic_handler+0xa8>
8000360c:	70 0a       	ld.w	r10,r8[0x0]
8000360e:	49 b9       	lddpc	r9,80003678 <eic_handler+0xac>
80003610:	6e 0b       	ld.w	r11,r7[0x0]
80003612:	30 0c       	mov	r12,0
80003614:	fe b0 f4 f8 	rcall	80002004 <ads1299_rdata32_generic>
		if (gpio_get_pin_value(MPU6050_INT_PIN))
80003618:	30 7c       	mov	r12,7
8000361a:	fe b0 f7 90 	rcall	8000253a <gpio_get_pin_value>
8000361e:	c0 f1       	brne	8000363c <eic_handler+0x70>
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
		}			
		spi_buf_write_idx = (spi_buf_write_idx+1) % DSP_PREBUFFER_NB_SAMPLES;			
80003620:	6e 08       	ld.w	r8,r7[0x0]
80003622:	2f f8       	sub	r8,-1
80003624:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003628:	8f 09       	st.w	r7[0x0],r9
		if (spi_buf_write_idx % FRAME_SIZE == 0)
8000362a:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000362e:	ce a1       	brne	80003602 <eic_handler+0x36>
		{
			frame_complete_flag = 1;
80003630:	30 19       	mov	r9,1
80003632:	49 38       	lddpc	r8,8000367c <eic_handler+0xb0>
80003634:	91 09       	st.w	r8[0x0],r9
		}
	}	
}
80003636:	e3 cd 40 80 	ldm	sp++,r7,lr
8000363a:	d6 03       	rete
		/* Read back 24-bit status word and 8 channels of 24-bit data; store in 32-bit ints */
		ads1299_rdata32_generic(SPI_ADS1299_MAIN_CHIPNUM, spi_buf_write_idx, spi_rx_ads1299_status, spi_rx_data_buffer);			
		if (gpio_get_pin_value(MPU6050_INT_PIN))
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
8000363c:	48 b8       	lddpc	r8,80003668 <eic_handler+0x9c>
8000363e:	48 ca       	lddpc	r10,8000366c <eic_handler+0xa0>
80003640:	70 0b       	ld.w	r11,r8[0x0]
80003642:	36 8c       	mov	r12,104
80003644:	e0 a0 02 22 	rcall	80003a88 <mpu6050_rdata16_packet>
80003648:	ce cb       	rjmp	80003620 <eic_handler+0x54>
		/* Read back 24-bit status word and 8 channels of 24-bit data */
		ads1299_rdata24_packet(SPI_ADS1299_MAIN_CHIPNUM, usart_tx_buffer_idx, &data_usart_tx_packet);
		if (gpio_get_pin_value(MPU6050_INT_PIN))
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
8000364a:	6e 0b       	ld.w	r11,r7[0x0]
8000364c:	48 8a       	lddpc	r10,8000366c <eic_handler+0xa0>
8000364e:	36 8c       	mov	r12,104
80003650:	e0 a0 02 1c 	rcall	80003a88 <mpu6050_rdata16_packet>
80003654:	cd 1b       	rjmp	800035f6 <eic_handler+0x2a>
		}
		if (++usart_tx_buffer_idx == DATA_USART_TX_BUFFER_SIZE)
		{
			usart_tx_buffer_idx = 0;
80003656:	48 58       	lddpc	r8,80003668 <eic_handler+0x9c>
80003658:	30 0c       	mov	r12,0
8000365a:	91 0c       	st.w	r8[0x0],r12
			pdca_enable(DATA_USART_TX_PDCA_CHANNEL);
8000365c:	fe b0 f8 27 	rcall	800026aa <pdca_enable>
80003660:	cd 1b       	rjmp	80003602 <eic_handler+0x36>
80003662:	d7 03       	nop
80003664:	00 00       	add	r0,r0
80003666:	21 cc       	sub	r12,28
80003668:	00 00       	add	r0,r0
8000366a:	21 d8       	sub	r8,29
8000366c:	00 00       	add	r0,r0
8000366e:	00 04       	add	r4,r0
80003670:	00 00       	add	r0,r0
80003672:	01 40       	ld.w	r0,--r0
80003674:	00 00       	add	r0,r0
80003676:	21 d0       	sub	r0,29
80003678:	00 00       	add	r0,r0
8000367a:	01 48       	ld.w	r8,--r0
8000367c:	00 00       	add	r0,r0
8000367e:	22 dc       	sub	r12,45

80003680 <config_dma>:
80003680:	d4 21       	pushm	r4-r7,lr
80003682:	20 ed       	sub	sp,56
80003684:	30 08       	mov	r8,0
80003686:	30 09       	mov	r9,0
80003688:	fa c5 ff e4 	sub	r5,sp,-28
8000368c:	fa e9 00 10 	st.d	sp[16],r8
80003690:	fa e9 00 2c 	st.d	sp[44],r8
80003694:	fa e9 00 24 	st.d	sp[36],r8
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.addr			= (void *)data_usart_rx_dma_buffer,
		.size			= 3,
		.r_addr			= NULL,
		.r_size			= 0
	};
80003698:	fa e9 00 08 	st.d	sp[8],r8
	{
		.pid			= DATA_USART_TX_PDCA_PID,
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.r_addr			= NULL,
		.r_size			= 0
	};
8000369c:	ea e9 00 00 	st.d	r5[0],r8
800036a0:	30 f8       	mov	r8,15
800036a2:	30 07       	mov	r7,0
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.addr			= (void *)data_usart_rx_dma_buffer,
		.size			= 3,
		.r_addr			= NULL,
		.r_size			= 0
	};
800036a4:	30 34       	mov	r4,3
	{
		.pid			= DATA_USART_TX_PDCA_PID,
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.r_addr			= NULL,
		.r_size			= 0
	};
800036a6:	50 b8       	stdsp	sp[0x2c],r8
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.addr			= (void *)data_usart_rx_dma_buffer,
		.size			= 3,
		.r_addr			= NULL,
		.r_size			= 0
	};
800036a8:	50 14       	stdsp	sp[0x4],r4
800036aa:	4a a8       	lddpc	r8,80003750 <config_dma+0xd0>
800036ac:	50 44       	stdsp	sp[0x10],r4
	{
		.pid			= DATA_USART_TX_PDCA_PID,
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.r_addr			= NULL,
		.r_size			= 0
	};
800036ae:	50 d7       	stdsp	sp[0x34],r7
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.addr			= (void *)data_usart_rx_dma_buffer,
		.size			= 3,
		.r_addr			= NULL,
		.r_size			= 0
	};
800036b0:	50 67       	stdsp	sp[0x18],r7
800036b2:	50 08       	stdsp	sp[0x0],r8
800036b4:	1a 9b       	mov	r11,sp
	
	bool global_irq_enabled = cpu_irq_is_enabled();
800036b6:	e1 b6 00 00 	mfsr	r6,0x0
	if (global_irq_enabled) {
800036ba:	e6 16 00 01 	andh	r6,0x1,COH
800036be:	c2 40       	breq	80003706 <config_dma+0x86>
		Disable_global_interrupt();
	}
	
	/* Init PDCA and register corresponding interrupts */
	/* USART3 receipt */
	pdca_init_channel(DATA_USART_RX_PDCA_CHANNEL, &pdca_data_usart_rx_opt);
800036c0:	1a 9b       	mov	r11,sp
800036c2:	30 1c       	mov	r12,1
800036c4:	fe b0 f8 54 	rcall	8000276c <pdca_init_channel>
	INTC_register_interrupt((__int_handler)&pdca_data_usart_rx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_RX_PDCA_CHANNEL, AVR32_INTC_INT3);
800036c8:	08 9a       	mov	r10,r4
800036ca:	e0 6b 00 81 	mov	r11,129
800036ce:	fe cc fd 16 	sub	r12,pc,-746
800036d2:	fe b0 f7 5b 	rcall	80002588 <INTC_register_interrupt>
	pdca_enable_interrupt_transfer_complete(DATA_USART_RX_PDCA_CHANNEL);
800036d6:	30 1c       	mov	r12,1
800036d8:	fe b0 f7 f8 	rcall	800026c8 <pdca_enable_interrupt_transfer_complete>
	
	/* USART3 transmission */
	pdca_init_channel(DATA_USART_TX_PDCA_CHANNEL, &pdca_data_usart_tx_opt);
800036dc:	0a 9b       	mov	r11,r5
800036de:	0e 9c       	mov	r12,r7
800036e0:	fe b0 f8 46 	rcall	8000276c <pdca_init_channel>
	INTC_register_interrupt((__int_handler)&pdca_data_usart_tx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_TX_PDCA_CHANNEL, AVR32_INTC_INT2);
800036e4:	30 2a       	mov	r10,2
800036e6:	e0 6b 00 80 	mov	r11,128
800036ea:	fe cc fd 7a 	sub	r12,pc,-646
	pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&data_usart_tx_packet, sizeof(data_usart_tx_packet));
800036ee:	fe b0 f7 4d 	rcall	80002588 <INTC_register_interrupt>
800036f2:	0e 9c       	mov	r12,r7
800036f4:	32 aa       	mov	r10,42
800036f6:	49 8b       	lddpc	r11,80003754 <config_dma+0xd4>
	pdca_enable_interrupt_transfer_complete(DATA_USART_TX_PDCA_CHANNEL);	
800036f8:	fe b0 f8 21 	rcall	8000273a <pdca_load_channel>
800036fc:	0e 9c       	mov	r12,r7
	
	if (global_irq_enabled) {
		/* Enable all interrupts */
		Enable_global_interrupt();
	}
}
800036fe:	fe b0 f7 e5 	rcall	800026c8 <pdca_enable_interrupt_transfer_complete>
	};
	
	bool global_irq_enabled = cpu_irq_is_enabled();
	if (global_irq_enabled) {
		/* Turn off interrupts while we set stuff up */
		Disable_global_interrupt();
80003702:	2f 2d       	sub	sp,-56
	}
	
	/* Init PDCA and register corresponding interrupts */
	/* USART3 receipt */
	pdca_init_channel(DATA_USART_RX_PDCA_CHANNEL, &pdca_data_usart_rx_opt);
80003704:	d8 22       	popm	r4-r7,pc
80003706:	d3 03       	ssrf	0x10
80003708:	30 1c       	mov	r12,1
	INTC_register_interrupt((__int_handler)&pdca_data_usart_rx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_RX_PDCA_CHANNEL, AVR32_INTC_INT3);
8000370a:	fe b0 f8 31 	rcall	8000276c <pdca_init_channel>
8000370e:	08 9a       	mov	r10,r4
80003710:	e0 6b 00 81 	mov	r11,129
80003714:	fe cc fd 5c 	sub	r12,pc,-676
	pdca_enable_interrupt_transfer_complete(DATA_USART_RX_PDCA_CHANNEL);
80003718:	fe b0 f7 38 	rcall	80002588 <INTC_register_interrupt>
	
	/* USART3 transmission */
	pdca_init_channel(DATA_USART_TX_PDCA_CHANNEL, &pdca_data_usart_tx_opt);
8000371c:	30 1c       	mov	r12,1
8000371e:	fe b0 f7 d5 	rcall	800026c8 <pdca_enable_interrupt_transfer_complete>
80003722:	0a 9b       	mov	r11,r5
	INTC_register_interrupt((__int_handler)&pdca_data_usart_tx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_TX_PDCA_CHANNEL, AVR32_INTC_INT2);
80003724:	0c 9c       	mov	r12,r6
80003726:	fe b0 f8 23 	rcall	8000276c <pdca_init_channel>
8000372a:	30 2a       	mov	r10,2
8000372c:	e0 6b 00 80 	mov	r11,128
	pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&data_usart_tx_packet, sizeof(data_usart_tx_packet));
80003730:	fe cc fd c0 	sub	r12,pc,-576
80003734:	fe b0 f7 2a 	rcall	80002588 <INTC_register_interrupt>
80003738:	32 aa       	mov	r10,42
	pdca_enable_interrupt_transfer_complete(DATA_USART_TX_PDCA_CHANNEL);	
8000373a:	48 7b       	lddpc	r11,80003754 <config_dma+0xd4>
8000373c:	0c 9c       	mov	r12,r6
8000373e:	fe b0 f7 fe 	rcall	8000273a <pdca_load_channel>
	
	if (global_irq_enabled) {
		/* Enable all interrupts */
		Enable_global_interrupt();
	}
}
80003742:	0c 9c       	mov	r12,r6
80003744:	fe b0 f7 c2 	rcall	800026c8 <pdca_enable_interrupt_transfer_complete>
80003748:	d5 03       	csrf	0x10
8000374a:	2f 2d       	sub	sp,-56
8000374c:	d8 22       	popm	r4-r7,pc
8000374e:	d7 03       	nop
80003750:	00 00       	add	r0,r0
80003752:	21 d4       	sub	r4,29
80003754:	00 00       	add	r0,r0
80003756:	00 04       	add	r4,r0

80003758 <main>:
80003758:	d4 21       	pushm	r4-r7,lr
8000375a:	20 3d       	sub	sp,12
8000375c:	4f 88       	lddpc	r8,8000393c <main+0x1e4>
8000375e:	30 07       	mov	r7,0
80003760:	91 07       	st.w	r8[0x0],r7
80003762:	4f 88       	lddpc	r8,80003940 <main+0x1e8>
80003764:	91 07       	st.w	r8[0x0],r7
80003766:	4f 88       	lddpc	r8,80003944 <main+0x1ec>
	volatile uint32_t k, n, m;

	usart_tx_buffer_idx = 0;
	spi_buf_write_idx = 0;
	spi_buf_read_idx = 0;
	mu_band_avg = 0;
80003768:	91 07       	st.w	r8[0x0],r7
	
	frame_complete_flag = 0;
	
	/* Initialize in data streaming mode; host computer may change later */
	processing_type = DATA_STREAM;
8000376a:	4f 88       	lddpc	r8,80003948 <main+0x1f0>
{	
	volatile uint32_t k, n, m;

	usart_tx_buffer_idx = 0;
	spi_buf_write_idx = 0;
	spi_buf_read_idx = 0;
8000376c:	4f 85       	lddpc	r5,8000394c <main+0x1f4>
	mu_band_avg = 0;
	
	frame_complete_flag = 0;
	
	/* Initialize in data streaming mode; host computer may change later */
	processing_type = DATA_STREAM;
8000376e:	91 07       	st.w	r8[0x0],r7
{	
	volatile uint32_t k, n, m;

	usart_tx_buffer_idx = 0;
	spi_buf_write_idx = 0;
	spi_buf_read_idx = 0;
80003770:	8b 07       	st.w	r5[0x0],r7
	mu_band_avg = 0;
	
	frame_complete_flag = 0;
80003772:	4f 86       	lddpc	r6,80003950 <main+0x1f8>
80003774:	8d 07       	st.w	r6[0x0],r7
	
	/* Initialize in data streaming mode; host computer may change later */
	processing_type = DATA_STREAM;
	
	/* Set up basic functions: clocks, GPIOs, sleep settings */
	sysclk_init();
80003776:	fe b0 fc 2d 	rcall	80002fd0 <sysclk_init>
8000377a:	4f 78       	lddpc	r8,80003954 <main+0x1fc>
8000377c:	10 99       	mov	r9,r8
	else {
		return STATUS_OK;
	}
}

int main(void)
8000377e:	f0 ca ff f9 	sub	r10,r8,-7
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
80003782:	12 c7       	st.b	r9++,r7
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
80003784:	14 39       	cp.w	r9,r10
80003786:	cf e1       	brne	80003782 <main+0x2a>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
80003788:	30 19       	mov	r9,1
8000378a:	b0 f9       	st.b	r8[0x7],r9
	processing_type = DATA_STREAM;
	
	/* Set up basic functions: clocks, GPIOs, sleep settings */
	sysclk_init();
	sleepmgr_init();
	config_gpios();
8000378c:	c5 ae       	rcall	80003440 <config_gpios>
8000378e:	30 0a       	mov	r10,0
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
80003790:	4f 29       	lddpc	r9,80003958 <main+0x200>
80003792:	50 0a       	stdsp	sp[0x0],r10
80003794:	14 9b       	mov	r11,r10
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
			data_usart_tx_packet.eegdata[n][m][0] = 0;
			data_usart_tx_packet.eegdata[n][m][1] = 0;
			data_usart_tx_packet.eegdata[n][m][2] = 0;
		}
		for (n = 0; n < MAX_IMU_DOF; n++) {
80003796:	40 08       	lddsp	r8,sp[0x0]
	sysclk_init();
	sleepmgr_init();
	config_gpios();
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
80003798:	58 08       	cp.w	r8,0
8000379a:	c2 80       	breq	800037ea <main+0x92>
8000379c:	c4 98       	rjmp	8000382e <main+0xd6>
8000379e:	40 18       	lddsp	r8,sp[0x4]
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
			data_usart_tx_packet.eegdata[n][m][0] = 0;
800037a0:	f0 08 00 1c 	add	r12,r8,r8<<0x1
800037a4:	40 08       	lddsp	r8,sp[0x0]
800037a6:	f0 08 00 18 	add	r8,r8,r8<<0x1
800037aa:	f0 0c 00 38 	add	r8,r8,r12<<0x3
800037ae:	f2 08 00 08 	add	r8,r9,r8
800037b2:	2f a8       	sub	r8,-6
800037b4:	b0 8a       	st.b	r8[0x0],r10
800037b6:	40 18       	lddsp	r8,sp[0x4]
			data_usart_tx_packet.eegdata[n][m][1] = 0;
800037b8:	f0 08 00 1c 	add	r12,r8,r8<<0x1
800037bc:	40 08       	lddsp	r8,sp[0x0]
800037be:	f0 08 00 18 	add	r8,r8,r8<<0x1
800037c2:	f0 0c 00 38 	add	r8,r8,r12<<0x3
800037c6:	f2 08 00 08 	add	r8,r9,r8
800037ca:	2f 98       	sub	r8,-7
800037cc:	b0 8a       	st.b	r8[0x0],r10
800037ce:	40 18       	lddsp	r8,sp[0x4]
			data_usart_tx_packet.eegdata[n][m][2] = 0;
800037d0:	f0 08 00 1c 	add	r12,r8,r8<<0x1
800037d4:	40 08       	lddsp	r8,sp[0x0]
800037d6:	f0 08 00 18 	add	r8,r8,r8<<0x1
800037da:	f0 0c 00 38 	add	r8,r8,r12<<0x3
800037de:	f2 08 00 08 	add	r8,r9,r8
800037e2:	2f 88       	sub	r8,-8
800037e4:	b0 8a       	st.b	r8[0x0],r10
800037e6:	40 18       	lddsp	r8,sp[0x4]
	sleepmgr_init();
	config_gpios();
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
800037e8:	2f f8       	sub	r8,-1
800037ea:	50 18       	stdsp	sp[0x4],r8
800037ec:	40 18       	lddsp	r8,sp[0x4]
800037ee:	58 78       	cp.w	r8,7
800037f0:	fe 98 ff d7 	brls	8000379e <main+0x46>
800037f4:	50 1b       	stdsp	sp[0x4],r11
			data_usart_tx_packet.eegdata[n][m][0] = 0;
			data_usart_tx_packet.eegdata[n][m][1] = 0;
			data_usart_tx_packet.eegdata[n][m][2] = 0;
		}
		for (n = 0; n < MAX_IMU_DOF; n++) {
800037f6:	40 18       	lddsp	r8,sp[0x4]
800037f8:	58 58       	cp.w	r8,5
800037fa:	e0 8b 00 16 	brhi	80003826 <main+0xce>
800037fe:	40 18       	lddsp	r8,sp[0x4]
			data_usart_tx_packet.imudata[n][m] = 0;
80003800:	40 0c       	lddsp	r12,sp[0x0]
80003802:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003806:	f8 08 00 18 	add	r8,r12,r8<<0x1
8000380a:	2f 28       	sub	r8,-14
8000380c:	f2 08 00 18 	add	r8,r9,r8<<0x1
80003810:	11 ac       	ld.ub	r12,r8[0x2]
80003812:	b0 ab       	st.b	r8[0x2],r11
80003814:	11 bc       	ld.ub	r12,r8[0x3]
80003816:	b0 bb       	st.b	r8[0x3],r11
80003818:	40 18       	lddsp	r8,sp[0x4]
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
			data_usart_tx_packet.eegdata[n][m][0] = 0;
			data_usart_tx_packet.eegdata[n][m][1] = 0;
			data_usart_tx_packet.eegdata[n][m][2] = 0;
		}
		for (n = 0; n < MAX_IMU_DOF; n++) {
8000381a:	2f f8       	sub	r8,-1
8000381c:	50 18       	stdsp	sp[0x4],r8
8000381e:	40 18       	lddsp	r8,sp[0x4]
80003820:	58 58       	cp.w	r8,5
80003822:	fe 98 ff ee 	brls	800037fe <main+0xa6>
80003826:	40 08       	lddsp	r8,sp[0x0]
	sysclk_init();
	sleepmgr_init();
	config_gpios();
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
80003828:	2f f8       	sub	r8,-1
8000382a:	50 08       	stdsp	sp[0x0],r8
8000382c:	cb 5b       	rjmp	80003796 <main+0x3e>
8000382e:	30 08       	mov	r8,0
			data_usart_tx_packet.imudata[n][m] = 0;
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
80003830:	4c b7       	lddpc	r7,8000395c <main+0x204>
80003832:	50 08       	stdsp	sp[0x0],r8
80003834:	40 09       	lddsp	r9,sp[0x0]
80003836:	e0 49 00 ff 	cp.w	r9,255
8000383a:	e0 8b 00 18 	brhi	8000386a <main+0x112>
8000383e:	50 18       	stdsp	sp[0x4],r8
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80003840:	40 19       	lddsp	r9,sp[0x4]
80003842:	58 79       	cp.w	r9,7
80003844:	e0 8b 00 0f 	brhi	80003862 <main+0x10a>
80003848:	40 0a       	lddsp	r10,sp[0x0]
			spi_rx_data_buffer[m][n] = 0;
8000384a:	40 19       	lddsp	r9,sp[0x4]
8000384c:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80003850:	ee 09 09 28 	st.w	r7[r9<<0x2],r8
80003854:	40 19       	lddsp	r9,sp[0x4]
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80003856:	2f f9       	sub	r9,-1
80003858:	50 19       	stdsp	sp[0x4],r9
8000385a:	40 19       	lddsp	r9,sp[0x4]
8000385c:	58 79       	cp.w	r9,7
8000385e:	fe 98 ff f5 	brls	80003848 <main+0xf0>
80003862:	40 09       	lddsp	r9,sp[0x0]
			data_usart_tx_packet.imudata[n][m] = 0;
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
80003864:	2f f9       	sub	r9,-1
80003866:	50 09       	stdsp	sp[0x0],r9
80003868:	ce 6b       	rjmp	80003834 <main+0xdc>
8000386a:	fe b0 fd b9 	rcall	800033dc <config_usart>
			spi_rx_data_buffer[m][n] = 0;
		}
	}
	
	/* Set up peripheral modules other than TWI, which needs INTC first */
	config_usart();
8000386e:	fe 7c 3c 00 	mov	r12,-50176
	config_rn42(USARTBT_MODULE);	
80003872:	fe b0 fc 25 	rcall	800030bc <config_rn42>
80003876:	c3 de       	rcall	800034f0 <config_spi>
	config_spi();	
80003878:	fe 7c 3c 00 	mov	r12,-50176
		
	/* Verify ADS1299 device ID */
	usart_write_line(AUX_USART, "Checking ADS1299 device ID...\r\n");
8000387c:	4b 9b       	lddpc	r11,80003960 <main+0x208>
8000387e:	fe b0 fa eb 	rcall	80002e54 <usart_write_line>
80003882:	30 0c       	mov	r12,0
80003884:	fe b0 fc 0a 	rcall	80003098 <ads1299_check_device_id>
	if (ads1299_check_device_id(SPI_ADS1299_MAIN_CHIPNUM) == STATUS_OK) {
80003888:	c1 21       	brne	800038ac <main+0x154>
8000388a:	4b 7b       	lddpc	r11,80003964 <main+0x20c>
8000388c:	fe 7c 3c 00 	mov	r12,-50176
		usart_write_line(AUX_USART, "Device ID verified.\r\n");
80003890:	fe b0 fa e2 	rcall	80002e54 <usart_write_line>
80003894:	d3 03       	ssrf	0x10
80003896:	fe b0 f6 bb 	rcall	8000260c <INTC_init_interrupts>
		while(1) { cpu_relax(); }
	}
	
	/* Configure global interrupt controller */
	Disable_global_interrupt();
	INTC_init_interrupts();
8000389a:	fe b0 fd bb 	rcall	80003410 <config_twim>
	
	#if (BRAINBOARD_REV > 0)
	/* Init TWI */
	config_twim();
8000389e:	36 8c       	mov	r12,104
800038a0:	c7 4d       	rcall	80003b88 <mpu6050_initialize_normal>
	
	/* Initialize the MPU6050 IMU */
	//usart_write_line(AUX_USART, "Initializing IMU...\r\n");
	if (mpu6050_initialize_normal(MPU6050_DEFAULT_ADDRESS) == STATUS_OK) {
800038a2:	18 94       	mov	r4,r12
800038a4:	c0 c0       	breq	800038bc <main+0x164>
800038a6:	fe cf ff fc 	sub	pc,pc,-4
800038aa:	cf eb       	rjmp	800038a6 <main+0x14e>
		//usart_write_line(AUX_USART, "IMU successfully initialized.\r\n");
	}
	else {
		//usart_write_line(AUX_USART, "IMU failed to initialize.\r\n");
		while (1) { cpu_relax(); }
800038ac:	4a fb       	lddpc	r11,80003968 <main+0x210>
800038ae:	fe 7c 3c 00 	mov	r12,-50176
	usart_write_line(AUX_USART, "Checking ADS1299 device ID...\r\n");
	if (ads1299_check_device_id(SPI_ADS1299_MAIN_CHIPNUM) == STATUS_OK) {
		usart_write_line(AUX_USART, "Device ID verified.\r\n");
	}
	else {
		usart_write_line(AUX_USART, "Invalid ID. Possible SPI error.\r\n");
800038b2:	fe b0 fa d1 	rcall	80002e54 <usart_write_line>
800038b6:	fe cf ff fc 	sub	pc,pc,-4
800038ba:	cf eb       	rjmp	800038b6 <main+0x15e>
		while(1) { cpu_relax(); }
800038bc:	c3 ce       	rcall	80003534 <config_eic>
800038be:	ce 1e       	rcall	80003680 <config_dma>
800038c0:	d5 03       	csrf	0x10
		while (1) { cpu_relax(); }
	}
	#endif
	
	/* Configure DRDY interrupt */
	config_eic();
800038c2:	30 1c       	mov	r12,1
800038c4:	fe b0 f6 f3 	rcall	800026aa <pdca_enable>
	
	/* Set up DMA for SPI/USART communications */
	config_dma();
800038c8:	4a 9b       	lddpc	r11,8000396c <main+0x214>
	
	Enable_global_interrupt();
800038ca:	fe 7e 10 00 	mov	lr,-61440
	
	/* Enable receipt of USART commands */
	pdca_enable(DATA_USART_RX_PDCA_CHANNEL);
800038ce:	6c 08       	ld.w	r8,r6[0x0]
800038d0:	58 08       	cp.w	r8,0
800038d2:	c0 71       	brne	800038e0 <main+0x188>
			
		}
		else 
		{
			/* Go to IDLE and wait for DRDY interrupt */
			AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
800038d4:	7c 08       	ld.w	r8,lr[0x0]
800038d6:	e9 b0 00 00 	sleep	0x0
// 	ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, ADS1299_OPC_RDATAC);			
// 	ads1299_soft_start_conversion(SPI_ADS1299_MAIN_CHIPNUM);
	
	while(1)
	{
		if (frame_complete_flag) 
800038da:	6c 08       	ld.w	r8,r6[0x0]
800038dc:	58 08       	cp.w	r8,0
			
		}
		else 
		{
			/* Go to IDLE and wait for DRDY interrupt */
			AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
800038de:	cf b0       	breq	800038d4 <main+0x17c>
			SLEEP(AVR32_PM_SMODE_IDLE);
800038e0:	d3 03       	ssrf	0x10
800038e2:	50 14       	stdsp	sp[0x4],r4
// 	ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, ADS1299_OPC_RDATAC);			
// 	ads1299_soft_start_conversion(SPI_ADS1299_MAIN_CHIPNUM);
	
	while(1)
	{
		if (frame_complete_flag) 
800038e4:	40 18       	lddsp	r8,sp[0x4]
800038e6:	58 78       	cp.w	r8,7
800038e8:	e0 8b 00 27 	brhi	80003936 <main+0x1de>
		{
			Disable_global_interrupt();
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
800038ec:	6a 0c       	ld.w	r12,r5[0x0]
800038ee:	50 2c       	stdsp	sp[0x8],r12
800038f0:	50 04       	stdsp	sp[0x0],r4
800038f2:	40 08       	lddsp	r8,sp[0x0]
800038f4:	e0 48 00 7f 	cp.w	r8,127
			{
				k = spi_buf_read_idx;
800038f8:	e0 8b 00 18 	brhi	80003928 <main+0x1d0>
				for (m = 0; m < FRAME_SIZE; m++)
800038fc:	40 08       	lddsp	r8,sp[0x0]
800038fe:	40 2a       	lddsp	r10,sp[0x8]
80003900:	40 19       	lddsp	r9,sp[0x4]
80003902:	f2 0a 00 39 	add	r9,r9,r10<<0x3
					 * It's possible we could increase the dynamic range by eliminating 
					 * some of the lower bits through right-shifting before the cast, but 
					 * this should be sufficient for well-conditioned EEG electrodes.
					 */
					
					dsp_filter_input_buffer[m] = (dsp16_t) (spi_rx_data_buffer[k][n]);
80003906:	ee 09 03 29 	ld.w	r9,r7[r9<<0x2]
8000390a:	40 2a       	lddsp	r10,sp[0x8]
8000390c:	2f fa       	sub	r10,-1
8000390e:	f5 da c0 08 	bfextu	r10,r10,0x0,0x8
80003912:	50 2a       	stdsp	sp[0x8],r10
					k = (k+1) % DSP_PREBUFFER_NB_SAMPLES;
80003914:	f6 08 0a 19 	st.h	r11[r8<<0x1],r9
80003918:	40 08       	lddsp	r8,sp[0x0]
8000391a:	2f f8       	sub	r8,-1
8000391c:	50 08       	stdsp	sp[0x0],r8
					 * It's possible we could increase the dynamic range by eliminating 
					 * some of the lower bits through right-shifting before the cast, but 
					 * this should be sufficient for well-conditioned EEG electrodes.
					 */
					
					dsp_filter_input_buffer[m] = (dsp16_t) (spi_rx_data_buffer[k][n]);
8000391e:	40 08       	lddsp	r8,sp[0x0]
80003920:	e0 48 00 7f 	cp.w	r8,127
			Disable_global_interrupt();
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
			{
				k = spi_buf_read_idx;
				for (m = 0; m < FRAME_SIZE; m++)
80003924:	fe 98 ff ec 	brls	800038fc <main+0x1a4>
80003928:	40 18       	lddsp	r8,sp[0x4]
8000392a:	2f f8       	sub	r8,-1
8000392c:	50 18       	stdsp	sp[0x4],r8
8000392e:	40 18       	lddsp	r8,sp[0x4]
80003930:	58 78       	cp.w	r8,7
	{
		if (frame_complete_flag) 
		{
			Disable_global_interrupt();
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
80003932:	fe 98 ff de 	brls	800038ee <main+0x196>
80003936:	40 28       	lddsp	r8,sp[0x8]
80003938:	8b 08       	st.w	r5[0x0],r8
8000393a:	cc ab       	rjmp	800038ce <main+0x176>
8000393c:	00 00       	add	r0,r0
8000393e:	21 d8       	sub	r8,29
				}
				
				/* Execute filter and/or other operations */

			}
			spi_buf_read_idx = k;
80003940:	00 00       	add	r0,r0
80003942:	21 d0       	sub	r0,29
80003944:	00 00       	add	r0,r0
80003946:	21 48       	sub	r8,20
80003948:	00 00       	add	r0,r0
8000394a:	21 cc       	sub	r12,28
8000394c:	00 00       	add	r0,r0
8000394e:	01 44       	ld.w	r4,--r0
80003950:	00 00       	add	r0,r0
80003952:	22 dc       	sub	r12,45
80003954:	00 00       	add	r0,r0
80003956:	01 38       	ld.ub	r8,r0++
80003958:	00 00       	add	r0,r0
8000395a:	00 04       	add	r4,r0
8000395c:	00 00       	add	r0,r0
8000395e:	01 48       	ld.w	r8,--r0
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	41 54       	lddsp	r4,sp[0x54]
80003964:	80 00       	ld.sh	r0,r0[0x0]
80003966:	41 74       	lddsp	r4,sp[0x5c]
80003968:	80 00       	ld.sh	r0,r0[0x0]
8000396a:	41 8c       	lddsp	r12,sp[0x60]
8000396c:	00 00       	add	r0,r0
8000396e:	21 dc       	sub	r12,29

80003970 <pdca_data_usart_tx_handler>:
80003970:	eb cd 40 80 	pushm	r7,lr
80003974:	30 0c       	mov	r12,0
80003976:	fe b0 f6 8b 	rcall	8000268c <pdca_disable>
8000397a:	48 d8       	lddpc	r8,800039ac <pdca_data_usart_tx_handler+0x3c>
8000397c:	70 0c       	ld.w	r12,r8[0x0]
8000397e:	58 0c       	cp.w	r12,0
80003980:	c0 90       	breq	80003992 <pdca_data_usart_tx_handler+0x22>
80003982:	30 4a       	mov	r10,4
80003984:	48 bb       	lddpc	r11,800039b0 <pdca_data_usart_tx_handler+0x40>
80003986:	30 0c       	mov	r12,0
80003988:	fe b0 f6 d9 	rcall	8000273a <pdca_load_channel>
8000398c:	e3 cd 40 80 	ldm	sp++,r7,lr
80003990:	d6 03       	rete
80003992:	48 97       	lddpc	r7,800039b4 <pdca_data_usart_tx_handler+0x44>
80003994:	32 aa       	mov	r10,42
80003996:	0e 9b       	mov	r11,r7
80003998:	fe b0 f6 d1 	rcall	8000273a <pdca_load_channel>
8000399c:	0f a8       	ld.ub	r8,r7[0x2]
8000399e:	2f f8       	sub	r8,-1
800039a0:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
800039a4:	ae a8       	st.b	r7[0x2],r8
800039a6:	e3 cd 40 80 	ldm	sp++,r7,lr
800039aa:	d6 03       	rete
800039ac:	00 00       	add	r0,r0
800039ae:	21 cc       	sub	r12,28
	}
	else
	{
		pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&mu_band_avg, sizeof(mu_band_avg));
	}
}
800039b0:	00 00       	add	r0,r0
800039b2:	21 48       	sub	r8,20
800039b4:	00 00       	add	r0,r0
800039b6:	00 04       	add	r4,r0

800039b8 <pdca_data_usart_rx_handler>:
800039b8:	eb cd 40 c0 	pushm	r6-r7,lr
800039bc:	20 1d       	sub	sp,4
800039be:	d3 03       	ssrf	0x10
{
	uint8_t readback;
	
	Disable_global_interrupt();
	
	DATA_USART->cr = AVR32_USART_CR_RTSDIS_MASK;
800039c0:	e8 68 00 00 	mov	r8,524288
800039c4:	fe 76 3c 00 	mov	r6,-50176
	
	/* Code would go here to parse command switching between data streaming and frequency band extraction
	 * modes. Make sure value of this command is not included in set of ADS1299 commands.
	 */
	
	switch (data_usart_rx_dma_buffer[0] & 0xE0)
800039c8:	4a e7       	lddpc	r7,80003a80 <pdca_data_usart_rx_handler+0xc8>
{
	uint8_t readback;
	
	Disable_global_interrupt();
	
	DATA_USART->cr = AVR32_USART_CR_RTSDIS_MASK;
800039ca:	8d 08       	st.w	r6[0x0],r8
	
	/* Code would go here to parse command switching between data streaming and frequency band extraction
	 * modes. Make sure value of this command is not included in set of ADS1299 commands.
	 */
	
	switch (data_usart_rx_dma_buffer[0] & 0xE0)
800039cc:	0f 88       	ld.ub	r8,r7[0x0]
800039ce:	e2 18 00 e0 	andl	r8,0xe0,COH
800039d2:	e0 48 00 20 	cp.w	r8,32
800039d6:	c4 40       	breq	80003a5e <pdca_data_usart_rx_handler+0xa6>
800039d8:	e0 48 00 40 	cp.w	r8,64
800039dc:	c2 e0       	breq	80003a38 <pdca_data_usart_rx_handler+0x80>
			ads1299_rreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, &readback);
			usart_putchar(DATA_USART, (int)readback);
			while(!usart_tx_empty(DATA_USART));
			break;
		default:
			ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0]);
800039de:	0f 86       	ld.ub	r6,r7[0x0]
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte(uint8_t chip_select, uint8_t opcode)
{
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
800039e0:	30 0b       	mov	r11,0
800039e2:	fe 7c 40 00 	mov	r12,-49152
800039e6:	fe b0 f7 22 	rcall	8000282a <spi_selectChip>
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800039ea:	fe 7a 40 00 	mov	r10,-49152
800039ee:	74 48       	ld.w	r8,r10[0x10]
800039f0:	fe 79 40 00 	mov	r9,-49152
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
	while(!spi_is_tx_ready(SPI_ADDRESS));
800039f4:	e2 18 00 02 	andl	r8,0x2,COH
800039f8:	cf b0       	breq	800039ee <pdca_data_usart_rx_handler+0x36>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800039fa:	5c 76       	castu.h	r6
800039fc:	93 36       	st.w	r9[0xc],r6
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800039fe:	72 48       	ld.w	r8,r9[0x10]
	spi_put(SPI_ADDRESS, opcode);
	while(!spi_is_tx_empty(SPI_ADDRESS));
80003a00:	ed b8 00 09 	bld	r8,0x9
80003a04:	cf d1       	brne	800039fe <pdca_data_usart_rx_handler+0x46>
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
	
	ads1299_send_byte_no_cs(opcode);
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80003a06:	30 0b       	mov	r11,0
80003a08:	fe 7c 40 00 	mov	r12,-49152
80003a0c:	fe b0 f7 37 	rcall	8000287a <spi_unselectChip>
			break;
	}
	if (data_usart_rx_dma_buffer[0] == ADS1299_OPC_STOP)
80003a10:	0f 89       	ld.ub	r9,r7[0x0]
80003a12:	30 a8       	mov	r8,10
80003a14:	f0 09 18 00 	cp.b	r9,r8
80003a18:	c1 c0       	breq	80003a50 <pdca_data_usart_rx_handler+0x98>
	{
		usart_tx_buffer_idx = 0;
		pdca_disable(DATA_USART_TX_PDCA_CHANNEL);
	}
	pdca_load_channel(DATA_USART_RX_PDCA_CHANNEL, (void *)data_usart_rx_dma_buffer, 3);
80003a1a:	30 3a       	mov	r10,3
80003a1c:	49 9b       	lddpc	r11,80003a80 <pdca_data_usart_rx_handler+0xc8>
80003a1e:	30 1c       	mov	r12,1
80003a20:	fe b0 f6 8d 	rcall	8000273a <pdca_load_channel>
	DATA_USART->cr = AVR32_USART_CR_RTSEN_MASK;
80003a24:	e4 69 00 00 	mov	r9,262144
80003a28:	fe 78 3c 00 	mov	r8,-50176
80003a2c:	91 09       	st.w	r8[0x0],r9
	
	Enable_global_interrupt();
80003a2e:	d5 03       	csrf	0x10
}
80003a30:	2f fd       	sub	sp,-4
80003a32:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80003a36:	d6 03       	rete
	 */
	
	switch (data_usart_rx_dma_buffer[0] & 0xE0)
	{
		case 0x40:	// WREG
			ads1299_wreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, data_usart_rx_dma_buffer[2]);
80003a38:	0f aa       	ld.ub	r10,r7[0x2]
80003a3a:	30 0c       	mov	r12,0
80003a3c:	0f 8b       	ld.ub	r11,r7[0x0]
80003a3e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003a42:	fe b0 f3 b1 	rcall	800021a4 <ads1299_wreg>
			break;
		default:
			ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0]);
			break;
	}
	if (data_usart_rx_dma_buffer[0] == ADS1299_OPC_STOP)
80003a46:	0f 89       	ld.ub	r9,r7[0x0]
80003a48:	30 a8       	mov	r8,10
80003a4a:	f0 09 18 00 	cp.b	r9,r8
80003a4e:	ce 61       	brne	80003a1a <pdca_data_usart_rx_handler+0x62>
	{
		usart_tx_buffer_idx = 0;
80003a50:	30 08       	mov	r8,0
80003a52:	48 d9       	lddpc	r9,80003a84 <pdca_data_usart_rx_handler+0xcc>
		pdca_disable(DATA_USART_TX_PDCA_CHANNEL);
80003a54:	10 9c       	mov	r12,r8
			ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0]);
			break;
	}
	if (data_usart_rx_dma_buffer[0] == ADS1299_OPC_STOP)
	{
		usart_tx_buffer_idx = 0;
80003a56:	93 08       	st.w	r9[0x0],r8
		pdca_disable(DATA_USART_TX_PDCA_CHANNEL);
80003a58:	fe b0 f6 1a 	rcall	8000268c <pdca_disable>
80003a5c:	cd fb       	rjmp	80003a1a <pdca_data_usart_rx_handler+0x62>
	{
		case 0x40:	// WREG
			ads1299_wreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, data_usart_rx_dma_buffer[2]);
			break;
		case 0x20:	// RREG
			ads1299_rreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, &readback);
80003a5e:	0f 8b       	ld.ub	r11,r7[0x0]
80003a60:	fa ca ff fd 	sub	r10,sp,-3
80003a64:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003a68:	30 0c       	mov	r12,0
80003a6a:	fe b0 f3 db 	rcall	80002220 <ads1299_rreg>
			usart_putchar(DATA_USART, (int)readback);
80003a6e:	1b bb       	ld.ub	r11,sp[0x3]
80003a70:	0c 9c       	mov	r12,r6
80003a72:	fe b0 f9 e2 	rcall	80002e36 <usart_putchar>
 * \return \c 1 if the USART Transmit Shift Register and the USART Transmit
 *         Holding Register are free, otherwise \c 0.
 */
__always_inline static int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
80003a76:	6c 58       	ld.w	r8,r6[0x14]
			while(!usart_tx_empty(DATA_USART));
80003a78:	ed b8 00 09 	bld	r8,0x9
80003a7c:	cf d1       	brne	80003a76 <pdca_data_usart_rx_handler+0xbe>
80003a7e:	cc 9b       	rjmp	80003a10 <pdca_data_usart_rx_handler+0x58>
80003a80:	00 00       	add	r0,r0
80003a82:	21 d4       	sub	r4,29
80003a84:	00 00       	add	r0,r0
80003a86:	21 d8       	sub	r8,29

80003a88 <mpu6050_rdata16_packet>:
	}
	return STATUS_OK;
}

status_code_t mpu6050_rdata16_packet(uint32_t saddr, volatile uint32_t sample_idx, data_packet_t* packet)
{
80003a88:	eb cd 40 80 	pushm	r7,lr
80003a8c:	20 ad       	sub	sp,40
		.chip			= saddr,
		.addr[0]		= MPU6050_RA_ACCEL_XOUT_H,
		.addr_length	= 1,
		.buffer			= (void *)data,
		.length			= 14
	};
80003a8e:	30 08       	mov	r8,0
80003a90:	30 09       	mov	r9,0
80003a92:	fa e9 00 04 	st.d	sp[4],r8
80003a96:	30 08       	mov	r8,0
80003a98:	50 58       	stdsp	sp[0x14],r8
80003a9a:	33 b8       	mov	r8,59
80003a9c:	fb 68 00 08 	st.b	sp[8],r8
80003aa0:	30 18       	mov	r8,1
80003aa2:	fb 68 00 0b 	st.b	sp[11],r8
80003aa6:	fa c8 ff e6 	sub	r8,sp,-26
80003aaa:	50 38       	stdsp	sp[0xc],r8
80003aac:	30 e8       	mov	r8,14
	}
	return STATUS_OK;
}

status_code_t mpu6050_rdata16_packet(uint32_t saddr, volatile uint32_t sample_idx, data_packet_t* packet)
{
80003aae:	14 97       	mov	r7,r10
80003ab0:	50 0b       	stdsp	sp[0x0],r11
		.chip			= saddr,
		.addr[0]		= MPU6050_RA_ACCEL_XOUT_H,
		.addr_length	= 1,
		.buffer			= (void *)data,
		.length			= 14
	};
80003ab2:	50 1c       	stdsp	sp[0x4],r12
80003ab4:	50 48       	stdsp	sp[0x10],r8
	
	status = twim_read_packet(I2C_MODULE, &twim_package);
80003ab6:	fa cb ff fc 	sub	r11,sp,-4
80003aba:	fe 7c 44 00 	mov	r12,-48128
80003abe:	fe b0 f8 bb 	rcall	80002c34 <twim_read_packet>
	/* Accelerometer data */
	packet->imudata[sample_idx][0] = data[0];
80003ac2:	40 08       	lddsp	r8,sp[0x0]
80003ac4:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003ac8:	ee 08 00 28 	add	r8,r7,r8<<0x2
80003acc:	2e 48       	sub	r8,-28
80003ace:	11 a9       	ld.ub	r9,r8[0x2]
80003ad0:	fb 19 00 1a 	ld.uh	r9,sp[26]
80003ad4:	f2 0a 16 08 	lsr	r10,r9,0x8
80003ad8:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80003adc:	b0 aa       	st.b	r8[0x2],r10
80003ade:	11 ba       	ld.ub	r10,r8[0x3]
80003ae0:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][1] = data[1];
80003ae2:	40 08       	lddsp	r8,sp[0x0]
80003ae4:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003ae8:	ee 08 00 28 	add	r8,r7,r8<<0x2
80003aec:	2e 28       	sub	r8,-30
80003aee:	11 a9       	ld.ub	r9,r8[0x2]
80003af0:	fb 19 00 1c 	ld.uh	r9,sp[28]
80003af4:	f2 0a 16 08 	lsr	r10,r9,0x8
80003af8:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80003afc:	b0 aa       	st.b	r8[0x2],r10
80003afe:	11 ba       	ld.ub	r10,r8[0x3]
80003b00:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][2] = data[2];
80003b02:	40 08       	lddsp	r8,sp[0x0]
80003b04:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003b08:	ee 08 00 28 	add	r8,r7,r8<<0x2
80003b0c:	2e 08       	sub	r8,-32
80003b0e:	11 a9       	ld.ub	r9,r8[0x2]
80003b10:	fb 19 00 1e 	ld.uh	r9,sp[30]
80003b14:	f2 0a 16 08 	lsr	r10,r9,0x8
80003b18:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80003b1c:	b0 aa       	st.b	r8[0x2],r10
80003b1e:	11 ba       	ld.ub	r10,r8[0x3]
80003b20:	b0 b9       	st.b	r8[0x3],r9
	/* Skip temperature data */
	/* Gyro data */
	packet->imudata[sample_idx][3] = data[4];
80003b22:	40 08       	lddsp	r8,sp[0x0]
80003b24:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003b28:	ee 08 00 28 	add	r8,r7,r8<<0x2
80003b2c:	2d e8       	sub	r8,-34
80003b2e:	11 a9       	ld.ub	r9,r8[0x2]
80003b30:	fb 19 00 22 	ld.uh	r9,sp[34]
80003b34:	f2 0a 16 08 	lsr	r10,r9,0x8
80003b38:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80003b3c:	b0 aa       	st.b	r8[0x2],r10
80003b3e:	11 ba       	ld.ub	r10,r8[0x3]
80003b40:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][4] = data[5];
80003b42:	40 08       	lddsp	r8,sp[0x0]
80003b44:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003b48:	ee 08 00 28 	add	r8,r7,r8<<0x2
80003b4c:	2d c8       	sub	r8,-36
80003b4e:	11 a9       	ld.ub	r9,r8[0x2]
80003b50:	fb 19 00 24 	ld.uh	r9,sp[36]
80003b54:	f2 0a 16 08 	lsr	r10,r9,0x8
80003b58:	b0 aa       	st.b	r8[0x2],r10
80003b5a:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80003b5e:	11 ba       	ld.ub	r10,r8[0x3]
80003b60:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][5] = data[6];
80003b62:	40 08       	lddsp	r8,sp[0x0]
80003b64:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003b68:	ee 08 00 27 	add	r7,r7,r8<<0x2
80003b6c:	2d a7       	sub	r7,-38
80003b6e:	0f a8       	ld.ub	r8,r7[0x2]
80003b70:	fb 18 00 26 	ld.uh	r8,sp[38]
80003b74:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003b78:	a9 88       	lsr	r8,0x8
80003b7a:	ae a8       	st.b	r7[0x2],r8
80003b7c:	0f b8       	ld.ub	r8,r7[0x3]
80003b7e:	ae b9       	st.b	r7[0x3],r9
	
	return status;
}
80003b80:	2f 6d       	sub	sp,-40
80003b82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b86:	d7 03       	nop

80003b88 <mpu6050_initialize_normal>:
80003b88:	d4 21       	pushm	r4-r7,lr
80003b8a:	20 5d       	sub	sp,20
	{
		.chip			= MPU6050_DEFAULT_ADDRESS,
		.addr_length	= 1,
		.buffer			= (void *)mpu6050_tx_buffer,
		.length			= 1
	};
80003b8c:	30 08       	mov	r8,0
80003b8e:	30 09       	mov	r9,0
80003b90:	fa e9 00 00 	st.d	sp[0],r8
80003b94:	36 88       	mov	r8,104
80003b96:	50 08       	stdsp	sp[0x0],r8
80003b98:	30 18       	mov	r8,1
80003b9a:	ba f8       	st.b	sp[0x7],r8
	
	status = STATUS_OK;
	
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
80003b9c:	36 b8       	mov	r8,107
80003b9e:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
80003ba0:	30 98       	mov	r8,9
	{
		.chip			= MPU6050_DEFAULT_ADDRESS,
		.addr_length	= 1,
		.buffer			= (void *)mpu6050_tx_buffer,
		.length			= 1
	};
80003ba2:	4a 47       	lddpc	r7,80003c30 <mpu6050_initialize_normal+0xa8>
80003ba4:	30 05       	mov	r5,0
80003ba6:	30 14       	mov	r4,1
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
							|	(0 << MPU6050_PWR1_SLEEP_BIT) 
							|         MPU6050_CLOCK_PLL_XGYRO    );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003ba8:	1a 9b       	mov	r11,sp
	
	status = STATUS_OK;
	
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
80003baa:	ae 88       	st.b	r7[0x0],r8
	{
		.chip			= MPU6050_DEFAULT_ADDRESS,
		.addr_length	= 1,
		.buffer			= (void *)mpu6050_tx_buffer,
		.length			= 1
	};
80003bac:	50 27       	stdsp	sp[0x8],r7
80003bae:	50 34       	stdsp	sp[0xc],r4
80003bb0:	50 45       	stdsp	sp[0x10],r5
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
							|	(0 << MPU6050_PWR1_SLEEP_BIT) 
							|         MPU6050_CLOCK_PLL_XGYRO    );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003bb2:	fe 7c 44 00 	mov	r12,-48128
80003bb6:	fe b0 f7 d1 	rcall	80002b58 <twim_write_packet>
	
	/* Sanity check: read back that register */
// 	twim_read_packet(I2C_MODULE, (const twim_package_t*)&verify_package);
	
	/* Set desired sample rate */
	init_package.addr[0] = MPU6050_RA_SMPLRT_DIV;
80003bba:	31 98       	mov	r8,25
80003bbc:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = (uint8_t)((MPU6050_GYRO_OUTPUT_RATE_HZ/MPU6050_SAMPLING_RATE_HZ)-1);
80003bbe:	31 f8       	mov	r8,31
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80003bc0:	1a 9b       	mov	r11,sp
	/* Sanity check: read back that register */
// 	twim_read_packet(I2C_MODULE, (const twim_package_t*)&verify_package);
	
	/* Set desired sample rate */
	init_package.addr[0] = MPU6050_RA_SMPLRT_DIV;
	mpu6050_tx_buffer[0] = (uint8_t)((MPU6050_GYRO_OUTPUT_RATE_HZ/MPU6050_SAMPLING_RATE_HZ)-1);
80003bc2:	ae 88       	st.b	r7[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80003bc4:	fe 7c 44 00 	mov	r12,-48128
80003bc8:	fe b0 f7 c8 	rcall	80002b58 <twim_write_packet>
	
	/* Configure LPF for 256 Hz bandwidth */
	init_package.addr[0] = MPU6050_RA_CONFIG;
80003bcc:	31 a8       	mov	r8,26
	mpu6050_tx_buffer[0] = MPU6050_DLPF_BW;
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80003bce:	1a 9b       	mov	r11,sp
	init_package.addr[0] = MPU6050_RA_SMPLRT_DIV;
	mpu6050_tx_buffer[0] = (uint8_t)((MPU6050_GYRO_OUTPUT_RATE_HZ/MPU6050_SAMPLING_RATE_HZ)-1);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
	
	/* Configure LPF for 256 Hz bandwidth */
	init_package.addr[0] = MPU6050_RA_CONFIG;
80003bd0:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = MPU6050_DLPF_BW;
80003bd2:	ae 85       	st.b	r7[0x0],r5
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80003bd4:	fe 7c 44 00 	mov	r12,-48128
80003bd8:	fe b0 f7 c0 	rcall	80002b58 <twim_write_packet>
	
	/* Gyro full-scale at +/-250 deg/s */
	init_package.addr[0] = MPU6050_RA_GYRO_CONFIG;
80003bdc:	31 b8       	mov	r8,27
	mpu6050_tx_buffer[0] = (MPU6050_GYRO_FS_250 << MPU6050_GCONFIG_FS_SEL_BIT);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003bde:	1a 9b       	mov	r11,sp
	init_package.addr[0] = MPU6050_RA_CONFIG;
	mpu6050_tx_buffer[0] = MPU6050_DLPF_BW;
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
	
	/* Gyro full-scale at +/-250 deg/s */
	init_package.addr[0] = MPU6050_RA_GYRO_CONFIG;
80003be0:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = (MPU6050_GYRO_FS_250 << MPU6050_GCONFIG_FS_SEL_BIT);
80003be2:	ae 85       	st.b	r7[0x0],r5
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003be4:	fe 7c 44 00 	mov	r12,-48128
80003be8:	fe b0 f7 b8 	rcall	80002b58 <twim_write_packet>
	
	/* Accelerometer full-scale at +/-2 g */
	init_package.addr[0] = MPU6050_RA_ACCEL_CONFIG;
80003bec:	31 c8       	mov	r8,28
	mpu6050_tx_buffer[0] = (MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003bee:	1a 9b       	mov	r11,sp
	init_package.addr[0] = MPU6050_RA_GYRO_CONFIG;
	mpu6050_tx_buffer[0] = (MPU6050_GYRO_FS_250 << MPU6050_GCONFIG_FS_SEL_BIT);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* Accelerometer full-scale at +/-2 g */
	init_package.addr[0] = MPU6050_RA_ACCEL_CONFIG;
80003bf0:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = (MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT);
80003bf2:	ae 85       	st.b	r7[0x0],r5
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003bf4:	fe 7c 44 00 	mov	r12,-48128
80003bf8:	fe b0 f7 b0 	rcall	80002b58 <twim_write_packet>
	
	/* INT pin active high, push-pull, latched until any register read; FSYNC disabled */
	init_package.addr[0] = MPU6050_RA_INT_PIN_CFG;
80003bfc:	33 78       	mov	r8,55
80003bfe:	ba c8       	st.b	sp[0x4],r8
	mpu6050_tx_buffer[0] = (  (MPU6050_INTMODE_ACTIVEHIGH << MPU6050_INTCFG_INT_LEVEL_BIT   )	
80003c00:	33 08       	mov	r8,48
							| (MPU6050_INTDRV_PUSHPULL    << MPU6050_INTCFG_INT_OPEN_BIT    )
							| (MPU6050_INTLATCH_WAITCLEAR << MPU6050_INTCFG_LATCH_INT_EN_BIT)
							| (MPU6050_INTCLEAR_ANYREAD   << MPU6050_INTCFG_INT_RD_CLEAR_BIT)  );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003c02:	1a 9b       	mov	r11,sp
	mpu6050_tx_buffer[0] = (MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* INT pin active high, push-pull, latched until any register read; FSYNC disabled */
	init_package.addr[0] = MPU6050_RA_INT_PIN_CFG;
	mpu6050_tx_buffer[0] = (  (MPU6050_INTMODE_ACTIVEHIGH << MPU6050_INTCFG_INT_LEVEL_BIT   )	
80003c04:	ae 88       	st.b	r7[0x0],r8
							| (MPU6050_INTDRV_PUSHPULL    << MPU6050_INTCFG_INT_OPEN_BIT    )
							| (MPU6050_INTLATCH_WAITCLEAR << MPU6050_INTCFG_LATCH_INT_EN_BIT)
							| (MPU6050_INTCLEAR_ANYREAD   << MPU6050_INTCFG_INT_RD_CLEAR_BIT)  );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003c06:	fe 7c 44 00 	mov	r12,-48128
80003c0a:	fe b0 f7 a7 	rcall	80002b58 <twim_write_packet>
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
// 	mpu6050_tx_buffer[0] = (1 << MPU6050_USERCTRL_FIFO_EN_BIT);
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* Enable INT pin assertion upon entering DATA_RDY state */
	init_package.addr[0] = MPU6050_RA_INT_ENABLE;
80003c0e:	33 88       	mov	r8,56
	mpu6050_tx_buffer[0] = (1 << MPU6050_INTERRUPT_DATA_RDY_BIT);
80003c10:	ae 84       	st.b	r7[0x0],r4
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003c12:	1a 9b       	mov	r11,sp
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
// 	mpu6050_tx_buffer[0] = (1 << MPU6050_USERCTRL_FIFO_EN_BIT);
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* Enable INT pin assertion upon entering DATA_RDY state */
	init_package.addr[0] = MPU6050_RA_INT_ENABLE;
80003c14:	ba c8       	st.b	sp[0x4],r8
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
							|	(0 << MPU6050_PWR1_SLEEP_BIT) 
							|         MPU6050_CLOCK_PLL_XGYRO    );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003c16:	1a 96       	mov	r6,sp
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* Enable INT pin assertion upon entering DATA_RDY state */
	init_package.addr[0] = MPU6050_RA_INT_ENABLE;
	mpu6050_tx_buffer[0] = (1 << MPU6050_INTERRUPT_DATA_RDY_BIT);
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80003c18:	fe 7c 44 00 	mov	r12,-48128
80003c1c:	fe b0 f7 9e 	rcall	80002b58 <twim_write_packet>
	
	if (status != STATUS_OK) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
80003c20:	0a 3c       	cp.w	r12,r5
80003c22:	f9 bc 01 ff 	movne	r12,-1
80003c26:	ea 0c 17 00 	moveq	r12,r5
80003c2a:	2f bd       	sub	sp,-20
80003c2c:	d8 22       	popm	r4-r7,pc
80003c2e:	d7 03       	nop
80003c30:	00 00       	add	r0,r0
80003c32:	22 e0       	sub	r0,46

Disassembly of section .exception:

80003e00 <_evba>:
80003e00:	c0 08       	rjmp	80003e00 <_evba>
	...

80003e04 <_handle_TLB_Multiple_Hit>:
80003e04:	c0 08       	rjmp	80003e04 <_handle_TLB_Multiple_Hit>
	...

80003e08 <_handle_Bus_Error_Data_Fetch>:
80003e08:	c0 08       	rjmp	80003e08 <_handle_Bus_Error_Data_Fetch>
	...

80003e0c <_handle_Bus_Error_Instruction_Fetch>:
80003e0c:	c0 08       	rjmp	80003e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80003e10 <_handle_NMI>:
80003e10:	c0 08       	rjmp	80003e10 <_handle_NMI>
	...

80003e14 <_handle_Instruction_Address>:
80003e14:	c0 08       	rjmp	80003e14 <_handle_Instruction_Address>
	...

80003e18 <_handle_ITLB_Protection>:
80003e18:	c0 08       	rjmp	80003e18 <_handle_ITLB_Protection>
	...

80003e1c <_handle_Breakpoint>:
80003e1c:	c0 08       	rjmp	80003e1c <_handle_Breakpoint>
	...

80003e20 <_handle_Illegal_Opcode>:
80003e20:	c0 08       	rjmp	80003e20 <_handle_Illegal_Opcode>
	...

80003e24 <_handle_Unimplemented_Instruction>:
80003e24:	c0 08       	rjmp	80003e24 <_handle_Unimplemented_Instruction>
	...

80003e28 <_handle_Privilege_Violation>:
80003e28:	c0 08       	rjmp	80003e28 <_handle_Privilege_Violation>
	...

80003e2c <_handle_Floating_Point>:
80003e2c:	c0 08       	rjmp	80003e2c <_handle_Floating_Point>
	...

80003e30 <_handle_Coprocessor_Absent>:
80003e30:	c0 08       	rjmp	80003e30 <_handle_Coprocessor_Absent>
	...

80003e34 <_handle_Data_Address_Read>:
80003e34:	c0 08       	rjmp	80003e34 <_handle_Data_Address_Read>
	...

80003e38 <_handle_Data_Address_Write>:
80003e38:	c0 08       	rjmp	80003e38 <_handle_Data_Address_Write>
	...

80003e3c <_handle_DTLB_Protection_Read>:
80003e3c:	c0 08       	rjmp	80003e3c <_handle_DTLB_Protection_Read>
	...

80003e40 <_handle_DTLB_Protection_Write>:
80003e40:	c0 08       	rjmp	80003e40 <_handle_DTLB_Protection_Write>
	...

80003e44 <_handle_DTLB_Modified>:
80003e44:	c0 08       	rjmp	80003e44 <_handle_DTLB_Modified>
	...

80003e50 <_handle_ITLB_Miss>:
80003e50:	c0 08       	rjmp	80003e50 <_handle_ITLB_Miss>
	...

80003e60 <_handle_DTLB_Miss_Read>:
80003e60:	c0 08       	rjmp	80003e60 <_handle_DTLB_Miss_Read>
	...

80003e70 <_handle_DTLB_Miss_Write>:
80003e70:	c0 08       	rjmp	80003e70 <_handle_DTLB_Miss_Write>
	...

80003f00 <_handle_Supervisor_Call>:
80003f00:	c0 08       	rjmp	80003f00 <_handle_Supervisor_Call>
80003f02:	d7 03       	nop

80003f04 <_int0>:
80003f04:	30 0c       	mov	r12,0
80003f06:	fe b0 f3 a7 	rcall	80002654 <_get_interrupt_handler>
80003f0a:	58 0c       	cp.w	r12,0
80003f0c:	f8 0f 17 10 	movne	pc,r12
80003f10:	d6 03       	rete

80003f12 <_int1>:
80003f12:	30 1c       	mov	r12,1
80003f14:	fe b0 f3 a0 	rcall	80002654 <_get_interrupt_handler>
80003f18:	58 0c       	cp.w	r12,0
80003f1a:	f8 0f 17 10 	movne	pc,r12
80003f1e:	d6 03       	rete

80003f20 <_int2>:
80003f20:	30 2c       	mov	r12,2
80003f22:	fe b0 f3 99 	rcall	80002654 <_get_interrupt_handler>
80003f26:	58 0c       	cp.w	r12,0
80003f28:	f8 0f 17 10 	movne	pc,r12
80003f2c:	d6 03       	rete

80003f2e <_int3>:
80003f2e:	30 3c       	mov	r12,3
80003f30:	fe b0 f3 92 	rcall	80002654 <_get_interrupt_handler>
80003f34:	58 0c       	cp.w	r12,0
80003f36:	f8 0f 17 10 	movne	pc,r12
80003f3a:	d6 03       	rete
80003f3c:	d7 03       	nop
80003f3e:	d7 03       	nop
80003f40:	d7 03       	nop
80003f42:	d7 03       	nop
80003f44:	d7 03       	nop
80003f46:	d7 03       	nop
80003f48:	d7 03       	nop
80003f4a:	d7 03       	nop
80003f4c:	d7 03       	nop
80003f4e:	d7 03       	nop
80003f50:	d7 03       	nop
80003f52:	d7 03       	nop
80003f54:	d7 03       	nop
80003f56:	d7 03       	nop
80003f58:	d7 03       	nop
80003f5a:	d7 03       	nop
80003f5c:	d7 03       	nop
80003f5e:	d7 03       	nop
80003f60:	d7 03       	nop
80003f62:	d7 03       	nop
80003f64:	d7 03       	nop
80003f66:	d7 03       	nop
80003f68:	d7 03       	nop
80003f6a:	d7 03       	nop
80003f6c:	d7 03       	nop
80003f6e:	d7 03       	nop
80003f70:	d7 03       	nop
80003f72:	d7 03       	nop
80003f74:	d7 03       	nop
80003f76:	d7 03       	nop
80003f78:	d7 03       	nop
80003f7a:	d7 03       	nop
80003f7c:	d7 03       	nop
80003f7e:	d7 03       	nop
80003f80:	d7 03       	nop
80003f82:	d7 03       	nop
80003f84:	d7 03       	nop
80003f86:	d7 03       	nop
80003f88:	d7 03       	nop
80003f8a:	d7 03       	nop
80003f8c:	d7 03       	nop
80003f8e:	d7 03       	nop
80003f90:	d7 03       	nop
80003f92:	d7 03       	nop
80003f94:	d7 03       	nop
80003f96:	d7 03       	nop
80003f98:	d7 03       	nop
80003f9a:	d7 03       	nop
80003f9c:	d7 03       	nop
80003f9e:	d7 03       	nop
80003fa0:	d7 03       	nop
80003fa2:	d7 03       	nop
80003fa4:	d7 03       	nop
80003fa6:	d7 03       	nop
80003fa8:	d7 03       	nop
80003faa:	d7 03       	nop
80003fac:	d7 03       	nop
80003fae:	d7 03       	nop
80003fb0:	d7 03       	nop
80003fb2:	d7 03       	nop
80003fb4:	d7 03       	nop
80003fb6:	d7 03       	nop
80003fb8:	d7 03       	nop
80003fba:	d7 03       	nop
80003fbc:	d7 03       	nop
80003fbe:	d7 03       	nop
80003fc0:	d7 03       	nop
80003fc2:	d7 03       	nop
80003fc4:	d7 03       	nop
80003fc6:	d7 03       	nop
80003fc8:	d7 03       	nop
80003fca:	d7 03       	nop
80003fcc:	d7 03       	nop
80003fce:	d7 03       	nop
80003fd0:	d7 03       	nop
80003fd2:	d7 03       	nop
80003fd4:	d7 03       	nop
80003fd6:	d7 03       	nop
80003fd8:	d7 03       	nop
80003fda:	d7 03       	nop
80003fdc:	d7 03       	nop
80003fde:	d7 03       	nop
80003fe0:	d7 03       	nop
80003fe2:	d7 03       	nop
80003fe4:	d7 03       	nop
80003fe6:	d7 03       	nop
80003fe8:	d7 03       	nop
80003fea:	d7 03       	nop
80003fec:	d7 03       	nop
80003fee:	d7 03       	nop
80003ff0:	d7 03       	nop
80003ff2:	d7 03       	nop
80003ff4:	d7 03       	nop
80003ff6:	d7 03       	nop
80003ff8:	d7 03       	nop
80003ffa:	d7 03       	nop
80003ffc:	d7 03       	nop
80003ffe:	d7 03       	nop
