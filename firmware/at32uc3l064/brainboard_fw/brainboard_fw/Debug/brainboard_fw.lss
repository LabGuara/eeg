
brainboard_fw.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053b0  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80007400  80007400  00007800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000134  80007600  80007600  00007a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80007734  80007734  00007b34  2**0
                  ALLOC
  6 .data         0000002e  00000004  80007738  00007c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000006  00000032  80007766  00007c32  2**0
                  ALLOC
  8 .bss          000022d0  00000038  80007768  00007c38  2**2
                  ALLOC
  9 .comment      00000030  00000000  00000000  00007c32  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b78  00000000  00000000  00007c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001b57  00000000  00000000  000087da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001937d  00000000  00000000  0000a331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022db  00000000  00000000  000236ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a0fa  00000000  00000000  00025989  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002474  00000000  00000000  0002fa84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004c45  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00003cc7  00000000  00000000  00036b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00ae916d  00000000  00000000  0003a804  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00000b58  00000000  00000000  00b23971  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf d5 3c 	sub	pc,pc,-10948

Disassembly of section .text:

80002004 <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
80002004:	eb cd 40 80 	pushm	r7,lr
80002008:	1a 97       	mov	r7,sp
8000200a:	20 1d       	sub	sp,4
8000200c:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
80002010:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002014:	58 18       	cp.w	r8,1
80002016:	c0 a0       	breq	8000202a <dfll_priv_get_source_hz+0x26>
80002018:	c0 63       	brcs	80002024 <dfll_priv_get_source_hz+0x20>
8000201a:	58 48       	cp.w	r8,4
8000201c:	c0 a0       	breq	80002030 <dfll_priv_get_source_hz+0x2c>
8000201e:	58 98       	cp.w	r8,9
80002020:	c0 d0       	breq	8000203a <dfll_priv_get_source_hz+0x36>
80002022:	c0 f8       	rjmp	80002040 <dfll_priv_get_source_hz+0x3c>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80002024:	e0 78 c1 38 	mov	r8,115000
80002028:	c0 d8       	rjmp	80002042 <dfll_priv_get_source_hz+0x3e>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
8000202a:	e0 68 80 00 	mov	r8,32768
8000202e:	c0 a8       	rjmp	80002042 <dfll_priv_get_source_hz+0x3e>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80002030:	e0 68 0e 00 	mov	r8,3584
80002034:	ea 18 07 27 	orh	r8,0x727
80002038:	c0 58       	rjmp	80002042 <dfll_priv_get_source_hz+0x3e>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
8000203a:	e0 68 7d 00 	mov	r8,32000
8000203e:	c0 28       	rjmp	80002042 <dfll_priv_get_source_hz+0x3e>

	default:
		/* unhandled_case(src) */
		return 0;
80002040:	30 08       	mov	r8,0
	}
}
80002042:	10 9c       	mov	r12,r8
80002044:	2f fd       	sub	sp,-4
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
80002052:	30 0c       	mov	r12,0
80002054:	f0 1f 00 06 	mcall	8000206c <sysclk_get_main_hz+0x20>
80002058:	18 99       	mov	r9,r12
8000205a:	e0 68 02 b6 	mov	r8,694
8000205e:	f2 08 02 48 	mul	r8,r9,r8
80002062:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80002064:	10 9c       	mov	r12,r8
80002066:	e3 cd 80 80 	ldm	sp++,r7,pc
8000206a:	00 00       	add	r0,r0
8000206c:	80 00       	ld.sh	r0,r0[0x0]
8000206e:	20 04       	sub	r4,0

80002070 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002070:	eb cd 40 80 	pushm	r7,lr
80002074:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80002076:	f0 1f 00 04 	mcall	80002084 <sysclk_get_cpu_hz+0x14>
8000207a:	18 98       	mov	r8,r12
8000207c:	a3 88       	lsr	r8,0x2
}
8000207e:	10 9c       	mov	r12,r8
80002080:	e3 cd 80 80 	ldm	sp++,r7,pc
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	20 4c       	sub	r12,4

80002088 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
80002088:	eb cd 40 80 	pushm	r7,lr
8000208c:	1a 97       	mov	r7,sp
8000208e:	20 2d       	sub	sp,8
80002090:	ef 4c ff fc 	st.w	r7[-4],r12
80002094:	16 98       	mov	r8,r11
80002096:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000209a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8000209e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020a2:	91 39       	st.w	r8[0xc],r9
}
800020a4:	2f ed       	sub	sp,-8
800020a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800020aa <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
800020aa:	eb cd 40 80 	pushm	r7,lr
800020ae:	1a 97       	mov	r7,sp
800020b0:	20 1d       	sub	sp,4
800020b2:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
800020b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ba:	70 28       	ld.w	r8,r8[0x8]
800020bc:	5c 88       	casts.h	r8
}
800020be:	10 9c       	mov	r12,r8
800020c0:	2f fd       	sub	sp,-4
800020c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800020c6 <spi_is_tx_empty>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
800020c6:	eb cd 40 80 	pushm	r7,lr
800020ca:	1a 97       	mov	r7,sp
800020cc:	20 1d       	sub	sp,4
800020ce:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
800020d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020d6:	70 48       	ld.w	r8,r8[0x10]
800020d8:	e2 18 02 00 	andl	r8,0x200,COH
800020dc:	5f 18       	srne	r8
800020de:	5c 58       	castu.b	r8
}
800020e0:	10 9c       	mov	r12,r8
800020e2:	2f fd       	sub	sp,-4
800020e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800020e8 <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
800020e8:	eb cd 40 80 	pushm	r7,lr
800020ec:	1a 97       	mov	r7,sp
800020ee:	20 1d       	sub	sp,4
800020f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
800020f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020f8:	70 48       	ld.w	r8,r8[0x10]
800020fa:	e2 18 00 02 	andl	r8,0x2,COH
800020fe:	5f 18       	srne	r8
80002100:	5c 58       	castu.b	r8
}
80002102:	10 9c       	mov	r12,r8
80002104:	2f fd       	sub	sp,-4
80002106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000210a:	d7 03       	nop

8000210c <ads1299_send_byte_no_cs>:
 * \pre Requires spi.h from the Atmel Software Framework and ads1299_spi_adapt.h.
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
8000210c:	eb cd 40 80 	pushm	r7,lr
80002110:	1a 97       	mov	r7,sp
80002112:	20 1d       	sub	sp,4
80002114:	18 98       	mov	r8,r12
80002116:	ef 68 ff fc 	st.b	r7[-4],r8
	while(!spi_is_tx_ready(SPI_ADDRESS));
8000211a:	fe 7c 40 00 	mov	r12,-49152
8000211e:	f0 1f 00 0f 	mcall	80002158 <ads1299_send_byte_no_cs+0x4c>
80002122:	18 98       	mov	r8,r12
80002124:	ec 18 00 01 	eorl	r8,0x1
80002128:	5c 58       	castu.b	r8
8000212a:	cf 81       	brne	8000211a <ads1299_send_byte_no_cs+0xe>
	spi_put(SPI_ADDRESS, opcode);
8000212c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002130:	10 9b       	mov	r11,r8
80002132:	fe 7c 40 00 	mov	r12,-49152
80002136:	f0 1f 00 0a 	mcall	8000215c <ads1299_send_byte_no_cs+0x50>
	while(!spi_is_tx_empty(SPI_ADDRESS));
8000213a:	fe 7c 40 00 	mov	r12,-49152
8000213e:	f0 1f 00 09 	mcall	80002160 <ads1299_send_byte_no_cs+0x54>
80002142:	18 98       	mov	r8,r12
80002144:	ec 18 00 01 	eorl	r8,0x1
80002148:	5c 58       	castu.b	r8
8000214a:	cf 81       	brne	8000213a <ads1299_send_byte_no_cs+0x2e>
	
	return ADS1299_STATUS_OK;
8000214c:	30 08       	mov	r8,0
}
8000214e:	10 9c       	mov	r12,r8
80002150:	2f fd       	sub	sp,-4
80002152:	e3 cd 80 80 	ldm	sp++,r7,pc
80002156:	00 00       	add	r0,r0
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	20 e8       	sub	r8,14
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	20 88       	sub	r8,8
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	20 c6       	sub	r6,12

80002164 <ads1299_send_byte>:
 * \param chip_select The chip select number of the ADS1299 to be initialized.
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte(uint8_t chip_select, uint8_t opcode)
{
80002164:	eb cd 40 80 	pushm	r7,lr
80002168:	1a 97       	mov	r7,sp
8000216a:	20 2d       	sub	sp,8
8000216c:	18 99       	mov	r9,r12
8000216e:	16 98       	mov	r8,r11
80002170:	ef 69 ff fc 	st.b	r7[-4],r9
80002174:	ef 68 ff f8 	st.b	r7[-8],r8
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
80002178:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000217c:	10 9b       	mov	r11,r8
8000217e:	fe 7c 40 00 	mov	r12,-49152
80002182:	f0 1f 00 0a 	mcall	800021a8 <ads1299_send_byte+0x44>
	
	ads1299_send_byte_no_cs(opcode);
80002186:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000218a:	10 9c       	mov	r12,r8
8000218c:	f0 1f 00 08 	mcall	800021ac <ads1299_send_byte+0x48>
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002190:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002194:	10 9b       	mov	r11,r8
80002196:	fe 7c 40 00 	mov	r12,-49152
8000219a:	f0 1f 00 06 	mcall	800021b0 <ads1299_send_byte+0x4c>
	
	return ADS1299_STATUS_OK;
8000219e:	30 08       	mov	r8,0
	//#else
	//#endif
}
800021a0:	10 9c       	mov	r12,r8
800021a2:	2f ed       	sub	sp,-8
800021a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	3c 68       	mov	r8,-58
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 0c       	sub	r12,16
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	3d 00       	mov	r0,-48

800021b4 <ads1299_device_init>:
**************************************************************************************************************************************************/

/* SYSTEM CONTROL FUNCTIONS **********************************************************************************************************************/

ads1299_error_t	ads1299_device_init(uint8_t chip_select, uint8_t init_regs)
{
800021b4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800021b8:	1a 97       	mov	r7,sp
800021ba:	fa cd 00 ac 	sub	sp,sp,172
800021be:	18 98       	mov	r8,r12
800021c0:	16 99       	mov	r9,r11
800021c2:	ef 68 ff 78 	st.b	r7[-136],r8
800021c6:	12 98       	mov	r8,r9
800021c8:	ef 68 ff 74 	st.b	r7[-140],r8
	#if UC3
	/* Power cycle ADS1299 */
	gpio_clr_gpio_pin(ADS1299_PIN_PWDN);
800021cc:	30 9c       	mov	r12,9
800021ce:	f0 1f 01 3d 	mcall	800026c0 <ads1299_device_init+0x50c>
	delay_us(20);
800021d2:	f0 1f 01 3d 	mcall	800026c4 <ads1299_device_init+0x510>
800021d6:	18 98       	mov	r8,r12
800021d8:	31 49       	mov	r9,20
800021da:	ef 49 ff a4 	st.w	r7[-92],r9
800021de:	ef 48 ff a0 	st.w	r7[-96],r8
800021e2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800021e6:	ef 48 ff ac 	st.w	r7[-84],r8
800021ea:	ee f8 ff a0 	ld.w	r8,r7[-96]
800021ee:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800021f2:	ee fc ff ac 	ld.w	r12,r7[-84]
800021f6:	ef 4c ff 60 	st.w	r7[-160],r12
800021fa:	30 0b       	mov	r11,0
800021fc:	ef 4b ff 5c 	st.w	r7[-164],r11
80002200:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002204:	ef 49 ff 58 	st.w	r7[-168],r9
80002208:	30 08       	mov	r8,0
8000220a:	ef 48 ff 54 	st.w	r7[-172],r8
8000220e:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002212:	ee fc ff 58 	ld.w	r12,r7[-168]
80002216:	b9 3a       	mul	r10,r12
80002218:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000221c:	ee fb ff 60 	ld.w	r11,r7[-160]
80002220:	b7 38       	mul	r8,r11
80002222:	10 0a       	add	r10,r8
80002224:	ee fc ff 60 	ld.w	r12,r7[-160]
80002228:	ee fb ff 58 	ld.w	r11,r7[-168]
8000222c:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002230:	12 0a       	add	r10,r9
80002232:	14 99       	mov	r9,r10
80002234:	ee 7a 42 3f 	mov	r10,999999
80002238:	30 0b       	mov	r11,0
8000223a:	f0 0a 00 0a 	add	r10,r8,r10
8000223e:	f2 0b 00 4b 	adc	r11,r9,r11
80002242:	ee 78 42 40 	mov	r8,1000000
80002246:	30 09       	mov	r9,0
80002248:	f0 1f 01 20 	mcall	800026c8 <ads1299_device_init+0x514>
8000224c:	14 98       	mov	r8,r10
8000224e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002250:	ef 48 ff b4 	st.w	r7[-76],r8
80002254:	ee c8 00 84 	sub	r8,r7,132
80002258:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000225c:	e1 b8 00 42 	mfsr	r8,0x108
80002260:	10 99       	mov	r9,r8
80002262:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002266:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002268:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000226c:	70 09       	ld.w	r9,r8[0x0]
8000226e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002272:	10 09       	add	r9,r8
80002274:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002278:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000227a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000227e:	30 08       	mov	r8,0
80002280:	f3 68 00 08 	st.b	r9[8],r8
80002284:	ee c8 00 84 	sub	r8,r7,132
80002288:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000228c:	e1 b8 00 42 	mfsr	r8,0x108
80002290:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002294:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002298:	f1 39 00 08 	ld.ub	r9,r8[8]
8000229c:	30 28       	mov	r8,2
8000229e:	f0 09 18 00 	cp.b	r9,r8
800022a2:	c0 31       	brne	800022a8 <ads1299_device_init+0xf4>
    return false;
800022a4:	30 08       	mov	r8,0
800022a6:	c4 38       	rjmp	8000232c <ads1299_device_init+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022a8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800022ac:	f1 39 00 08 	ld.ub	r9,r8[8]
800022b0:	30 18       	mov	r8,1
800022b2:	f0 09 18 00 	cp.b	r9,r8
800022b6:	c0 31       	brne	800022bc <ads1299_device_init+0x108>
    return true;
800022b8:	30 18       	mov	r8,1
800022ba:	c3 98       	rjmp	8000232c <ads1299_device_init+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022bc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800022c0:	70 09       	ld.w	r9,r8[0x0]
800022c2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800022c6:	70 18       	ld.w	r8,r8[0x4]
800022c8:	10 39       	cp.w	r9,r8
800022ca:	e0 88 00 1a 	brls	800022fe <ads1299_device_init+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022ce:	ee f8 ff b8 	ld.w	r8,r7[-72]
800022d2:	70 08       	ld.w	r8,r8[0x0]
800022d4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800022d8:	10 39       	cp.w	r9,r8
800022da:	c1 02       	brcc	800022fa <ads1299_device_init+0x146>
800022dc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800022e0:	70 18       	ld.w	r8,r8[0x4]
800022e2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800022e6:	10 39       	cp.w	r9,r8
800022e8:	e0 88 00 09 	brls	800022fa <ads1299_device_init+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800022ec:	ee f9 ff b8 	ld.w	r9,r7[-72]
800022f0:	30 18       	mov	r8,1
800022f2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800022f6:	30 18       	mov	r8,1
800022f8:	c1 a8       	rjmp	8000232c <ads1299_device_init+0x178>
    }
    return false;
800022fa:	30 08       	mov	r8,0
800022fc:	c1 88       	rjmp	8000232c <ads1299_device_init+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022fe:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002302:	70 08       	ld.w	r8,r8[0x0]
80002304:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002308:	10 39       	cp.w	r9,r8
8000230a:	c0 93       	brcs	8000231c <ads1299_device_init+0x168>
8000230c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002310:	70 18       	ld.w	r8,r8[0x4]
80002312:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002316:	10 39       	cp.w	r9,r8
80002318:	e0 88 00 09 	brls	8000232a <ads1299_device_init+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000231c:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002320:	30 18       	mov	r8,1
80002322:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002326:	30 18       	mov	r8,1
80002328:	c0 28       	rjmp	8000232c <ads1299_device_init+0x178>
    }
    return false;
8000232a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000232c:	58 08       	cp.w	r8,0
8000232e:	ca b0       	breq	80002284 <ads1299_device_init+0xd0>
	gpio_set_gpio_pin(ADS1299_PIN_PWDN);
80002330:	30 9c       	mov	r12,9
80002332:	f0 1f 00 e7 	mcall	800026cc <ads1299_device_init+0x518>
	
	/* Allow oscillator warm-up */
	delay_ms(1000);
80002336:	f0 1f 00 e4 	mcall	800026c4 <ads1299_device_init+0x510>
8000233a:	18 98       	mov	r8,r12
8000233c:	e0 69 03 e8 	mov	r9,1000
80002340:	ef 49 ff c4 	st.w	r7[-60],r9
80002344:	ef 48 ff c0 	st.w	r7[-64],r8
80002348:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000234c:	ef 48 ff cc 	st.w	r7[-52],r8
80002350:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002354:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002358:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000235c:	ef 49 ff 70 	st.w	r7[-144],r9
80002360:	30 08       	mov	r8,0
80002362:	ef 48 ff 6c 	st.w	r7[-148],r8
80002366:	ee fc ff c8 	ld.w	r12,r7[-56]
8000236a:	ef 4c ff 68 	st.w	r7[-152],r12
8000236e:	30 0b       	mov	r11,0
80002370:	ef 4b ff 64 	st.w	r7[-156],r11
80002374:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002378:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000237c:	b3 3a       	mul	r10,r9
8000237e:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002382:	ee fc ff 70 	ld.w	r12,r7[-144]
80002386:	b9 38       	mul	r8,r12
80002388:	10 0a       	add	r10,r8
8000238a:	ee fb ff 70 	ld.w	r11,r7[-144]
8000238e:	ee fc ff 68 	ld.w	r12,r7[-152]
80002392:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002396:	12 0a       	add	r10,r9
80002398:	14 99       	mov	r9,r10
8000239a:	e0 6a 03 e7 	mov	r10,999
8000239e:	30 0b       	mov	r11,0
800023a0:	f0 0a 00 0a 	add	r10,r8,r10
800023a4:	f2 0b 00 4b 	adc	r11,r9,r11
800023a8:	e0 68 03 e8 	mov	r8,1000
800023ac:	30 09       	mov	r9,0
800023ae:	f0 1f 00 c7 	mcall	800026c8 <ads1299_device_init+0x514>
800023b2:	14 98       	mov	r8,r10
800023b4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800023b6:	ef 48 ff d4 	st.w	r7[-44],r8
800023ba:	ee c8 00 78 	sub	r8,r7,120
800023be:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023c2:	e1 b8 00 42 	mfsr	r8,0x108
800023c6:	10 99       	mov	r9,r8
800023c8:	ee f8 ff d0 	ld.w	r8,r7[-48]
800023cc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023ce:	ee f8 ff d0 	ld.w	r8,r7[-48]
800023d2:	70 09       	ld.w	r9,r8[0x0]
800023d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800023d8:	10 09       	add	r9,r8
800023da:	ee f8 ff d0 	ld.w	r8,r7[-48]
800023de:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800023e0:	ee f9 ff d0 	ld.w	r9,r7[-48]
800023e4:	30 08       	mov	r8,0
800023e6:	f3 68 00 08 	st.b	r9[8],r8
800023ea:	ee c8 00 78 	sub	r8,r7,120
800023ee:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023f2:	e1 b8 00 42 	mfsr	r8,0x108
800023f6:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800023fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800023fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002402:	30 28       	mov	r8,2
80002404:	f0 09 18 00 	cp.b	r9,r8
80002408:	c0 31       	brne	8000240e <ads1299_device_init+0x25a>
    return false;
8000240a:	30 08       	mov	r8,0
8000240c:	c4 38       	rjmp	80002492 <ads1299_device_init+0x2de>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000240e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002412:	f1 39 00 08 	ld.ub	r9,r8[8]
80002416:	30 18       	mov	r8,1
80002418:	f0 09 18 00 	cp.b	r9,r8
8000241c:	c0 31       	brne	80002422 <ads1299_device_init+0x26e>
    return true;
8000241e:	30 18       	mov	r8,1
80002420:	c3 98       	rjmp	80002492 <ads1299_device_init+0x2de>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002422:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002426:	70 09       	ld.w	r9,r8[0x0]
80002428:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000242c:	70 18       	ld.w	r8,r8[0x4]
8000242e:	10 39       	cp.w	r9,r8
80002430:	e0 88 00 1a 	brls	80002464 <ads1299_device_init+0x2b0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002434:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002438:	70 08       	ld.w	r8,r8[0x0]
8000243a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000243e:	10 39       	cp.w	r9,r8
80002440:	c1 02       	brcc	80002460 <ads1299_device_init+0x2ac>
80002442:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002446:	70 18       	ld.w	r8,r8[0x4]
80002448:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000244c:	10 39       	cp.w	r9,r8
8000244e:	e0 88 00 09 	brls	80002460 <ads1299_device_init+0x2ac>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002452:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002456:	30 18       	mov	r8,1
80002458:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000245c:	30 18       	mov	r8,1
8000245e:	c1 a8       	rjmp	80002492 <ads1299_device_init+0x2de>
    }
    return false;
80002460:	30 08       	mov	r8,0
80002462:	c1 88       	rjmp	80002492 <ads1299_device_init+0x2de>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002464:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002468:	70 08       	ld.w	r8,r8[0x0]
8000246a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000246e:	10 39       	cp.w	r9,r8
80002470:	c0 93       	brcs	80002482 <ads1299_device_init+0x2ce>
80002472:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002476:	70 18       	ld.w	r8,r8[0x4]
80002478:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000247c:	10 39       	cp.w	r9,r8
8000247e:	e0 88 00 09 	brls	80002490 <ads1299_device_init+0x2dc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002482:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002486:	30 18       	mov	r8,1
80002488:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000248c:	30 18       	mov	r8,1
8000248e:	c0 28       	rjmp	80002492 <ads1299_device_init+0x2de>
    }
    return false;
80002490:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002492:	58 08       	cp.w	r8,0
80002494:	ca b0       	breq	800023ea <ads1299_device_init+0x236>
	
	/* Tell chip to exit continuous data mode */
	ads1299_send_byte(chip_select, ADS1299_OPC_SDATAC);
80002496:	ef 38 ff 78 	ld.ub	r8,r7[-136]
8000249a:	31 1b       	mov	r11,17
8000249c:	10 9c       	mov	r12,r8
8000249e:	f0 1f 00 8d 	mcall	800026d0 <ads1299_device_init+0x51c>
	/* Stop taking conversions; apparently not done automatically */
	ads1299_send_byte(chip_select, ADS1299_OPC_STOP);
800024a2:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800024a6:	30 ab       	mov	r11,10
800024a8:	10 9c       	mov	r12,r8
800024aa:	f0 1f 00 8a 	mcall	800026d0 <ads1299_device_init+0x51c>
 	
	if (init_regs) 
800024ae:	ef 39 ff 74 	ld.ub	r9,r7[-140]
800024b2:	30 08       	mov	r8,0
800024b4:	f0 09 18 00 	cp.b	r9,r8
800024b8:	e0 80 00 fe 	breq	800026b4 <ads1299_device_init+0x500>
	{
		/* Write to GPIO register, set all pins to driven-low output */
		ads1299_wreg(chip_select, ADS1299_REGADDR_GPIO, ADS1299_REG_GPIO_GPIOC4_OUTPUT |
800024bc:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800024c0:	30 0a       	mov	r10,0
800024c2:	31 4b       	mov	r11,20
800024c4:	10 9c       	mov	r12,r8
800024c6:	f0 1f 00 84 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_GPIO_GPIOD2_LOW    |
		ADS1299_REG_GPIO_GPIOC1_OUTPUT |
		ADS1299_REG_GPIO_GPIOD1_LOW    );
			
		/* Write to CONFIG1, set data rate to 250 Hz */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CONFIG1, ADS1299_REG_CONFIG1_RESERVED_VALUE |
800024ca:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800024ce:	e0 6a 00 96 	mov	r10,150
800024d2:	30 1b       	mov	r11,1
800024d4:	10 9c       	mov	r12,r8
800024d6:	f0 1f 00 80 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CONFIG1_FMOD_DIV_BY_4096);
		/* Write to CONFIG2 register, generate test signal internally */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CONFIG2, ADS1299_REG_CONFIG2_RESERVED_VALUE |
800024da:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800024de:	e0 6a 00 d0 	mov	r10,208
800024e2:	30 2b       	mov	r11,2
800024e4:	10 9c       	mov	r12,r8
800024e6:	f0 1f 00 7c 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CONFIG2_CAL_INT        |
		ADS1299_REG_CONFIG2_CAL_PULSE_FCLK_DIV_2_21);
			
		/* Write to CONFIG3, enable internal reference buffer, bias internally generated, bias buffer enabled */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CONFIG3, ADS1299_REG_CONFIG3_REFBUF_ENABLED |
800024ea:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800024ee:	e0 6a 00 8c 	mov	r10,140
800024f2:	30 3b       	mov	r11,3
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 78 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CONFIG3_BIASREF_INT    |
		ADS1299_REG_CONFIG3_BIASBUF_ENABLED);
		/* Reference settling time */
		delay_ms(150);
800024fa:	f0 1f 00 73 	mcall	800026c4 <ads1299_device_init+0x510>
800024fe:	18 98       	mov	r8,r12
80002500:	e0 69 00 96 	mov	r9,150
80002504:	ef 49 ff e4 	st.w	r7[-28],r9
80002508:	ef 48 ff e0 	st.w	r7[-32],r8
8000250c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002510:	ef 48 ff ec 	st.w	r7[-20],r8
80002514:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002518:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000251c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002520:	30 01       	mov	r1,0
80002522:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002526:	30 03       	mov	r3,0
80002528:	e2 02 02 4a 	mul	r10,r1,r2
8000252c:	e6 00 02 48 	mul	r8,r3,r0
80002530:	10 0a       	add	r10,r8
80002532:	e0 02 06 48 	mulu.d	r8,r0,r2
80002536:	12 0a       	add	r10,r9
80002538:	14 99       	mov	r9,r10
8000253a:	e0 6a 03 e7 	mov	r10,999
8000253e:	30 0b       	mov	r11,0
80002540:	f0 0a 00 0a 	add	r10,r8,r10
80002544:	f2 0b 00 4b 	adc	r11,r9,r11
80002548:	e0 68 03 e8 	mov	r8,1000
8000254c:	30 09       	mov	r9,0
8000254e:	f0 1f 00 5f 	mcall	800026c8 <ads1299_device_init+0x514>
80002552:	14 98       	mov	r8,r10
80002554:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002556:	ef 48 ff f4 	st.w	r7[-12],r8
8000255a:	ee c8 00 6c 	sub	r8,r7,108
8000255e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002562:	e1 b8 00 42 	mfsr	r8,0x108
80002566:	10 99       	mov	r9,r8
80002568:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000256c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000256e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002572:	70 09       	ld.w	r9,r8[0x0]
80002574:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002578:	10 09       	add	r9,r8
8000257a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000257e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002580:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002584:	30 08       	mov	r8,0
80002586:	f3 68 00 08 	st.b	r9[8],r8
8000258a:	ee c8 00 6c 	sub	r8,r7,108
8000258e:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002592:	e1 b8 00 42 	mfsr	r8,0x108
80002596:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000259a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000259e:	f1 39 00 08 	ld.ub	r9,r8[8]
800025a2:	30 28       	mov	r8,2
800025a4:	f0 09 18 00 	cp.b	r9,r8
800025a8:	c0 31       	brne	800025ae <ads1299_device_init+0x3fa>
    return false;
800025aa:	30 08       	mov	r8,0
800025ac:	c4 38       	rjmp	80002632 <ads1299_device_init+0x47e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800025b6:	30 18       	mov	r8,1
800025b8:	f0 09 18 00 	cp.b	r9,r8
800025bc:	c0 31       	brne	800025c2 <ads1299_device_init+0x40e>
    return true;
800025be:	30 18       	mov	r8,1
800025c0:	c3 98       	rjmp	80002632 <ads1299_device_init+0x47e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025c6:	70 09       	ld.w	r9,r8[0x0]
800025c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025cc:	70 18       	ld.w	r8,r8[0x4]
800025ce:	10 39       	cp.w	r9,r8
800025d0:	e0 88 00 1a 	brls	80002604 <ads1299_device_init+0x450>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025d8:	70 08       	ld.w	r8,r8[0x0]
800025da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025de:	10 39       	cp.w	r9,r8
800025e0:	c1 02       	brcc	80002600 <ads1299_device_init+0x44c>
800025e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025e6:	70 18       	ld.w	r8,r8[0x4]
800025e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025ec:	10 39       	cp.w	r9,r8
800025ee:	e0 88 00 09 	brls	80002600 <ads1299_device_init+0x44c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025f6:	30 18       	mov	r8,1
800025f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800025fc:	30 18       	mov	r8,1
800025fe:	c1 a8       	rjmp	80002632 <ads1299_device_init+0x47e>
    }
    return false;
80002600:	30 08       	mov	r8,0
80002602:	c1 88       	rjmp	80002632 <ads1299_device_init+0x47e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002608:	70 08       	ld.w	r8,r8[0x0]
8000260a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000260e:	10 39       	cp.w	r9,r8
80002610:	c0 93       	brcs	80002622 <ads1299_device_init+0x46e>
80002612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002616:	70 18       	ld.w	r8,r8[0x4]
80002618:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000261c:	10 39       	cp.w	r9,r8
8000261e:	e0 88 00 09 	brls	80002630 <ads1299_device_init+0x47c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002622:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002626:	30 18       	mov	r8,1
80002628:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262c:	30 18       	mov	r8,1
8000262e:	c0 28       	rjmp	80002632 <ads1299_device_init+0x47e>
    }
    return false;
80002630:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002632:	58 08       	cp.w	r8,0
80002634:	ca b0       	breq	8000258a <ads1299_device_init+0x3d6>
			
		/* Write to CH1 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH1SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
80002636:	ef 38 ff 78 	ld.ub	r8,r7[-136]
8000263a:	36 0a       	mov	r10,96
8000263c:	30 5b       	mov	r11,5
8000263e:	10 9c       	mov	r12,r8
80002640:	f0 1f 00 25 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH2 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH2SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
80002644:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002648:	36 0a       	mov	r10,96
8000264a:	30 6b       	mov	r11,6
8000264c:	10 9c       	mov	r12,r8
8000264e:	f0 1f 00 22 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH3 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH3SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
80002652:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002656:	36 0a       	mov	r10,96
80002658:	30 7b       	mov	r11,7
8000265a:	10 9c       	mov	r12,r8
8000265c:	f0 1f 00 1e 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH4 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH4SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
80002660:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002664:	36 0a       	mov	r10,96
80002666:	30 8b       	mov	r11,8
80002668:	10 9c       	mov	r12,r8
8000266a:	f0 1f 00 1b 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH5 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH5SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
8000266e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002672:	36 0a       	mov	r10,96
80002674:	30 9b       	mov	r11,9
80002676:	10 9c       	mov	r12,r8
80002678:	f0 1f 00 17 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH6 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH6SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
8000267c:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002680:	36 0a       	mov	r10,96
80002682:	30 ab       	mov	r11,10
80002684:	10 9c       	mov	r12,r8
80002686:	f0 1f 00 14 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH5 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH7SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
8000268a:	ef 38 ff 78 	ld.ub	r8,r7[-136]
8000268e:	36 0a       	mov	r10,96
80002690:	30 bb       	mov	r11,11
80002692:	10 9c       	mov	r12,r8
80002694:	f0 1f 00 10 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH6 settings register, set as normal input, gain 24 */
		ads1299_wreg(chip_select, ADS1299_REGADDR_CH8SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
80002698:	ef 38 ff 78 	ld.ub	r8,r7[-136]
8000269c:	36 0a       	mov	r10,96
8000269e:	30 cb       	mov	r11,12
800026a0:	10 9c       	mov	r12,r8
800026a2:	f0 1f 00 0d 	mcall	800026d4 <ads1299_device_init+0x520>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
			
		/* Write to MISC1 register, SRB1 on (ref electrode) */
		ads1299_wreg(chip_select, ADS1299_REGADDR_MISC1, ADS1299_REG_MISC1_SRB1_ON);
800026a6:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800026aa:	32 0a       	mov	r10,32
800026ac:	31 5b       	mov	r11,21
800026ae:	10 9c       	mov	r12,r8
800026b0:	f0 1f 00 09 	mcall	800026d4 <ads1299_device_init+0x520>
	} 		
	return ADS1299_STATUS_OK;
800026b4:	30 08       	mov	r8,0
	#else
	#endif /* #if UC3 */
}
800026b6:	10 9c       	mov	r12,r8
800026b8:	2d 5d       	sub	sp,-172
800026ba:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800026be:	00 00       	add	r0,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	36 10       	mov	r0,97
800026c4:	80 00       	ld.sh	r0,r0[0x0]
800026c6:	20 70       	sub	r0,7
800026c8:	80 00       	ld.sh	r0,r0[0x0]
800026ca:	71 50       	ld.w	r0,r8[0x54]
800026cc:	80 00       	ld.sh	r0,r0[0x0]
800026ce:	35 a8       	mov	r8,90
800026d0:	80 00       	ld.sh	r0,r0[0x0]
800026d2:	21 64       	sub	r4,22
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	28 a0       	sub	r0,-118

800026d8 <ads1299_rreg>:


/* REGISTER READ/WRITE FUNCTIONS *****************************************************************************************************************/

ads1299_error_t ads1299_rreg(uint8_t chip_select, uint8_t reg_addr, uint8_t* read_reg_val_ptr)
{
800026d8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800026dc:	1a 97       	mov	r7,sp
800026de:	20 fd       	sub	sp,60
800026e0:	18 99       	mov	r9,r12
800026e2:	16 98       	mov	r8,r11
800026e4:	ef 4a ff c4 	st.w	r7[-60],r10
800026e8:	ef 69 ff cc 	st.b	r7[-52],r9
800026ec:	ef 68 ff c8 	st.b	r7[-56],r8
	#if UC3
	uint16_t read_data;
		
	spi_selectChip(SPI_ADDRESS, chip_select);
800026f0:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800026f4:	10 9b       	mov	r11,r8
800026f6:	fe 7c 40 00 	mov	r12,-49152
800026fa:	f0 1f 00 64 	mcall	80002888 <ads1299_rreg+0x1b0>
	
	/* First byte: read command for specified register */
	ads1299_send_byte_no_cs(ADS1299_OPC_RREG | reg_addr);
800026fe:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80002702:	a5 b8       	sbr	r8,0x5
80002704:	5c 58       	castu.b	r8
80002706:	10 9c       	mov	r12,r8
80002708:	f0 1f 00 61 	mcall	8000288c <ads1299_rreg+0x1b4>
	
	/* Second byte: Read only 1 register (send n-1, where n is number of registers to read) */
	ads1299_send_byte_no_cs(0x00);
8000270c:	30 0c       	mov	r12,0
8000270e:	f0 1f 00 60 	mcall	8000288c <ads1299_rreg+0x1b4>
	
	/* Dummy byte to clock in data */
	ads1299_send_byte_no_cs(DUMMY_BYTE);
80002712:	30 0c       	mov	r12,0
80002714:	f0 1f 00 5e 	mcall	8000288c <ads1299_rreg+0x1b4>
	
	delay_us(10);
80002718:	f0 1f 00 5e 	mcall	80002890 <ads1299_rreg+0x1b8>
8000271c:	18 98       	mov	r8,r12
8000271e:	30 a9       	mov	r9,10
80002720:	ef 49 ff e4 	st.w	r7[-28],r9
80002724:	ef 48 ff e0 	st.w	r7[-32],r8
80002728:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000272c:	ef 48 ff ec 	st.w	r7[-20],r8
80002730:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002734:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002738:	ee f0 ff ec 	ld.w	r0,r7[-20]
8000273c:	30 01       	mov	r1,0
8000273e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002742:	30 03       	mov	r3,0
80002744:	e2 02 02 4a 	mul	r10,r1,r2
80002748:	e6 00 02 48 	mul	r8,r3,r0
8000274c:	10 0a       	add	r10,r8
8000274e:	e0 02 06 48 	mulu.d	r8,r0,r2
80002752:	12 0a       	add	r10,r9
80002754:	14 99       	mov	r9,r10
80002756:	ee 7a 42 3f 	mov	r10,999999
8000275a:	30 0b       	mov	r11,0
8000275c:	f0 0a 00 0a 	add	r10,r8,r10
80002760:	f2 0b 00 4b 	adc	r11,r9,r11
80002764:	ee 78 42 40 	mov	r8,1000000
80002768:	30 09       	mov	r9,0
8000276a:	f0 1f 00 4b 	mcall	80002894 <ads1299_rreg+0x1bc>
8000276e:	14 98       	mov	r8,r10
80002770:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002772:	ef 48 ff f4 	st.w	r7[-12],r8
80002776:	ee c8 00 30 	sub	r8,r7,48
8000277a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000277e:	e1 b8 00 42 	mfsr	r8,0x108
80002782:	10 99       	mov	r9,r8
80002784:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002788:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000278a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000278e:	70 09       	ld.w	r9,r8[0x0]
80002790:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002794:	10 09       	add	r9,r8
80002796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000279a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000279c:	ee f9 ff f0 	ld.w	r9,r7[-16]
800027a0:	30 08       	mov	r8,0
800027a2:	f3 68 00 08 	st.b	r9[8],r8
800027a6:	ee c8 00 30 	sub	r8,r7,48
800027aa:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800027ae:	e1 b8 00 42 	mfsr	r8,0x108
800027b2:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800027b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027ba:	f1 39 00 08 	ld.ub	r9,r8[8]
800027be:	30 28       	mov	r8,2
800027c0:	f0 09 18 00 	cp.b	r9,r8
800027c4:	c0 31       	brne	800027ca <ads1299_rreg+0xf2>
    return false;
800027c6:	30 08       	mov	r8,0
800027c8:	c4 38       	rjmp	8000284e <ads1299_rreg+0x176>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800027ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027ce:	f1 39 00 08 	ld.ub	r9,r8[8]
800027d2:	30 18       	mov	r8,1
800027d4:	f0 09 18 00 	cp.b	r9,r8
800027d8:	c0 31       	brne	800027de <ads1299_rreg+0x106>
    return true;
800027da:	30 18       	mov	r8,1
800027dc:	c3 98       	rjmp	8000284e <ads1299_rreg+0x176>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027e2:	70 09       	ld.w	r9,r8[0x0]
800027e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027e8:	70 18       	ld.w	r8,r8[0x4]
800027ea:	10 39       	cp.w	r9,r8
800027ec:	e0 88 00 1a 	brls	80002820 <ads1299_rreg+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800027f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027f4:	70 08       	ld.w	r8,r8[0x0]
800027f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027fa:	10 39       	cp.w	r9,r8
800027fc:	c1 02       	brcc	8000281c <ads1299_rreg+0x144>
800027fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002802:	70 18       	ld.w	r8,r8[0x4]
80002804:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002808:	10 39       	cp.w	r9,r8
8000280a:	e0 88 00 09 	brls	8000281c <ads1299_rreg+0x144>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000280e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002812:	30 18       	mov	r8,1
80002814:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002818:	30 18       	mov	r8,1
8000281a:	c1 a8       	rjmp	8000284e <ads1299_rreg+0x176>
    }
    return false;
8000281c:	30 08       	mov	r8,0
8000281e:	c1 88       	rjmp	8000284e <ads1299_rreg+0x176>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002824:	70 08       	ld.w	r8,r8[0x0]
80002826:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000282a:	10 39       	cp.w	r9,r8
8000282c:	c0 93       	brcs	8000283e <ads1299_rreg+0x166>
8000282e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002832:	70 18       	ld.w	r8,r8[0x4]
80002834:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002838:	10 39       	cp.w	r9,r8
8000283a:	e0 88 00 09 	brls	8000284c <ads1299_rreg+0x174>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000283e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002842:	30 18       	mov	r8,1
80002844:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002848:	30 18       	mov	r8,1
8000284a:	c0 28       	rjmp	8000284e <ads1299_rreg+0x176>
    }
    return false;
8000284c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000284e:	58 08       	cp.w	r8,0
80002850:	ca b0       	breq	800027a6 <ads1299_rreg+0xce>
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002852:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002856:	10 9b       	mov	r11,r8
80002858:	fe 7c 40 00 	mov	r12,-49152
8000285c:	f0 1f 00 0f 	mcall	80002898 <ads1299_rreg+0x1c0>
	
	/* Read SPI RX register */
	read_data = spi_get(SPI_ADDRESS);
80002860:	fe 7c 40 00 	mov	r12,-49152
80002864:	f0 1f 00 0e 	mcall	8000289c <ads1299_rreg+0x1c4>
80002868:	18 98       	mov	r8,r12
8000286a:	5c 88       	casts.h	r8
8000286c:	ef 58 ff de 	st.h	r7[-34],r8
	*read_reg_val_ptr = (uint8_t) read_data;	
80002870:	ef 08 ff de 	ld.sh	r8,r7[-34]
80002874:	5c 58       	castu.b	r8
80002876:	ee f9 ff c4 	ld.w	r9,r7[-60]
8000287a:	b2 88       	st.b	r9[0x0],r8
		
	return ADS1299_STATUS_OK;
8000287c:	30 08       	mov	r8,0
	#else
	#endif /* #if UC3 */
}
8000287e:	10 9c       	mov	r12,r8
80002880:	2f 1d       	sub	sp,-60
80002882:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	3c 68       	mov	r8,-58
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	21 0c       	sub	r12,16
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	20 70       	sub	r0,7
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	71 50       	ld.w	r0,r8[0x54]
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	3d 00       	mov	r0,-48
8000289c:	80 00       	ld.sh	r0,r0[0x0]
8000289e:	20 aa       	sub	r10,10

800028a0 <ads1299_wreg>:

ads1299_error_t ads1299_wreg(uint8_t chip_select, uint8_t reg_addr, uint8_t reg_val_to_write)
{
800028a0:	eb cd 40 80 	pushm	r7,lr
800028a4:	1a 97       	mov	r7,sp
800028a6:	20 3d       	sub	sp,12
800028a8:	16 99       	mov	r9,r11
800028aa:	14 98       	mov	r8,r10
800028ac:	18 9a       	mov	r10,r12
800028ae:	ef 6a ff fc 	st.b	r7[-4],r10
800028b2:	ef 69 ff f8 	st.b	r7[-8],r9
800028b6:	ef 68 ff f4 	st.b	r7[-12],r8
	#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
800028ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800028be:	10 9b       	mov	r11,r8
800028c0:	fe 7c 40 00 	mov	r12,-49152
800028c4:	f0 1f 00 0f 	mcall	80002900 <ads1299_wreg+0x60>
	
	/* First byte: write command for specified register */
	ads1299_send_byte_no_cs(ADS1299_OPC_WREG | reg_addr);
800028c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800028cc:	a7 a8       	sbr	r8,0x6
800028ce:	5c 58       	castu.b	r8
800028d0:	10 9c       	mov	r12,r8
800028d2:	f0 1f 00 0d 	mcall	80002904 <ads1299_wreg+0x64>
	
	/* Second byte: number of registers to write (1) */
	ads1299_send_byte_no_cs(0x00);
800028d6:	30 0c       	mov	r12,0
800028d8:	f0 1f 00 0b 	mcall	80002904 <ads1299_wreg+0x64>
	
	/* Third byte: write register value */
	ads1299_send_byte_no_cs(reg_val_to_write);
800028dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800028e0:	10 9c       	mov	r12,r8
800028e2:	f0 1f 00 09 	mcall	80002904 <ads1299_wreg+0x64>
		
	spi_unselectChip(SPI_ADDRESS, chip_select);
800028e6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800028ea:	10 9b       	mov	r11,r8
800028ec:	fe 7c 40 00 	mov	r12,-49152
800028f0:	f0 1f 00 06 	mcall	80002908 <ads1299_wreg+0x68>
		
	return ADS1299_STATUS_OK;
800028f4:	30 08       	mov	r8,0
	#else
	#endif /* #if UC3 */
}
800028f6:	10 9c       	mov	r12,r8
800028f8:	2f dd       	sub	sp,-12
800028fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800028fe:	00 00       	add	r0,r0
80002900:	80 00       	ld.sh	r0,r0[0x0]
80002902:	3c 68       	mov	r8,-58
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	21 0c       	sub	r12,16
80002908:	80 00       	ld.sh	r0,r0[0x0]
8000290a:	3d 00       	mov	r0,-48

8000290c <ads1299_rdata24_packet>:
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_rdata24_packet(uint8_t chip_select, volatile uint32_t sample_idx, bboard_data24bit_packet_t* packet_ptr)
{
8000290c:	eb cd 40 80 	pushm	r7,lr
80002910:	1a 97       	mov	r7,sp
80002912:	20 4d       	sub	sp,16
80002914:	18 98       	mov	r8,r12
80002916:	ef 4b ff f4 	st.w	r7[-12],r11
8000291a:	ef 4a ff f0 	st.w	r7[-16],r10
8000291e:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile uint8_t channel_idx;
	
	uint8_t temp[3];
	
	/* Begin SPI comms */
	spi_selectChip(SPI_ADDRESS, chip_select);
80002922:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002926:	10 9b       	mov	r11,r8
80002928:	fe 7c 40 00 	mov	r12,-49152
8000292c:	f0 1f 00 45 	mcall	80002a40 <ads1299_rdata24_packet+0x134>
	
	/* Function assumes we've already sent RDATA command or are in RDATAC mode */
	
	/* Read in status word first (24 bits) */
	spi_read_packet(SPI_ADDRESS, temp, 3);
80002930:	ee c8 00 04 	sub	r8,r7,4
80002934:	30 3a       	mov	r10,3
80002936:	10 9b       	mov	r11,r8
80002938:	fe 7c 40 00 	mov	r12,-49152
8000293c:	f0 1f 00 42 	mcall	80002a44 <ads1299_rdata24_packet+0x138>
	packet_ptr->eegstatus[0] = temp[0];
80002940:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002944:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002948:	b2 b8       	st.b	r9[0x3],r8
	packet_ptr->eegstatus[1] = temp[1];
8000294a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000294e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002952:	b2 c8       	st.b	r9[0x4],r8
	packet_ptr->eegstatus[2] = temp[2];
80002954:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002958:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000295c:	b2 d8       	st.b	r9[0x5],r8
	
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
8000295e:	30 08       	mov	r8,0
80002960:	ef 68 ff ff 	st.b	r7[-1],r8
80002964:	c5 88       	rjmp	80002a14 <ads1299_rdata24_packet+0x108>
	{
		spi_read_packet(SPI_ADDRESS, temp, 3);
80002966:	ee c8 00 04 	sub	r8,r7,4
8000296a:	30 3a       	mov	r10,3
8000296c:	10 9b       	mov	r11,r8
8000296e:	fe 7c 40 00 	mov	r12,-49152
80002972:	f0 1f 00 35 	mcall	80002a44 <ads1299_rdata24_packet+0x138>
		packet_ptr->eegdata[sample_idx][channel_idx][0] = temp[0];
80002976:	ee fa ff f4 	ld.w	r10,r7[-12]
8000297a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000297e:	5c 58       	castu.b	r8
80002980:	ef 3b ff fc 	ld.ub	r11,r7[-4]
80002984:	ee fc ff f0 	ld.w	r12,r7[-16]
80002988:	10 99       	mov	r9,r8
8000298a:	a1 79       	lsl	r9,0x1
8000298c:	10 09       	add	r9,r8
8000298e:	14 98       	mov	r8,r10
80002990:	a1 78       	lsl	r8,0x1
80002992:	14 08       	add	r8,r10
80002994:	a3 78       	lsl	r8,0x3
80002996:	f2 08 00 08 	add	r8,r9,r8
8000299a:	f8 08 00 08 	add	r8,r12,r8
8000299e:	f0 c9 ff fa 	sub	r9,r8,-6
800029a2:	16 98       	mov	r8,r11
800029a4:	b2 88       	st.b	r9[0x0],r8
		packet_ptr->eegdata[sample_idx][channel_idx][1] = temp[1];
800029a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800029aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800029ae:	5c 58       	castu.b	r8
800029b0:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800029b4:	ee fc ff f0 	ld.w	r12,r7[-16]
800029b8:	10 99       	mov	r9,r8
800029ba:	a1 79       	lsl	r9,0x1
800029bc:	10 09       	add	r9,r8
800029be:	14 98       	mov	r8,r10
800029c0:	a1 78       	lsl	r8,0x1
800029c2:	14 08       	add	r8,r10
800029c4:	a3 78       	lsl	r8,0x3
800029c6:	f2 08 00 08 	add	r8,r9,r8
800029ca:	f8 08 00 08 	add	r8,r12,r8
800029ce:	f0 c9 ff f9 	sub	r9,r8,-7
800029d2:	16 98       	mov	r8,r11
800029d4:	b2 88       	st.b	r9[0x0],r8
		packet_ptr->eegdata[sample_idx][channel_idx][2] = temp[2];
800029d6:	ee fa ff f4 	ld.w	r10,r7[-12]
800029da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800029de:	5c 58       	castu.b	r8
800029e0:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800029e4:	ee fc ff f0 	ld.w	r12,r7[-16]
800029e8:	10 99       	mov	r9,r8
800029ea:	a1 79       	lsl	r9,0x1
800029ec:	10 09       	add	r9,r8
800029ee:	14 98       	mov	r8,r10
800029f0:	a1 78       	lsl	r8,0x1
800029f2:	14 08       	add	r8,r10
800029f4:	a3 78       	lsl	r8,0x3
800029f6:	f2 08 00 08 	add	r8,r9,r8
800029fa:	f8 08 00 08 	add	r8,r12,r8
800029fe:	f0 c9 ff f8 	sub	r9,r8,-8
80002a02:	16 98       	mov	r8,r11
80002a04:	b2 88       	st.b	r9[0x0],r8
	packet_ptr->eegstatus[0] = temp[0];
	packet_ptr->eegstatus[1] = temp[1];
	packet_ptr->eegstatus[2] = temp[2];
	
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
80002a06:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002a0a:	5c 58       	castu.b	r8
80002a0c:	2f f8       	sub	r8,-1
80002a0e:	5c 58       	castu.b	r8
80002a10:	ef 68 ff ff 	st.b	r7[-1],r8
80002a14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002a18:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a1c:	30 78       	mov	r8,7
80002a1e:	f0 09 18 00 	cp.b	r9,r8
80002a22:	fe 98 ff a2 	brls	80002966 <ads1299_rdata24_packet+0x5a>
		packet_ptr->eegdata[sample_idx][channel_idx][0] = temp[0];
		packet_ptr->eegdata[sample_idx][channel_idx][1] = temp[1];
		packet_ptr->eegdata[sample_idx][channel_idx][2] = temp[2];
	}
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002a26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002a2a:	10 9b       	mov	r11,r8
80002a2c:	fe 7c 40 00 	mov	r12,-49152
80002a30:	f0 1f 00 06 	mcall	80002a48 <ads1299_rdata24_packet+0x13c>
	
	#else
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
80002a34:	30 08       	mov	r8,0
}
80002a36:	10 9c       	mov	r12,r8
80002a38:	2f cd       	sub	sp,-16
80002a3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a3e:	00 00       	add	r0,r0
80002a40:	80 00       	ld.sh	r0,r0[0x0]
80002a42:	3c 68       	mov	r8,-58
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	54 cc       	stdsp	sp[0x130],r12
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	3d 00       	mov	r0,-48

80002a4c <ads1299_rdata32_generic>:
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_rdata32_generic(uint8_t chip_select, volatile uint32_t sample_idx, volatile uint32_t status, volatile int32_t data_array[][MAX_EEG_CHANNELS])
{
80002a4c:	eb cd 40 80 	pushm	r7,lr
80002a50:	1a 97       	mov	r7,sp
80002a52:	20 7d       	sub	sp,28
80002a54:	18 98       	mov	r8,r12
80002a56:	ef 4b ff ec 	st.w	r7[-20],r11
80002a5a:	ef 4a ff e8 	st.w	r7[-24],r10
80002a5e:	ef 49 ff e4 	st.w	r7[-28],r9
80002a62:	ef 68 ff f0 	st.b	r7[-16],r8
	} __attribute__((packed)) statustemp;
	union {
		int32_t raw;
		uint8_t data[4];
	} __attribute__((packed)) sigtemp;
	statustemp.raw = 0;
80002a66:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002a6a:	e2 18 00 00 	andl	r8,0x0,COH
80002a6e:	ef 68 ff fb 	st.b	r7[-5],r8
80002a72:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002a76:	e2 18 00 00 	andl	r8,0x0,COH
80002a7a:	ef 68 ff fc 	st.b	r7[-4],r8
80002a7e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002a82:	e2 18 00 00 	andl	r8,0x0,COH
80002a86:	ef 68 ff fd 	st.b	r7[-3],r8
80002a8a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002a8e:	e2 18 00 00 	andl	r8,0x0,COH
80002a92:	ef 68 ff fe 	st.b	r7[-2],r8
	sigtemp.raw = 0;
80002a96:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002a9a:	e2 18 00 00 	andl	r8,0x0,COH
80002a9e:	ef 68 ff f7 	st.b	r7[-9],r8
80002aa2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002aa6:	e2 18 00 00 	andl	r8,0x0,COH
80002aaa:	ef 68 ff f8 	st.b	r7[-8],r8
80002aae:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80002ab2:	e2 18 00 00 	andl	r8,0x0,COH
80002ab6:	ef 68 ff f9 	st.b	r7[-7],r8
80002aba:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80002abe:	e2 18 00 00 	andl	r8,0x0,COH
80002ac2:	ef 68 ff fa 	st.b	r7[-6],r8
	
	/* Begin SPI comms */
	spi_selectChip(SPI_ADDRESS, chip_select);
80002ac6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002aca:	10 9b       	mov	r11,r8
80002acc:	fe 7c 40 00 	mov	r12,-49152
80002ad0:	f0 1f 00 35 	mcall	80002ba4 <ads1299_rdata32_generic+0x158>
	
	/* Function assumes we've already sent RDATA command or are in RDATAC mode */
	
	/* Read in status word first (24 bits) */
	spi_read_packet(SPI_ADDRESS, &statustemp.status[1], 3);
80002ad4:	ee c8 00 05 	sub	r8,r7,5
80002ad8:	2f f8       	sub	r8,-1
80002ada:	30 3a       	mov	r10,3
80002adc:	10 9b       	mov	r11,r8
80002ade:	fe 7c 40 00 	mov	r12,-49152
80002ae2:	f0 1f 00 32 	mcall	80002ba8 <ads1299_rdata32_generic+0x15c>
	status = statustemp.raw;
80002ae6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002aea:	b9 68       	lsl	r8,0x18
80002aec:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80002af0:	b1 69       	lsl	r9,0x10
80002af2:	f3 e8 10 08 	or	r8,r9,r8
80002af6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002afa:	a9 69       	lsl	r9,0x8
80002afc:	f3 e8 10 08 	or	r8,r9,r8
80002b00:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80002b04:	f3 e8 10 08 	or	r8,r9,r8
80002b08:	ef 48 ff e8 	st.w	r7[-24],r8
	
	/* Begin reading in data */
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
80002b0c:	30 08       	mov	r8,0
80002b0e:	ef 68 ff ff 	st.b	r7[-1],r8
80002b12:	c3 48       	rjmp	80002b7a <ads1299_rdata32_generic+0x12e>
	{
		spi_read_packet(SPI_ADDRESS, &sigtemp.data[1], 3);
80002b14:	ee c8 00 09 	sub	r8,r7,9
80002b18:	2f f8       	sub	r8,-1
80002b1a:	30 3a       	mov	r10,3
80002b1c:	10 9b       	mov	r11,r8
80002b1e:	fe 7c 40 00 	mov	r12,-49152
80002b22:	f0 1f 00 22 	mcall	80002ba8 <ads1299_rdata32_generic+0x15c>
		data_array[sample_idx][channel_idx] = SIGN_EXT_24(sigtemp.raw);
80002b26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002b2a:	a5 78       	lsl	r8,0x5
80002b2c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002b30:	10 09       	add	r9,r8
80002b32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b36:	5c 58       	castu.b	r8
80002b38:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80002b3c:	b9 6a       	lsl	r10,0x18
80002b3e:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80002b42:	b1 6b       	lsl	r11,0x10
80002b44:	f7 ea 10 0a 	or	r10,r11,r10
80002b48:	ef 3b ff f9 	ld.ub	r11,r7[-7]
80002b4c:	a9 6b       	lsl	r11,0x8
80002b4e:	f7 ea 10 0a 	or	r10,r11,r10
80002b52:	ef 3b ff fa 	ld.ub	r11,r7[-6]
80002b56:	f7 ea 10 0a 	or	r10,r11,r10
80002b5a:	ee 1a 00 80 	eorh	r10,0x80
80002b5e:	14 9b       	mov	r11,r10
80002b60:	fc 1a ff 80 	movh	r10,0xff80
80002b64:	f6 0a 00 0a 	add	r10,r11,r10
80002b68:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
	spi_read_packet(SPI_ADDRESS, &statustemp.status[1], 3);
	status = statustemp.raw;
	
	/* Begin reading in data */
	/* Begin reading in data */
	for (channel_idx = 0; channel_idx < MAX_EEG_CHANNELS; channel_idx++)
80002b6c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b70:	5c 58       	castu.b	r8
80002b72:	2f f8       	sub	r8,-1
80002b74:	5c 58       	castu.b	r8
80002b76:	ef 68 ff ff 	st.b	r7[-1],r8
80002b7a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b7e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b82:	30 78       	mov	r8,7
80002b84:	f0 09 18 00 	cp.b	r9,r8
80002b88:	fe 98 ff c6 	brls	80002b14 <ads1299_rdata32_generic+0xc8>
	{
		spi_read_packet(SPI_ADDRESS, &sigtemp.data[1], 3);
		data_array[sample_idx][channel_idx] = SIGN_EXT_24(sigtemp.raw);
	}
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80002b8c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002b90:	10 9b       	mov	r11,r8
80002b92:	fe 7c 40 00 	mov	r12,-49152
80002b96:	f0 1f 00 06 	mcall	80002bac <ads1299_rdata32_generic+0x160>
	
	#else
	#endif	/* #if UC3 */
	return ADS1299_STATUS_OK;
80002b9a:	30 08       	mov	r8,0
}
80002b9c:	10 9c       	mov	r12,r8
80002b9e:	2f 9d       	sub	sp,-28
80002ba0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	3c 68       	mov	r8,-58
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	54 cc       	stdsp	sp[0x130],r12
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	3d 00       	mov	r0,-48

80002bb0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80002bb0:	eb cd 40 80 	pushm	r7,lr
80002bb4:	1a 97       	mov	r7,sp
80002bb6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	e1 b8 00 00 	mfsr	r8,0x0
80002bbc:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80002bc0:	d3 03       	ssrf	0x10

	return flags;
80002bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002bc6:	10 9c       	mov	r12,r8
80002bc8:	2f fd       	sub	sp,-4
80002bca:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bce <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002bce:	eb cd 40 80 	pushm	r7,lr
80002bd2:	1a 97       	mov	r7,sp
80002bd4:	20 1d       	sub	sp,4
80002bd6:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002bda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bde:	e6 18 00 01 	andh	r8,0x1,COH
80002be2:	5f 08       	sreq	r8
80002be4:	5c 58       	castu.b	r8
}
80002be6:	10 9c       	mov	r12,r8
80002be8:	2f fd       	sub	sp,-4
80002bea:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bee:	d7 03       	nop

80002bf0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80002bf0:	eb cd 40 80 	pushm	r7,lr
80002bf4:	1a 97       	mov	r7,sp
80002bf6:	20 1d       	sub	sp,4
80002bf8:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bfc:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c00:	f0 1f 00 05 	mcall	80002c14 <cpu_irq_restore+0x24>
80002c04:	18 98       	mov	r8,r12
80002c06:	58 08       	cp.w	r8,0
80002c08:	c0 20       	breq	80002c0c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80002c0a:	d5 03       	csrf	0x10
   }

	barrier();
}
80002c0c:	2f fd       	sub	sp,-4
80002c0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c12:	00 00       	add	r0,r0
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2b ce       	sub	lr,-68

80002c18 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002c18:	eb cd 40 80 	pushm	r7,lr
80002c1c:	1a 97       	mov	r7,sp
80002c1e:	20 4d       	sub	sp,16
80002c20:	ef 4c ff f8 	st.w	r7[-8],r12
80002c24:	ef 4b ff f4 	st.w	r7[-12],r11
80002c28:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
80002c2c:	30 08       	mov	r8,0
80002c2e:	ef 48 ff fc 	st.w	r7[-4],r8
80002c32:	c2 89       	rjmp	80002e82 <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002c34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c38:	12 98       	mov	r8,r9
80002c3a:	a1 78       	lsl	r8,0x1
80002c3c:	12 08       	add	r8,r9
80002c3e:	a1 78       	lsl	r8,0x1
80002c40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c44:	f2 08 00 08 	add	r8,r9,r8
80002c48:	11 99       	ld.ub	r9,r8[0x1]
80002c4a:	30 18       	mov	r8,1
80002c4c:	f0 09 18 00 	cp.b	r9,r8
80002c50:	c1 51       	brne	80002c7a <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
80002c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c56:	70 5a       	ld.w	r10,r8[0x14]
80002c58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c5c:	12 98       	mov	r8,r9
80002c5e:	a1 78       	lsl	r8,0x1
80002c60:	12 08       	add	r8,r9
80002c62:	a1 78       	lsl	r8,0x1
80002c64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c68:	f2 08 00 08 	add	r8,r9,r8
80002c6c:	11 88       	ld.ub	r8,r8[0x0]
80002c6e:	30 19       	mov	r9,1
80002c70:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002c74:	f5 e8 10 08 	or	r8,r10,r8
80002c78:	c1 58       	rjmp	80002ca2 <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80002c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c7e:	70 5a       	ld.w	r10,r8[0x14]
80002c80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c84:	12 98       	mov	r8,r9
80002c86:	a1 78       	lsl	r8,0x1
80002c88:	12 08       	add	r8,r9
80002c8a:	a1 78       	lsl	r8,0x1
80002c8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c90:	f2 08 00 08 	add	r8,r9,r8
80002c94:	11 88       	ld.ub	r8,r8[0x0]
80002c96:	30 19       	mov	r9,1
80002c98:	f2 08 09 48 	lsl	r8,r9,r8
80002c9c:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002c9e:	f5 e8 00 08 	and	r8,r10,r8
80002ca2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca6:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002ca8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cac:	12 98       	mov	r8,r9
80002cae:	a1 78       	lsl	r8,0x1
80002cb0:	12 08       	add	r8,r9
80002cb2:	a1 78       	lsl	r8,0x1
80002cb4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002cb8:	f2 08 00 08 	add	r8,r9,r8
80002cbc:	11 a9       	ld.ub	r9,r8[0x2]
80002cbe:	30 18       	mov	r8,1
80002cc0:	f0 09 18 00 	cp.b	r9,r8
80002cc4:	c1 51       	brne	80002cee <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80002cc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cca:	70 6a       	ld.w	r10,r8[0x18]
80002ccc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cd0:	12 98       	mov	r8,r9
80002cd2:	a1 78       	lsl	r8,0x1
80002cd4:	12 08       	add	r8,r9
80002cd6:	a1 78       	lsl	r8,0x1
80002cd8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002cdc:	f2 08 00 08 	add	r8,r9,r8
80002ce0:	11 88       	ld.ub	r8,r8[0x0]
80002ce2:	30 19       	mov	r9,1
80002ce4:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002ce8:	f5 e8 10 08 	or	r8,r10,r8
80002cec:	c1 58       	rjmp	80002d16 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80002cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cf2:	70 6a       	ld.w	r10,r8[0x18]
80002cf4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cf8:	12 98       	mov	r8,r9
80002cfa:	a1 78       	lsl	r8,0x1
80002cfc:	12 08       	add	r8,r9
80002cfe:	a1 78       	lsl	r8,0x1
80002d00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d04:	f2 08 00 08 	add	r8,r9,r8
80002d08:	11 88       	ld.ub	r8,r8[0x0]
80002d0a:	30 19       	mov	r9,1
80002d0c:	f2 08 09 48 	lsl	r8,r9,r8
80002d10:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80002d12:	f5 e8 00 08 	and	r8,r10,r8
80002d16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d1a:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d20:	12 98       	mov	r8,r9
80002d22:	a1 78       	lsl	r8,0x1
80002d24:	12 08       	add	r8,r9
80002d26:	a1 78       	lsl	r8,0x1
80002d28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d2c:	f2 08 00 08 	add	r8,r9,r8
80002d30:	11 b9       	ld.ub	r9,r8[0x3]
80002d32:	30 18       	mov	r8,1
80002d34:	f0 09 18 00 	cp.b	r9,r8
80002d38:	c1 51       	brne	80002d62 <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
80002d3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d3e:	70 7a       	ld.w	r10,r8[0x1c]
80002d40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d44:	12 98       	mov	r8,r9
80002d46:	a1 78       	lsl	r8,0x1
80002d48:	12 08       	add	r8,r9
80002d4a:	a1 78       	lsl	r8,0x1
80002d4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d50:	f2 08 00 08 	add	r8,r9,r8
80002d54:	11 88       	ld.ub	r8,r8[0x0]
80002d56:	30 19       	mov	r9,1
80002d58:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d5c:	f5 e8 10 08 	or	r8,r10,r8
80002d60:	c1 58       	rjmp	80002d8a <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80002d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d66:	70 7a       	ld.w	r10,r8[0x1c]
80002d68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d6c:	12 98       	mov	r8,r9
80002d6e:	a1 78       	lsl	r8,0x1
80002d70:	12 08       	add	r8,r9
80002d72:	a1 78       	lsl	r8,0x1
80002d74:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d78:	f2 08 00 08 	add	r8,r9,r8
80002d7c:	11 88       	ld.ub	r8,r8[0x0]
80002d7e:	30 19       	mov	r9,1
80002d80:	f2 08 09 48 	lsl	r8,r9,r8
80002d84:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80002d86:	f5 e8 00 08 	and	r8,r10,r8
80002d8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d8e:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002d90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d94:	12 98       	mov	r8,r9
80002d96:	a1 78       	lsl	r8,0x1
80002d98:	12 08       	add	r8,r9
80002d9a:	a1 78       	lsl	r8,0x1
80002d9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002da0:	f2 08 00 08 	add	r8,r9,r8
80002da4:	11 c9       	ld.ub	r9,r8[0x4]
80002da6:	30 18       	mov	r8,1
80002da8:	f0 09 18 00 	cp.b	r9,r8
80002dac:	c1 51       	brne	80002dd6 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
80002dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002db2:	70 8a       	ld.w	r10,r8[0x20]
80002db4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002db8:	12 98       	mov	r8,r9
80002dba:	a1 78       	lsl	r8,0x1
80002dbc:	12 08       	add	r8,r9
80002dbe:	a1 78       	lsl	r8,0x1
80002dc0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002dc4:	f2 08 00 08 	add	r8,r9,r8
80002dc8:	11 88       	ld.ub	r8,r8[0x0]
80002dca:	30 19       	mov	r9,1
80002dcc:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002dd0:	f5 e8 10 08 	or	r8,r10,r8
80002dd4:	c1 58       	rjmp	80002dfe <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80002dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dda:	70 8a       	ld.w	r10,r8[0x20]
80002ddc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002de0:	12 98       	mov	r8,r9
80002de2:	a1 78       	lsl	r8,0x1
80002de4:	12 08       	add	r8,r9
80002de6:	a1 78       	lsl	r8,0x1
80002de8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002dec:	f2 08 00 08 	add	r8,r9,r8
80002df0:	11 88       	ld.ub	r8,r8[0x0]
80002df2:	30 19       	mov	r9,1
80002df4:	f2 08 09 48 	lsl	r8,r9,r8
80002df8:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80002dfa:	f5 e8 00 08 	and	r8,r10,r8
80002dfe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e02:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002e04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e08:	12 98       	mov	r8,r9
80002e0a:	a1 78       	lsl	r8,0x1
80002e0c:	12 08       	add	r8,r9
80002e0e:	a1 78       	lsl	r8,0x1
80002e10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002e14:	f2 08 00 08 	add	r8,r9,r8
80002e18:	11 d9       	ld.ub	r9,r8[0x5]
80002e1a:	30 18       	mov	r8,1
80002e1c:	f0 09 18 00 	cp.b	r9,r8
80002e20:	c1 51       	brne	80002e4a <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
80002e22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e26:	70 aa       	ld.w	r10,r8[0x28]
80002e28:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e2c:	12 98       	mov	r8,r9
80002e2e:	a1 78       	lsl	r8,0x1
80002e30:	12 08       	add	r8,r9
80002e32:	a1 78       	lsl	r8,0x1
80002e34:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002e38:	f2 08 00 08 	add	r8,r9,r8
80002e3c:	11 88       	ld.ub	r8,r8[0x0]
80002e3e:	30 19       	mov	r9,1
80002e40:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002e44:	f5 e8 10 08 	or	r8,r10,r8
80002e48:	c1 58       	rjmp	80002e72 <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80002e4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e4e:	70 aa       	ld.w	r10,r8[0x28]
80002e50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e54:	12 98       	mov	r8,r9
80002e56:	a1 78       	lsl	r8,0x1
80002e58:	12 08       	add	r8,r9
80002e5a:	a1 78       	lsl	r8,0x1
80002e5c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002e60:	f2 08 00 08 	add	r8,r9,r8
80002e64:	11 88       	ld.ub	r8,r8[0x0]
80002e66:	30 19       	mov	r9,1
80002e68:	f2 08 09 48 	lsl	r8,r9,r8
80002e6c:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80002e6e:	f5 e8 00 08 	and	r8,r10,r8
80002e72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e76:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80002e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e7c:	2f f8       	sub	r8,-1
80002e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80002e82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002e8a:	10 39       	cp.w	r9,r8
80002e8c:	fe 93 fe d4 	brlo	80002c34 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
80002e90:	2f cd       	sub	sp,-16
80002e92:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e96 <eic_enable_line>:
{
	eic->en = mask_lines;
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80002e96:	eb cd 40 80 	pushm	r7,lr
80002e9a:	1a 97       	mov	r7,sp
80002e9c:	20 2d       	sub	sp,8
80002e9e:	ef 4c ff fc 	st.w	r7[-4],r12
80002ea2:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80002ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eaa:	30 19       	mov	r9,1
80002eac:	f2 08 09 48 	lsl	r8,r9,r8
80002eb0:	10 99       	mov	r9,r8
80002eb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002eb6:	91 c9       	st.w	r8[0x30],r9
}
80002eb8:	2f ed       	sub	sp,-8
80002eba:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ebe <eic_enable_interrupt_line>:
{
	eic->ier = mask_lines;
}

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80002ebe:	eb cd 40 80 	pushm	r7,lr
80002ec2:	1a 97       	mov	r7,sp
80002ec4:	20 2d       	sub	sp,8
80002ec6:	ef 4c ff fc 	st.w	r7[-4],r12
80002eca:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
80002ece:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ed2:	30 19       	mov	r9,1
80002ed4:	f2 08 09 48 	lsl	r8,r9,r8
80002ed8:	10 99       	mov	r9,r8
80002eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ede:	91 09       	st.w	r8[0x0],r9
}
80002ee0:	2f ed       	sub	sp,-8
80002ee2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ee6:	d7 03       	nop

80002ee8 <eic_clear_interrupt_line>:
	eic->isr;
	cpu_irq_restore(flags);
}

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80002ee8:	eb cd 40 80 	pushm	r7,lr
80002eec:	1a 97       	mov	r7,sp
80002eee:	20 3d       	sub	sp,12
80002ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80002ef4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80002ef8:	f0 1f 00 0c 	mcall	80002f28 <eic_clear_interrupt_line+0x40>
80002efc:	18 98       	mov	r8,r12
80002efe:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80002f02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f06:	30 19       	mov	r9,1
80002f08:	f2 08 09 48 	lsl	r8,r9,r8
80002f0c:	10 99       	mov	r9,r8
80002f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f12:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80002f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f18:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80002f1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80002f1e:	f0 1f 00 04 	mcall	80002f2c <eic_clear_interrupt_line+0x44>
}
80002f22:	2f dd       	sub	sp,-12
80002f24:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2b b0       	sub	r0,-69
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	2b f0       	sub	r0,-65

80002f30 <flashcdw_set_wait_state>:
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80002f30:	eb cd 40 80 	pushm	r7,lr
80002f34:	1a 97       	mov	r7,sp
80002f36:	20 2d       	sub	sp,8
80002f38:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002f3c:	fe 68 00 00 	mov	r8,-131072
80002f40:	70 08       	ld.w	r8,r8[0x0]
80002f42:	30 09       	mov	r9,0
80002f44:	ef 49 ff fc 	st.w	r7[-4],r9
80002f48:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f50:	5c 58       	castu.b	r8
80002f52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f5e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002f62:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80002f66:	fe 68 00 00 	mov	r8,-131072
80002f6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f6e:	91 09       	st.w	r8[0x0],r9
}
80002f70:	2f ed       	sub	sp,-8
80002f72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f76:	d7 03       	nop

80002f78 <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002f78:	eb cd 40 80 	pushm	r7,lr
80002f7c:	1a 97       	mov	r7,sp
80002f7e:	20 1d       	sub	sp,4
80002f80:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80002f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f88:	e0 69 e1 c0 	mov	r9,57792
80002f8c:	ea 19 00 e4 	orh	r9,0xe4
80002f90:	12 38       	cp.w	r8,r9
80002f92:	e0 88 00 1b 	brls	80002fc8 <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
80002f96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f9a:	e0 69 c3 80 	mov	r9,50048
80002f9e:	ea 19 01 c9 	orh	r9,0x1c9
80002fa2:	12 38       	cp.w	r8,r9
80002fa4:	e0 8b 00 0a 	brhi	80002fb8 <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
80002fa8:	30 1c       	mov	r12,1
80002faa:	f0 1f 00 0d 	mcall	80002fdc <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002fae:	3f fb       	mov	r11,-1
80002fb0:	31 1c       	mov	r12,17
80002fb2:	f0 1f 00 0c 	mcall	80002fe0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80002fb6:	c1 08       	rjmp	80002fd6 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
80002fb8:	30 1c       	mov	r12,1
80002fba:	f0 1f 00 09 	mcall	80002fdc <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80002fbe:	3f fb       	mov	r11,-1
80002fc0:	31 0c       	mov	r12,16
80002fc2:	f0 1f 00 08 	mcall	80002fe0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
80002fc6:	c0 88       	rjmp	80002fd6 <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
80002fc8:	30 0c       	mov	r12,0
80002fca:	f0 1f 00 05 	mcall	80002fdc <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002fce:	3f fb       	mov	r11,-1
80002fd0:	31 1c       	mov	r12,17
80002fd2:	f0 1f 00 04 	mcall	80002fe0 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
80002fd6:	2f fd       	sub	sp,-4
80002fd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	2f 30       	sub	r0,-13
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	30 30       	mov	r0,3

80002fe4 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
80002fe4:	eb cd 40 80 	pushm	r7,lr
80002fe8:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
80002fea:	fe 68 00 00 	mov	r8,-131072
80002fee:	70 28       	ld.w	r8,r8[0x8]
80002ff0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ff4:	5c 58       	castu.b	r8
}
80002ff6:	10 9c       	mov	r12,r8
80002ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ffc <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
80002ffc:	eb cd 40 80 	pushm	r7,lr
80003000:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
80003002:	f0 1f 00 05 	mcall	80003014 <flashcdw_default_wait_until_ready+0x18>
80003006:	18 98       	mov	r8,r12
80003008:	ec 18 00 01 	eorl	r8,0x1
8000300c:	5c 58       	castu.b	r8
8000300e:	cf a1       	brne	80003002 <flashcdw_default_wait_until_ready+0x6>
}
80003010:	e3 cd 80 80 	ldm	sp++,r7,pc
80003014:	80 00       	ld.sh	r0,r0[0x0]
80003016:	2f e4       	sub	r4,-2

80003018 <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
80003018:	eb cd 40 80 	pushm	r7,lr
8000301c:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
8000301e:	fe 68 00 00 	mov	r8,-131072
80003022:	70 28       	ld.w	r8,r8[0x8]
80003024:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
80003028:	10 9c       	mov	r12,r8
8000302a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000302e:	d7 03       	nop

80003030 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80003030:	eb cd 40 80 	pushm	r7,lr
80003034:	1a 97       	mov	r7,sp
80003036:	20 3d       	sub	sp,12
80003038:	ef 4c ff f8 	st.w	r7[-8],r12
8000303c:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80003040:	49 b8       	lddpc	r8,800030ac <flashcdw_issue_command+0x7c>
80003042:	70 08       	ld.w	r8,r8[0x0]
80003044:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
80003046:	fe 68 00 00 	mov	r8,-131072
8000304a:	70 18       	ld.w	r8,r8[0x4]
8000304c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80003050:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003054:	5c 58       	castu.b	r8
80003056:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000305a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000305e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003062:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003066:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000306a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000306e:	58 08       	cp.w	r8,0
80003070:	c0 b5       	brlt	80003086 <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80003072:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003076:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000307a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000307e:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003082:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80003086:	3a 58       	mov	r8,-91
80003088:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
8000308c:	fe 68 00 00 	mov	r8,-131072
80003090:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003094:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
80003096:	f0 1f 00 07 	mcall	800030b0 <flashcdw_issue_command+0x80>
8000309a:	18 99       	mov	r9,r12
8000309c:	48 68       	lddpc	r8,800030b4 <flashcdw_issue_command+0x84>
8000309e:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
800030a0:	48 38       	lddpc	r8,800030ac <flashcdw_issue_command+0x7c>
800030a2:	70 08       	ld.w	r8,r8[0x0]
800030a4:	5d 18       	icall	r8
}
800030a6:	2f dd       	sub	sp,-12
800030a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800030ac:	00 00       	add	r0,r0
800030ae:	00 04       	add	r4,r0
800030b0:	80 00       	ld.sh	r0,r0[0x0]
800030b2:	30 18       	mov	r8,1
800030b4:	00 00       	add	r0,r0
800030b6:	00 38       	cp.w	r8,r0

800030b8 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800030b8:	eb cd 40 80 	pushm	r7,lr
800030bc:	1a 97       	mov	r7,sp
800030be:	20 3d       	sub	sp,12
800030c0:	ef 4c ff f8 	st.w	r7[-8],r12
800030c4:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800030c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030cc:	a5 98       	lsr	r8,0x5
800030ce:	a9 78       	lsl	r8,0x9
800030d0:	e0 28 d4 00 	sub	r8,54272
800030d4:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800030d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030dc:	58 78       	cp.w	r8,7
800030de:	e0 8b 01 16 	brhi	8000330a <gpio_enable_module_pin+0x252>
800030e2:	fe f9 02 4e 	ld.w	r9,pc[590]
800030e6:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800030ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800030f2:	30 19       	mov	r9,1
800030f4:	f2 08 09 48 	lsl	r8,r9,r8
800030f8:	10 99       	mov	r9,r8
800030fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030fe:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003108:	30 19       	mov	r9,1
8000310a:	f2 08 09 48 	lsl	r8,r9,r8
8000310e:	10 99       	mov	r9,r8
80003110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003114:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000311a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000311e:	30 19       	mov	r9,1
80003120:	f2 08 09 48 	lsl	r8,r9,r8
80003124:	10 99       	mov	r9,r8
80003126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000312a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000312c:	cf 18       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000312e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003132:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003136:	30 19       	mov	r9,1
80003138:	f2 08 09 48 	lsl	r8,r9,r8
8000313c:	10 99       	mov	r9,r8
8000313e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003142:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003148:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000314c:	30 19       	mov	r9,1
8000314e:	f2 08 09 48 	lsl	r8,r9,r8
80003152:	10 99       	mov	r9,r8
80003154:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003158:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000315a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000315e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003162:	30 19       	mov	r9,1
80003164:	f2 08 09 48 	lsl	r8,r9,r8
80003168:	10 99       	mov	r9,r8
8000316a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000316e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003170:	cc f8       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003176:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000317a:	30 19       	mov	r9,1
8000317c:	f2 08 09 48 	lsl	r8,r9,r8
80003180:	10 99       	mov	r9,r8
80003182:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003186:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000318c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003190:	30 19       	mov	r9,1
80003192:	f2 08 09 48 	lsl	r8,r9,r8
80003196:	10 99       	mov	r9,r8
80003198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000319c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000319e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800031a6:	30 19       	mov	r9,1
800031a8:	f2 08 09 48 	lsl	r8,r9,r8
800031ac:	10 99       	mov	r9,r8
800031ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031b2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800031b4:	ca d8       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800031b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800031be:	30 19       	mov	r9,1
800031c0:	f2 08 09 48 	lsl	r8,r9,r8
800031c4:	10 99       	mov	r9,r8
800031c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ca:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800031cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800031d4:	30 19       	mov	r9,1
800031d6:	f2 08 09 48 	lsl	r8,r9,r8
800031da:	10 99       	mov	r9,r8
800031dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031e0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800031e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800031ea:	30 19       	mov	r9,1
800031ec:	f2 08 09 48 	lsl	r8,r9,r8
800031f0:	10 99       	mov	r9,r8
800031f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800031f8:	c8 b8       	rjmp	8000330e <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800031fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003202:	30 19       	mov	r9,1
80003204:	f2 08 09 48 	lsl	r8,r9,r8
80003208:	10 99       	mov	r9,r8
8000320a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000320e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003214:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003218:	30 19       	mov	r9,1
8000321a:	f2 08 09 48 	lsl	r8,r9,r8
8000321e:	10 99       	mov	r9,r8
80003220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003224:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000322a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000322e:	30 19       	mov	r9,1
80003230:	f2 08 09 48 	lsl	r8,r9,r8
80003234:	10 99       	mov	r9,r8
80003236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000323a:	91 d9       	st.w	r8[0x34],r9
		break;
8000323c:	c6 98       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000323e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003242:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003246:	30 19       	mov	r9,1
80003248:	f2 08 09 48 	lsl	r8,r9,r8
8000324c:	10 99       	mov	r9,r8
8000324e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003252:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003254:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003258:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000325c:	30 19       	mov	r9,1
8000325e:	f2 08 09 48 	lsl	r8,r9,r8
80003262:	10 99       	mov	r9,r8
80003264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003268:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000326a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000326e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003272:	30 19       	mov	r9,1
80003274:	f2 08 09 48 	lsl	r8,r9,r8
80003278:	10 99       	mov	r9,r8
8000327a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000327e:	91 d9       	st.w	r8[0x34],r9
		break;
80003280:	c4 78       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003282:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003286:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000328a:	30 19       	mov	r9,1
8000328c:	f2 08 09 48 	lsl	r8,r9,r8
80003290:	10 99       	mov	r9,r8
80003292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003296:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000329c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032a0:	30 19       	mov	r9,1
800032a2:	f2 08 09 48 	lsl	r8,r9,r8
800032a6:	10 99       	mov	r9,r8
800032a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ac:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800032ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032b6:	30 19       	mov	r9,1
800032b8:	f2 08 09 48 	lsl	r8,r9,r8
800032bc:	10 99       	mov	r9,r8
800032be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c2:	91 d9       	st.w	r8[0x34],r9
		break;
800032c4:	c2 58       	rjmp	8000330e <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800032c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032ce:	30 19       	mov	r9,1
800032d0:	f2 08 09 48 	lsl	r8,r9,r8
800032d4:	10 99       	mov	r9,r8
800032d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032da:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800032dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032e4:	30 19       	mov	r9,1
800032e6:	f2 08 09 48 	lsl	r8,r9,r8
800032ea:	10 99       	mov	r9,r8
800032ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800032f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032fa:	30 19       	mov	r9,1
800032fc:	f2 08 09 48 	lsl	r8,r9,r8
80003300:	10 99       	mov	r9,r8
80003302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003306:	91 d9       	st.w	r8[0x34],r9
		break;
80003308:	c0 38       	rjmp	8000330e <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000330a:	30 18       	mov	r8,1
8000330c:	c0 d8       	rjmp	80003326 <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000330e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003312:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003316:	30 19       	mov	r9,1
80003318:	f2 08 09 48 	lsl	r8,r9,r8
8000331c:	10 99       	mov	r9,r8
8000331e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003322:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80003324:	30 08       	mov	r8,0
}
80003326:	10 9c       	mov	r12,r8
80003328:	2f dd       	sub	sp,-12
8000332a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332e:	00 00       	add	r0,r0
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	76 00       	ld.w	r0,r11[0x0]

80003334 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80003334:	eb cd 40 80 	pushm	r7,lr
80003338:	1a 97       	mov	r7,sp
8000333a:	20 2d       	sub	sp,8
8000333c:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003340:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003344:	a5 98       	lsr	r8,0x5
80003346:	a9 78       	lsl	r8,0x9
80003348:	e0 28 d4 00 	sub	r8,54272
8000334c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80003350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003354:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003358:	30 19       	mov	r9,1
8000335a:	f2 08 09 48 	lsl	r8,r9,r8
8000335e:	10 99       	mov	r9,r8
80003360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003364:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
80003368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000336c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003370:	30 19       	mov	r9,1
80003372:	f2 08 09 48 	lsl	r8,r9,r8
80003376:	10 99       	mov	r9,r8
80003378:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000337c:	91 19       	st.w	r8[0x4],r9
}
8000337e:	2f ed       	sub	sp,-8
80003380:	e3 cd 80 80 	ldm	sp++,r7,pc

80003384 <gpio_enable_pin_pull_up>:
/** \brief Enables the pull-up resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 2d       	sub	sp,8
8000338c:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003394:	a5 98       	lsr	r8,0x5
80003396:	a9 78       	lsl	r8,0x9
80003398:	e0 28 d4 00 	sub	r8,54272
8000339c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->puers = 1 << (pin & 0x1F);
800033a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800033a8:	30 19       	mov	r9,1
800033aa:	f2 08 09 48 	lsl	r8,r9,r8
800033ae:	10 99       	mov	r9,r8
800033b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033b4:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800033b8:	2f ed       	sub	sp,-8
800033ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800033be <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800033be:	eb cd 40 80 	pushm	r7,lr
800033c2:	1a 97       	mov	r7,sp
800033c4:	20 3d       	sub	sp,12
800033c6:	ef 4c ff f8 	st.w	r7[-8],r12
800033ca:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033d2:	a5 98       	lsr	r8,0x5
800033d4:	a9 78       	lsl	r8,0x9
800033d6:	e0 28 d4 00 	sub	r8,54272
800033da:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800033de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033e2:	e2 18 00 04 	andl	r8,0x4,COH
800033e6:	c0 e0       	breq	80003402 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
800033e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800033f0:	30 19       	mov	r9,1
800033f2:	f2 08 09 48 	lsl	r8,r9,r8
800033f6:	10 99       	mov	r9,r8
800033f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033fc:	f1 49 00 74 	st.w	r8[116],r9
80003400:	c0 d8       	rjmp	8000341a <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80003402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003406:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000340a:	30 19       	mov	r9,1
8000340c:	f2 08 09 48 	lsl	r8,r9,r8
80003410:	10 99       	mov	r9,r8
80003412:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003416:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000341a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000341e:	e2 18 00 80 	andl	r8,0x80,COH
80003422:	c5 a0       	breq	800034d6 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
80003424:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003428:	e2 18 01 80 	andl	r8,0x180,COH
8000342c:	c1 a0       	breq	80003460 <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000342e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003432:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003436:	30 19       	mov	r9,1
80003438:	f2 08 09 48 	lsl	r8,r9,r8
8000343c:	10 99       	mov	r9,r8
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80003446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000344a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000344e:	30 19       	mov	r9,1
80003450:	f2 08 09 48 	lsl	r8,r9,r8
80003454:	10 99       	mov	r9,r8
80003456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000345a:	f1 49 00 b8 	st.w	r8[184],r9
8000345e:	c3 c8       	rjmp	800034d6 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
80003460:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003464:	e2 18 02 80 	andl	r8,0x280,COH
80003468:	c1 a0       	breq	8000349c <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000346a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003472:	30 19       	mov	r9,1
80003474:	f2 08 09 48 	lsl	r8,r9,r8
80003478:	10 99       	mov	r9,r8
8000347a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000347e:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80003482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003486:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000348a:	30 19       	mov	r9,1
8000348c:	f2 08 09 48 	lsl	r8,r9,r8
80003490:	10 99       	mov	r9,r8
80003492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003496:	f1 49 00 b8 	st.w	r8[184],r9
8000349a:	c1 e8       	rjmp	800034d6 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
8000349c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034a0:	e2 18 03 80 	andl	r8,0x380,COH
800034a4:	c1 90       	breq	800034d6 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800034a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800034ae:	30 19       	mov	r9,1
800034b0:	f2 08 09 48 	lsl	r8,r9,r8
800034b4:	10 99       	mov	r9,r8
800034b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034ba:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800034be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800034c6:	30 19       	mov	r9,1
800034c8:	f2 08 09 48 	lsl	r8,r9,r8
800034cc:	10 99       	mov	r9,r8
800034ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034d2:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800034d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034de:	5c 58       	castu.b	r8
800034e0:	c2 c0       	breq	80003538 <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
800034e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034e6:	e2 18 00 02 	andl	r8,0x2,COH
800034ea:	c0 e0       	breq	80003506 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800034ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800034f4:	30 19       	mov	r9,1
800034f6:	f2 08 09 48 	lsl	r8,r9,r8
800034fa:	10 99       	mov	r9,r8
800034fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003500:	f1 49 00 54 	st.w	r8[84],r9
80003504:	c0 d8       	rjmp	8000351e <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80003506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000350a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000350e:	30 19       	mov	r9,1
80003510:	f2 08 09 48 	lsl	r8,r9,r8
80003514:	10 99       	mov	r9,r8
80003516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000351a:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000351e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003522:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003526:	30 19       	mov	r9,1
80003528:	f2 08 09 48 	lsl	r8,r9,r8
8000352c:	10 99       	mov	r9,r8
8000352e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003532:	f1 49 00 44 	st.w	r8[68],r9
80003536:	c0 d8       	rjmp	80003550 <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80003538:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000353c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003540:	30 19       	mov	r9,1
80003542:	f2 08 09 48 	lsl	r8,r9,r8
80003546:	10 99       	mov	r9,r8
80003548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000354c:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003554:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003558:	30 19       	mov	r9,1
8000355a:	f2 08 09 48 	lsl	r8,r9,r8
8000355e:	10 99       	mov	r9,r8
80003560:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003564:	91 19       	st.w	r8[0x4],r9
}
80003566:	2f dd       	sub	sp,-12
80003568:	e3 cd 80 80 	ldm	sp++,r7,pc

8000356c <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
8000356c:	eb cd 40 80 	pushm	r7,lr
80003570:	1a 97       	mov	r7,sp
80003572:	20 2d       	sub	sp,8
80003574:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000357c:	a5 98       	lsr	r8,0x5
8000357e:	a9 78       	lsl	r8,0x9
80003580:	e0 28 d4 00 	sub	r8,54272
80003584:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80003588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000358c:	71 89       	ld.w	r9,r8[0x60]
8000358e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003592:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003596:	f2 08 0a 48 	lsr	r8,r9,r8
8000359a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000359e:	5c 58       	castu.b	r8
}
800035a0:	10 9c       	mov	r12,r8
800035a2:	2f ed       	sub	sp,-8
800035a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800035a8 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
800035a8:	eb cd 40 80 	pushm	r7,lr
800035ac:	1a 97       	mov	r7,sp
800035ae:	20 2d       	sub	sp,8
800035b0:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800035b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035b8:	a5 98       	lsr	r8,0x5
800035ba:	a9 78       	lsl	r8,0x9
800035bc:	e0 28 d4 00 	sub	r8,54272
800035c0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800035c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800035cc:	30 19       	mov	r9,1
800035ce:	f2 08 09 48 	lsl	r8,r9,r8
800035d2:	10 99       	mov	r9,r8
800035d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035d8:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800035dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800035e4:	30 19       	mov	r9,1
800035e6:	f2 08 09 48 	lsl	r8,r9,r8
800035ea:	10 99       	mov	r9,r8
800035ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035f0:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800035f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800035fc:	30 19       	mov	r9,1
800035fe:	f2 08 09 48 	lsl	r8,r9,r8
80003602:	10 99       	mov	r9,r8
80003604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003608:	91 19       	st.w	r8[0x4],r9
}
8000360a:	2f ed       	sub	sp,-8
8000360c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003610 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
80003610:	eb cd 40 80 	pushm	r7,lr
80003614:	1a 97       	mov	r7,sp
80003616:	20 2d       	sub	sp,8
80003618:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000361c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003620:	a5 98       	lsr	r8,0x5
80003622:	a9 78       	lsl	r8,0x9
80003624:	e0 28 d4 00 	sub	r8,54272
80003628:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000362c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003630:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003634:	30 19       	mov	r9,1
80003636:	f2 08 09 48 	lsl	r8,r9,r8
8000363a:	10 99       	mov	r9,r8
8000363c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003640:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003648:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000364c:	30 19       	mov	r9,1
8000364e:	f2 08 09 48 	lsl	r8,r9,r8
80003652:	10 99       	mov	r9,r8
80003654:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003658:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000365c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003660:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003664:	30 19       	mov	r9,1
80003666:	f2 08 09 48 	lsl	r8,r9,r8
8000366a:	10 99       	mov	r9,r8
8000366c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003670:	91 19       	st.w	r8[0x4],r9
}
80003672:	2f ed       	sub	sp,-8
80003674:	e3 cd 80 80 	ldm	sp++,r7,pc

80003678 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003678:	eb cd 40 80 	pushm	r7,lr
8000367c:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
8000367e:	c0 08       	rjmp	8000367e <_unhandled_interrupt+0x6>

80003680 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80003680:	eb cd 40 80 	pushm	r7,lr
80003684:	1a 97       	mov	r7,sp
80003686:	20 3d       	sub	sp,12
80003688:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000368c:	fe 78 10 00 	mov	r8,-61440
80003690:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003694:	f2 09 11 03 	rsub	r9,r9,3
80003698:	28 09       	sub	r9,-128
8000369a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000369e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800036a2:	fe 78 10 00 	mov	r8,-61440
800036a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800036aa:	2c 09       	sub	r9,-64
800036ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800036b0:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800036b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036b8:	58 08       	cp.w	r8,0
800036ba:	c1 30       	breq	800036e0 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800036bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800036c0:	48 b8       	lddpc	r8,800036ec <_get_interrupt_handler+0x6c>
800036c2:	a1 79       	lsl	r9,0x1
800036c4:	2f f9       	sub	r9,-1
800036c6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800036ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036ce:	f0 08 12 00 	clz	r8,r8
800036d2:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800036d6:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800036d8:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800036dc:	70 08       	ld.w	r8,r8[0x0]
800036de:	c0 28       	rjmp	800036e2 <_get_interrupt_handler+0x62>
800036e0:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800036e2:	10 9c       	mov	r12,r8
800036e4:	2f dd       	sub	sp,-12
800036e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800036ea:	00 00       	add	r0,r0
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	76 20       	ld.w	r0,r11[0x8]

800036f0 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800036f0:	eb cd 40 80 	pushm	r7,lr
800036f4:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800036f6:	48 38       	lddpc	r8,80003700 <INTC_init_evba+0x10>
800036f8:	e3 b8 00 01 	mtsr	0x4,r8
}
800036fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	74 00       	ld.w	r0,r10[0x0]

80003704 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003704:	eb cd 40 80 	pushm	r7,lr
80003708:	1a 97       	mov	r7,sp
8000370a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000370c:	f0 1f 00 1f 	mcall	80003788 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003710:	30 08       	mov	r8,0
80003712:	ef 48 ff f8 	st.w	r7[-8],r8
80003716:	c3 18       	rjmp	80003778 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003718:	30 08       	mov	r8,0
8000371a:	ef 48 ff fc 	st.w	r7[-4],r8
8000371e:	c1 48       	rjmp	80003746 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003720:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003724:	49 a8       	lddpc	r8,8000378c <INTC_init_interrupts+0x88>
80003726:	a1 79       	lsl	r9,0x1
80003728:	2f f9       	sub	r9,-1
8000372a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000372e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003732:	a3 68       	lsl	r8,0x2
80003734:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003738:	49 69       	lddpc	r9,80003790 <INTC_init_interrupts+0x8c>
8000373a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000373c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003740:	2f f8       	sub	r8,-1
80003742:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80003746:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000374a:	49 18       	lddpc	r8,8000378c <INTC_init_interrupts+0x88>
8000374c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003754:	10 39       	cp.w	r9,r8
80003756:	fe 9b ff e5 	brhi	80003720 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000375a:	fe 78 10 00 	mov	r8,-61440
8000375e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003762:	48 db       	lddpc	r11,80003794 <INTC_init_interrupts+0x90>
80003764:	48 da       	lddpc	r10,80003798 <INTC_init_interrupts+0x94>
80003766:	f6 0a 01 0a 	sub	r10,r11,r10
8000376a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000376e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003772:	2f f8       	sub	r8,-1
80003774:	ef 48 ff f8 	st.w	r7[-8],r8
80003778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000377c:	59 e8       	cp.w	r8,30
8000377e:	fe 98 ff cd 	brls	80003718 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80003782:	2f ed       	sub	sp,-8
80003784:	e3 cd 80 80 	ldm	sp++,r7,pc
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	36 f0       	mov	r0,111
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	76 20       	ld.w	r0,r11[0x8]
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	36 78       	mov	r8,103
80003794:	80 00       	ld.sh	r0,r0[0x0]
80003796:	75 04       	ld.w	r4,r10[0x40]
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	74 00       	ld.w	r0,r10[0x0]

8000379c <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
8000379c:	eb cd 40 80 	pushm	r7,lr
800037a0:	1a 97       	mov	r7,sp
800037a2:	20 4d       	sub	sp,16
800037a4:	ef 4c ff f8 	st.w	r7[-8],r12
800037a8:	ef 4b ff f4 	st.w	r7[-12],r11
800037ac:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800037b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037b4:	a5 98       	lsr	r8,0x5
800037b6:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800037ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800037be:	4a 78       	lddpc	r8,80003858 <INTC_register_interrupt+0xbc>
800037c0:	a1 79       	lsl	r9,0x1
800037c2:	2f f9       	sub	r9,-1
800037c4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800037c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800037d0:	a3 68       	lsl	r8,0x2
800037d2:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800037d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800037da:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800037dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037e0:	58 08       	cp.w	r8,0
800037e2:	c0 c1       	brne	800037fa <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800037e4:	fe 78 10 00 	mov	r8,-61440
800037e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800037ec:	49 cb       	lddpc	r11,8000385c <INTC_register_interrupt+0xc0>
800037ee:	49 da       	lddpc	r10,80003860 <INTC_register_interrupt+0xc4>
800037f0:	f6 0a 01 0a 	sub	r10,r11,r10
800037f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800037f8:	c2 d8       	rjmp	80003852 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800037fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037fe:	58 18       	cp.w	r8,1
80003800:	c0 d1       	brne	8000381a <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003802:	fe 78 10 00 	mov	r8,-61440
80003806:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000380a:	49 7b       	lddpc	r11,80003864 <INTC_register_interrupt+0xc8>
8000380c:	49 5a       	lddpc	r10,80003860 <INTC_register_interrupt+0xc4>
8000380e:	f6 0a 01 0a 	sub	r10,r11,r10
80003812:	bf aa       	sbr	r10,0x1e
80003814:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003818:	c1 d8       	rjmp	80003852 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000381a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000381e:	58 28       	cp.w	r8,2
80003820:	c0 d1       	brne	8000383a <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003822:	fe 78 10 00 	mov	r8,-61440
80003826:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000382a:	49 0b       	lddpc	r11,80003868 <INTC_register_interrupt+0xcc>
8000382c:	48 da       	lddpc	r10,80003860 <INTC_register_interrupt+0xc4>
8000382e:	f6 0a 01 0a 	sub	r10,r11,r10
80003832:	bf ba       	sbr	r10,0x1f
80003834:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003838:	c0 d8       	rjmp	80003852 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000383a:	fe 78 10 00 	mov	r8,-61440
8000383e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003842:	48 bb       	lddpc	r11,8000386c <INTC_register_interrupt+0xd0>
80003844:	48 7a       	lddpc	r10,80003860 <INTC_register_interrupt+0xc4>
80003846:	f6 0a 01 0a 	sub	r10,r11,r10
8000384a:	ea 1a c0 00 	orh	r10,0xc000
8000384e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80003852:	2f cd       	sub	sp,-16
80003854:	e3 cd 80 80 	ldm	sp++,r7,pc
80003858:	80 00       	ld.sh	r0,r0[0x0]
8000385a:	76 20       	ld.w	r0,r11[0x8]
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	75 04       	ld.w	r4,r10[0x40]
80003860:	80 00       	ld.sh	r0,r0[0x0]
80003862:	74 00       	ld.w	r0,r10[0x0]
80003864:	80 00       	ld.sh	r0,r0[0x0]
80003866:	75 12       	ld.w	r2,r10[0x44]
80003868:	80 00       	ld.sh	r0,r0[0x0]
8000386a:	75 20       	ld.w	r0,r10[0x48]
8000386c:	80 00       	ld.sh	r0,r0[0x0]
8000386e:	75 2e       	ld.w	lr,r10[0x48]

80003870 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003870:	eb cd 40 80 	pushm	r7,lr
80003874:	1a 97       	mov	r7,sp
80003876:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003878:	e1 b8 00 00 	mfsr	r8,0x0
8000387c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003880:	d3 03       	ssrf	0x10

	return flags;
80003882:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003886:	10 9c       	mov	r12,r8
80003888:	2f fd       	sub	sp,-4
8000388a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000388e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000388e:	eb cd 40 80 	pushm	r7,lr
80003892:	1a 97       	mov	r7,sp
80003894:	20 1d       	sub	sp,4
80003896:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000389a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000389e:	e6 18 00 01 	andh	r8,0x1,COH
800038a2:	5f 08       	sreq	r8
800038a4:	5c 58       	castu.b	r8
}
800038a6:	10 9c       	mov	r12,r8
800038a8:	2f fd       	sub	sp,-4
800038aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800038ae:	d7 03       	nop

800038b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800038b0:	eb cd 40 80 	pushm	r7,lr
800038b4:	1a 97       	mov	r7,sp
800038b6:	20 1d       	sub	sp,4
800038b8:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800038bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800038c0:	f0 1f 00 05 	mcall	800038d4 <cpu_irq_restore+0x24>
800038c4:	18 98       	mov	r8,r12
800038c6:	58 08       	cp.w	r8,0
800038c8:	c0 20       	breq	800038cc <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800038ca:	d5 03       	csrf	0x10
   }

	barrier();
}
800038cc:	2f fd       	sub	sp,-4
800038ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800038d2:	00 00       	add	r0,r0
800038d4:	80 00       	ld.sh	r0,r0[0x0]
800038d6:	38 8e       	mov	lr,-120

800038d8 <pdca_get_handler>:

#include "compiler.h"
#include "pdca.h"

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
800038d8:	eb cd 40 80 	pushm	r7,lr
800038dc:	1a 97       	mov	r7,sp
800038de:	20 2d       	sub	sp,8
800038e0:	18 98       	mov	r8,r12
800038e2:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800038e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800038ea:	a7 68       	lsl	r8,0x6
800038ec:	e0 38 00 00 	sub	r8,65536
800038f0:	ef 48 ff fc 	st.w	r7[-4],r8

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800038f4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800038f8:	30 b8       	mov	r8,11
800038fa:	f0 09 18 00 	cp.b	r9,r8
800038fe:	e0 88 00 04 	brls	80003906 <pdca_get_handler+0x2e>
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80003902:	3f f8       	mov	r8,-1
80003904:	c0 38       	rjmp	8000390a <pdca_get_handler+0x32>
	}

	return pdca_channel;
80003906:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000390a:	10 9c       	mov	r12,r8
8000390c:	2f ed       	sub	sp,-8
8000390e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003912:	d7 03       	nop

80003914 <pdca_init_channel>:

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80003914:	eb cd 40 80 	pushm	r7,lr
80003918:	1a 97       	mov	r7,sp
8000391a:	20 4d       	sub	sp,16
8000391c:	18 98       	mov	r8,r12
8000391e:	ef 4b ff f0 	st.w	r7[-16],r11
80003922:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003926:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000392a:	10 9c       	mov	r12,r8
8000392c:	f0 1f 00 29 	mcall	800039d0 <pdca_init_channel+0xbc>
80003930:	18 98       	mov	r8,r12
			pdca_ch_number);
80003932:	ef 48 ff f8 	st.w	r7[-8],r8

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
80003936:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000393a:	10 9c       	mov	r12,r8
8000393c:	f0 1f 00 26 	mcall	800039d4 <pdca_init_channel+0xc0>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80003940:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003944:	10 9c       	mov	r12,r8
80003946:	f0 1f 00 25 	mcall	800039d8 <pdca_init_channel+0xc4>
	
	irqflags_t flags = cpu_irq_save();
8000394a:	f0 1f 00 25 	mcall	800039dc <pdca_init_channel+0xc8>
8000394e:	18 98       	mov	r8,r12
80003950:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)opt->addr;
80003954:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003958:	70 08       	ld.w	r8,r8[0x0]
8000395a:	10 99       	mov	r9,r8
8000395c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003960:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = opt->size;
80003962:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003966:	70 19       	ld.w	r9,r8[0x4]
80003968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000396c:	91 29       	st.w	r8[0x8],r9
	pdca_channel->psr = opt->pid;
8000396e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003972:	70 49       	ld.w	r9,r8[0x10]
80003974:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003978:	91 19       	st.w	r8[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
8000397a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000397e:	70 28       	ld.w	r8,r8[0x8]
80003980:	10 99       	mov	r9,r8
80003982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003986:	91 39       	st.w	r8[0xc],r9
	pdca_channel->tcrr = opt->r_size;
80003988:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000398c:	70 39       	ld.w	r9,r8[0xc]
8000398e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003992:	91 49       	st.w	r8[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80003994:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003998:	f1 38 00 18 	ld.ub	r8,r8[24]
8000399c:	a3 68       	lsl	r8,0x2
8000399e:	10 99       	mov	r9,r8
800039a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800039a4:	70 58       	ld.w	r8,r8[0x14]
800039a6:	10 49       	or	r9,r8
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800039ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039b2:	e0 69 01 00 	mov	r9,256
800039b6:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
800039b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039bc:	70 b8       	ld.w	r8,r8[0x2c]
	
	cpu_irq_restore(flags);
800039be:	ee fc ff fc 	ld.w	r12,r7[-4]
800039c2:	f0 1f 00 08 	mcall	800039e0 <pdca_init_channel+0xcc>

	return PDCA_SUCCESS;
800039c6:	30 08       	mov	r8,0
}
800039c8:	10 9c       	mov	r12,r8
800039ca:	2f cd       	sub	sp,-16
800039cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800039d0:	80 00       	ld.sh	r0,r0[0x0]
800039d2:	38 d8       	mov	r8,-115
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	3a b4       	mov	r4,-85
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	3b 34       	mov	r4,-77
800039dc:	80 00       	ld.sh	r0,r0[0x0]
800039de:	38 70       	mov	r0,-121
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	38 b0       	mov	r0,-117

800039e4 <pdca_disable>:

	return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}

void pdca_disable(uint8_t pdca_ch_number)
{
800039e4:	eb cd 40 80 	pushm	r7,lr
800039e8:	1a 97       	mov	r7,sp
800039ea:	20 2d       	sub	sp,8
800039ec:	18 98       	mov	r8,r12
800039ee:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800039f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800039f6:	10 9c       	mov	r12,r8
800039f8:	f0 1f 00 06 	mcall	80003a10 <pdca_disable+0x2c>
800039fc:	18 98       	mov	r8,r12
			pdca_ch_number);
800039fe:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80003a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a06:	30 29       	mov	r9,2
80003a08:	91 59       	st.w	r8[0x14],r9
}
80003a0a:	2f ed       	sub	sp,-8
80003a0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a10:	80 00       	ld.sh	r0,r0[0x0]
80003a12:	38 d8       	mov	r8,-115

80003a14 <pdca_enable>:

void pdca_enable(uint8_t pdca_ch_number)
{
80003a14:	eb cd 40 80 	pushm	r7,lr
80003a18:	1a 97       	mov	r7,sp
80003a1a:	20 2d       	sub	sp,8
80003a1c:	18 98       	mov	r8,r12
80003a1e:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003a22:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003a26:	10 9c       	mov	r12,r8
80003a28:	f0 1f 00 06 	mcall	80003a40 <pdca_enable+0x2c>
80003a2c:	18 98       	mov	r8,r12
			pdca_ch_number);
80003a2e:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80003a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a36:	30 19       	mov	r9,1
80003a38:	91 59       	st.w	r8[0x14],r9
}
80003a3a:	2f ed       	sub	sp,-8
80003a3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a40:	80 00       	ld.sh	r0,r0[0x0]
80003a42:	38 d8       	mov	r8,-115

80003a44 <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80003a44:	eb cd 40 80 	pushm	r7,lr
80003a48:	1a 97       	mov	r7,sp
80003a4a:	20 5d       	sub	sp,20
80003a4c:	18 98       	mov	r8,r12
80003a4e:	ef 4b ff f0 	st.w	r7[-16],r11
80003a52:	ef 4a ff ec 	st.w	r7[-20],r10
80003a56:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003a5a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003a5e:	10 9c       	mov	r12,r8
80003a60:	f0 1f 00 12 	mcall	80003aa8 <pdca_load_channel+0x64>
80003a64:	18 98       	mov	r8,r12
			pdca_ch_number);
80003a66:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80003a6a:	f0 1f 00 11 	mcall	80003aac <pdca_load_channel+0x68>
80003a6e:	18 98       	mov	r8,r12
80003a70:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)addr;
80003a74:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a7c:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = size;
80003a7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a82:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003a86:	91 29       	st.w	r8[0x8],r9
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80003a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a8c:	e0 69 01 00 	mov	r9,256
80003a90:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
80003a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a96:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
80003a98:	ee fc ff fc 	ld.w	r12,r7[-4]
80003a9c:	f0 1f 00 05 	mcall	80003ab0 <pdca_load_channel+0x6c>
}
80003aa0:	2f bd       	sub	sp,-20
80003aa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aa6:	00 00       	add	r0,r0
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	38 d8       	mov	r8,-115
80003aac:	80 00       	ld.sh	r0,r0[0x0]
80003aae:	38 70       	mov	r0,-121
80003ab0:	80 00       	ld.sh	r0,r0[0x0]
80003ab2:	38 b0       	mov	r0,-117

80003ab4 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80003ab4:	eb cd 40 80 	pushm	r7,lr
80003ab8:	1a 97       	mov	r7,sp
80003aba:	20 3d       	sub	sp,12
80003abc:	18 98       	mov	r8,r12
80003abe:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003ac2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003ac6:	10 9c       	mov	r12,r8
80003ac8:	f0 1f 00 0c 	mcall	80003af8 <pdca_disable_interrupt_transfer_complete+0x44>
80003acc:	18 98       	mov	r8,r12
			pdca_ch_number);
80003ace:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80003ad2:	f0 1f 00 0b 	mcall	80003afc <pdca_disable_interrupt_transfer_complete+0x48>
80003ad6:	18 98       	mov	r8,r12
80003ad8:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80003adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ae0:	30 29       	mov	r9,2
80003ae2:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80003ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ae8:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
80003aea:	ee fc ff fc 	ld.w	r12,r7[-4]
80003aee:	f0 1f 00 05 	mcall	80003b00 <pdca_disable_interrupt_transfer_complete+0x4c>
}
80003af2:	2f dd       	sub	sp,-12
80003af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	38 d8       	mov	r8,-115
80003afc:	80 00       	ld.sh	r0,r0[0x0]
80003afe:	38 70       	mov	r0,-121
80003b00:	80 00       	ld.sh	r0,r0[0x0]
80003b02:	38 b0       	mov	r0,-117

80003b04 <pdca_enable_interrupt_transfer_complete>:

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80003b04:	eb cd 40 80 	pushm	r7,lr
80003b08:	1a 97       	mov	r7,sp
80003b0a:	20 2d       	sub	sp,8
80003b0c:	18 98       	mov	r8,r12
80003b0e:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003b12:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b16:	10 9c       	mov	r12,r8
80003b18:	f0 1f 00 06 	mcall	80003b30 <pdca_enable_interrupt_transfer_complete+0x2c>
80003b1c:	18 98       	mov	r8,r12
			pdca_ch_number);
80003b1e:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80003b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b26:	30 29       	mov	r9,2
80003b28:	91 89       	st.w	r8[0x20],r9
}
80003b2a:	2f ed       	sub	sp,-8
80003b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b30:	80 00       	ld.sh	r0,r0[0x0]
80003b32:	38 d8       	mov	r8,-115

80003b34 <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
80003b34:	eb cd 40 80 	pushm	r7,lr
80003b38:	1a 97       	mov	r7,sp
80003b3a:	20 3d       	sub	sp,12
80003b3c:	18 98       	mov	r8,r12
80003b3e:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80003b42:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b46:	10 9c       	mov	r12,r8
80003b48:	f0 1f 00 0c 	mcall	80003b78 <pdca_disable_interrupt_reload_counter_zero+0x44>
80003b4c:	18 98       	mov	r8,r12
			pdca_ch_number);
80003b4e:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80003b52:	f0 1f 00 0b 	mcall	80003b7c <pdca_disable_interrupt_reload_counter_zero+0x48>
80003b56:	18 98       	mov	r8,r12
80003b58:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80003b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b60:	30 19       	mov	r9,1
80003b62:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80003b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b68:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
80003b6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80003b6e:	f0 1f 00 05 	mcall	80003b80 <pdca_disable_interrupt_reload_counter_zero+0x4c>
}
80003b72:	2f dd       	sub	sp,-12
80003b74:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b78:	80 00       	ld.sh	r0,r0[0x0]
80003b7a:	38 d8       	mov	r8,-115
80003b7c:	80 00       	ld.sh	r0,r0[0x0]
80003b7e:	38 70       	mov	r0,-121
80003b80:	80 00       	ld.sh	r0,r0[0x0]
80003b82:	38 b0       	mov	r0,-117

80003b84 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80003b84:	eb cd 40 80 	pushm	r7,lr
80003b88:	1a 97       	mov	r7,sp
80003b8a:	20 3d       	sub	sp,12
80003b8c:	ef 4c ff f8 	st.w	r7[-8],r12
80003b90:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003b94:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003b98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9c:	f2 08 00 08 	add	r8,r9,r8
80003ba0:	20 18       	sub	r8,1
80003ba2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ba6:	f0 09 0d 08 	divu	r8,r8,r9
80003baa:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80003bae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bb2:	58 08       	cp.w	r8,0
80003bb4:	c0 70       	breq	80003bc2 <getBaudDiv+0x3e>
80003bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bba:	e0 48 00 ff 	cp.w	r8,255
80003bbe:	e0 88 00 04 	brls	80003bc6 <getBaudDiv+0x42>
		return -1;
80003bc2:	3f f8       	mov	r8,-1
80003bc4:	c0 48       	rjmp	80003bcc <getBaudDiv+0x48>
	}

	return baudDiv;
80003bc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bca:	5c 88       	casts.h	r8
}
80003bcc:	10 9c       	mov	r12,r8
80003bce:	2f dd       	sub	sp,-12
80003bd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80003bd4 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80003bd4:	eb cd 40 80 	pushm	r7,lr
80003bd8:	1a 97       	mov	r7,sp
80003bda:	20 3d       	sub	sp,12
80003bdc:	ef 4c ff f8 	st.w	r7[-8],r12
80003be0:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003be4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003be8:	f1 39 00 0d 	ld.ub	r9,r8[13]
80003bec:	30 18       	mov	r8,1
80003bee:	f0 09 18 00 	cp.b	r9,r8
80003bf2:	e0 88 00 04 	brls	80003bfa <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
80003bf6:	30 28       	mov	r8,2
80003bf8:	c3 48       	rjmp	80003c60 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003bfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bfe:	e0 69 00 80 	mov	r9,128
80003c02:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c08:	70 18       	ld.w	r8,r8[0x4]
80003c0a:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
80003c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c12:	30 19       	mov	r9,1
80003c14:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003c18:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003c1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c20:	f1 38 00 0d 	ld.ub	r8,r8[13]
80003c24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c28:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c30:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003c34:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
80003c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c3c:	30 09       	mov	r9,0
80003c3e:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003c42:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c4a:	30 f9       	mov	r9,15
80003c4c:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003c50:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003c54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c5c:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003c5e:	30 08       	mov	r8,0
}
80003c60:	10 9c       	mov	r12,r8
80003c62:	2f dd       	sub	sp,-12
80003c64:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c68 <spi_selectChip>:

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003c68:	eb cd 40 80 	pushm	r7,lr
80003c6c:	1a 97       	mov	r7,sp
80003c6e:	20 2d       	sub	sp,8
80003c70:	ef 4c ff fc 	st.w	r7[-4],r12
80003c74:	16 98       	mov	r8,r11
80003c76:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c7e:	70 18       	ld.w	r8,r8[0x4]
80003c80:	10 99       	mov	r9,r8
80003c82:	ea 19 00 0f 	orh	r9,0xf
80003c86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c8a:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c90:	70 18       	ld.w	r8,r8[0x4]
80003c92:	e2 18 00 04 	andl	r8,0x4,COH
80003c96:	c1 90       	breq	80003cc8 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003c98:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003c9c:	30 e8       	mov	r8,14
80003c9e:	f0 09 18 00 	cp.b	r9,r8
80003ca2:	e0 88 00 04 	brls	80003caa <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
80003ca6:	30 28       	mov	r8,2
80003ca8:	c2 88       	rjmp	80003cf8 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80003cb0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003cb4:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003cb6:	ea 18 ff f0 	orh	r8,0xfff0
80003cba:	e8 18 ff ff 	orl	r8,0xffff
80003cbe:	10 69       	and	r9,r8
80003cc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cc4:	91 19       	st.w	r8[0x4],r9
80003cc6:	c1 88       	rjmp	80003cf6 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003cc8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003ccc:	30 38       	mov	r8,3
80003cce:	f0 09 18 00 	cp.b	r9,r8
80003cd2:	e0 88 00 04 	brls	80003cda <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80003cd6:	30 28       	mov	r8,2
80003cd8:	c1 08       	rjmp	80003cf8 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cde:	70 19       	ld.w	r9,r8[0x4]
80003ce0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ce4:	2f 08       	sub	r8,-16
80003ce6:	30 1a       	mov	r10,1
80003ce8:	f4 08 09 48 	lsl	r8,r10,r8
80003cec:	5c d8       	com	r8
80003cee:	10 69       	and	r9,r8
80003cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cf4:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003cf6:	30 08       	mov	r8,0
}
80003cf8:	10 9c       	mov	r12,r8
80003cfa:	2f ed       	sub	sp,-8
80003cfc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003d00 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003d00:	eb cd 40 80 	pushm	r7,lr
80003d04:	1a 97       	mov	r7,sp
80003d06:	20 3d       	sub	sp,12
80003d08:	ef 4c ff f8 	st.w	r7[-8],r12
80003d0c:	16 98       	mov	r8,r11
80003d0e:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003d12:	e0 68 3a 98 	mov	r8,15000
80003d16:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003d1a:	c0 f8       	rjmp	80003d38 <spi_unselectChip+0x38>
		if (!timeout--) {
80003d1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d20:	58 08       	cp.w	r8,0
80003d22:	5f 08       	sreq	r8
80003d24:	5c 58       	castu.b	r8
80003d26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003d2a:	20 19       	sub	r9,1
80003d2c:	ef 49 ff fc 	st.w	r7[-4],r9
80003d30:	58 08       	cp.w	r8,0
80003d32:	c0 30       	breq	80003d38 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80003d34:	30 18       	mov	r8,1
80003d36:	c1 68       	rjmp	80003d62 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d3c:	70 48       	ld.w	r8,r8[0x10]
80003d3e:	e2 18 02 00 	andl	r8,0x200,COH
80003d42:	ce d0       	breq	80003d1c <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d48:	70 18       	ld.w	r8,r8[0x4]
80003d4a:	10 99       	mov	r9,r8
80003d4c:	ea 19 00 0f 	orh	r9,0xf
80003d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d54:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d5a:	fc 19 01 00 	movh	r9,0x100
80003d5e:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80003d60:	30 08       	mov	r8,0
}
80003d62:	10 9c       	mov	r12,r8
80003d64:	2f dd       	sub	sp,-12
80003d66:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d6a:	d7 03       	nop

80003d6c <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003d6c:	eb cd 40 80 	pushm	r7,lr
80003d70:	1a 97       	mov	r7,sp
80003d72:	20 5d       	sub	sp,20
80003d74:	ef 4c ff f4 	st.w	r7[-12],r12
80003d78:	ef 4b ff f0 	st.w	r7[-16],r11
80003d7c:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003d80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003d84:	f1 39 00 0c 	ld.ub	r9,r8[12]
80003d88:	30 38       	mov	r8,3
80003d8a:	f0 09 18 00 	cp.b	r9,r8
80003d8e:	e0 8b 00 1d 	brhi	80003dc8 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
80003d92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003d96:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003d9a:	30 18       	mov	r8,1
80003d9c:	f0 09 18 00 	cp.b	r9,r8
80003da0:	e0 8b 00 14 	brhi	80003dc8 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003da4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003da8:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003dac:	30 78       	mov	r8,7
80003dae:	f0 09 18 00 	cp.b	r9,r8
80003db2:	e0 88 00 0b 	brls	80003dc8 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003db6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003dba:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003dbe:	31 08       	mov	r8,16
80003dc0:	f0 09 18 00 	cp.b	r9,r8
80003dc4:	e0 88 00 04 	brls	80003dcc <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003dc8:	30 28       	mov	r8,2
80003dca:	c8 d8       	rjmp	80003ee4 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003dcc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003dd0:	70 18       	ld.w	r8,r8[0x4]
80003dd2:	ee fb ff ec 	ld.w	r11,r7[-20]
80003dd6:	10 9c       	mov	r12,r8
80003dd8:	f0 1f 00 45 	mcall	80003eec <spi_setupChipReg+0x180>
80003ddc:	18 98       	mov	r8,r12
80003dde:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80003de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003de6:	58 08       	cp.w	r8,0
80003de8:	c0 34       	brge	80003dee <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003dea:	30 28       	mov	r8,2
80003dec:	c7 c8       	rjmp	80003ee4 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003dee:	30 08       	mov	r8,0
80003df0:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003df4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003df8:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003dfc:	a1 98       	lsr	r8,0x1
80003dfe:	5c 58       	castu.b	r8
80003e00:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e04:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e0c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003e10:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003e14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e18:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003e1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e20:	5f 08       	sreq	r8
80003e22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e2a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003e2e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003e32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e36:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003e3a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e3e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e46:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003e4a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003e4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e52:	f1 38 00 08 	ld.ub	r8,r8[8]
80003e56:	20 88       	sub	r8,8
80003e58:	5c 58       	castu.b	r8
80003e5a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003e5e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e66:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80003e6a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e72:	5c 58       	castu.b	r8
80003e74:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003e78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e7c:	f1 38 00 09 	ld.ub	r8,r8[9]
80003e80:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003e84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e88:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003e8c:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
80003e90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e94:	11 88       	ld.ub	r8,r8[0x0]
80003e96:	58 18       	cp.w	r8,1
80003e98:	c1 10       	breq	80003eba <spi_setupChipReg+0x14e>
80003e9a:	e0 89 00 05 	brgt	80003ea4 <spi_setupChipReg+0x138>
80003e9e:	58 08       	cp.w	r8,0
80003ea0:	c0 70       	breq	80003eae <spi_setupChipReg+0x142>
80003ea2:	c1 e8       	rjmp	80003ede <spi_setupChipReg+0x172>
80003ea4:	58 28       	cp.w	r8,2
80003ea6:	c1 00       	breq	80003ec6 <spi_setupChipReg+0x15a>
80003ea8:	58 38       	cp.w	r8,3
80003eaa:	c1 40       	breq	80003ed2 <spi_setupChipReg+0x166>
80003eac:	c1 98       	rjmp	80003ede <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003eae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003eb6:	91 c9       	st.w	r8[0x30],r9
		break;
80003eb8:	c1 58       	rjmp	80003ee2 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003eba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ebe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ec2:	91 d9       	st.w	r8[0x34],r9
		break;
80003ec4:	c0 f8       	rjmp	80003ee2 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003ec6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ece:	91 e9       	st.w	r8[0x38],r9
		break;
80003ed0:	c0 98       	rjmp	80003ee2 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ed6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003eda:	91 f9       	st.w	r8[0x3c],r9
		break;
80003edc:	c0 38       	rjmp	80003ee2 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80003ede:	30 28       	mov	r8,2
80003ee0:	c0 28       	rjmp	80003ee4 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80003ee2:	30 08       	mov	r8,0
}
80003ee4:	10 9c       	mov	r12,r8
80003ee6:	2f bd       	sub	sp,-20
80003ee8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	3b 84       	mov	r4,-72

80003ef0 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003ef0:	eb cd 40 80 	pushm	r7,lr
80003ef4:	1a 97       	mov	r7,sp
80003ef6:	20 1d       	sub	sp,4
80003ef8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003efc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f00:	30 19       	mov	r9,1
80003f02:	91 09       	st.w	r8[0x0],r9
}
80003f04:	2f fd       	sub	sp,-4
80003f06:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f0a <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003f0a:	eb cd 40 80 	pushm	r7,lr
80003f0e:	1a 97       	mov	r7,sp
80003f10:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003f12:	e1 b8 00 00 	mfsr	r8,0x0
80003f16:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003f1a:	d3 03       	ssrf	0x10

	return flags;
80003f1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003f20:	10 9c       	mov	r12,r8
80003f22:	2f fd       	sub	sp,-4
80003f24:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f28 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003f28:	eb cd 40 80 	pushm	r7,lr
80003f2c:	1a 97       	mov	r7,sp
80003f2e:	20 1d       	sub	sp,4
80003f30:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003f34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f38:	e6 18 00 01 	andh	r8,0x1,COH
80003f3c:	5f 08       	sreq	r8
80003f3e:	5c 58       	castu.b	r8
}
80003f40:	10 9c       	mov	r12,r8
80003f42:	2f fd       	sub	sp,-4
80003f44:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f48 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80003f48:	eb cd 40 80 	pushm	r7,lr
80003f4c:	1a 97       	mov	r7,sp
80003f4e:	20 1d       	sub	sp,4
80003f50:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003f54:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f58:	f0 1f 00 05 	mcall	80003f6c <cpu_irq_restore+0x24>
80003f5c:	18 98       	mov	r8,r12
80003f5e:	58 08       	cp.w	r8,0
80003f60:	c0 20       	breq	80003f64 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80003f62:	d5 03       	csrf	0x10
   }

	barrier();
}
80003f64:	2f fd       	sub	sp,-4
80003f66:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f6a:	00 00       	add	r0,r0
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f 28       	mov	r8,-14

80003f70 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	1a 97       	mov	r7,sp
80003f76:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80003f78:	4c 68       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
80003f7a:	70 08       	ld.w	r8,r8[0x0]
80003f7c:	70 79       	ld.w	r9,r8[0x1c]
80003f7e:	4c 68       	lddpc	r8,80004094 <twim_master_interrupt_handler+0x124>
80003f80:	70 08       	ld.w	r8,r8[0x0]
80003f82:	f3 e8 00 08 	and	r8,r9,r8
80003f86:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80003f8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f8e:	e2 18 07 00 	andl	r8,0x700,COH
80003f92:	c1 e0       	breq	80003fce <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80003f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f98:	e2 18 03 00 	andl	r8,0x300,COH
80003f9c:	c0 30       	breq	80003fa2 <twim_master_interrupt_handler+0x32>
80003f9e:	3f c8       	mov	r8,-4
80003fa0:	c0 28       	rjmp	80003fa4 <twim_master_interrupt_handler+0x34>
80003fa2:	3f e8       	mov	r8,-2
80003fa4:	4b d9       	lddpc	r9,80004098 <twim_master_interrupt_handler+0x128>
80003fa6:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80003fa8:	4b a8       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
80003faa:	70 09       	ld.w	r9,r8[0x0]
80003fac:	72 38       	ld.w	r8,r9[0xc]
80003fae:	30 0a       	mov	r10,0
80003fb0:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80003fb4:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80003fb6:	4b 78       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
80003fb8:	70 08       	ld.w	r8,r8[0x0]
80003fba:	3f f9       	mov	r9,-1
80003fbc:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80003fbe:	4b 58       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
80003fc0:	70 08       	ld.w	r8,r8[0x0]
80003fc2:	3f f9       	mov	r9,-1
80003fc4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80003fc6:	4b 69       	lddpc	r9,8000409c <twim_master_interrupt_handler+0x12c>
80003fc8:	30 08       	mov	r8,0
80003fca:	b2 88       	st.b	r9[0x0],r8
80003fcc:	c5 e8       	rjmp	80004088 <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80003fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fd2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fd6:	5c 58       	castu.b	r8
80003fd8:	c2 00       	breq	80004018 <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80003fda:	4b 28       	lddpc	r8,800040a0 <twim_master_interrupt_handler+0x130>
80003fdc:	70 09       	ld.w	r9,r8[0x0]
80003fde:	4a d8       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
80003fe0:	70 08       	ld.w	r8,r8[0x0]
80003fe2:	70 58       	ld.w	r8,r8[0x14]
80003fe4:	5c 58       	castu.b	r8
80003fe6:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80003fe8:	4a e8       	lddpc	r8,800040a0 <twim_master_interrupt_handler+0x130>
80003fea:	70 08       	ld.w	r8,r8[0x0]
80003fec:	f0 c9 ff ff 	sub	r9,r8,-1
80003ff0:	4a c8       	lddpc	r8,800040a0 <twim_master_interrupt_handler+0x130>
80003ff2:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80003ff4:	4a c8       	lddpc	r8,800040a4 <twim_master_interrupt_handler+0x134>
80003ff6:	70 08       	ld.w	r8,r8[0x0]
80003ff8:	f0 c9 00 01 	sub	r9,r8,1
80003ffc:	4a a8       	lddpc	r8,800040a4 <twim_master_interrupt_handler+0x134>
80003ffe:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004000:	4a 98       	lddpc	r8,800040a4 <twim_master_interrupt_handler+0x134>
80004002:	70 08       	ld.w	r8,r8[0x0]
80004004:	58 08       	cp.w	r8,0
80004006:	c4 11       	brne	80004088 <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004008:	4a 28       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
8000400a:	70 08       	ld.w	r8,r8[0x0]
8000400c:	30 19       	mov	r9,1
8000400e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004010:	4a 39       	lddpc	r9,8000409c <twim_master_interrupt_handler+0x12c>
80004012:	30 08       	mov	r8,0
80004014:	b2 88       	st.b	r9[0x0],r8
80004016:	c3 98       	rjmp	80004088 <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000401c:	e2 18 00 02 	andl	r8,0x2,COH
80004020:	c3 40       	breq	80004088 <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004022:	4a 28       	lddpc	r8,800040a8 <twim_master_interrupt_handler+0x138>
80004024:	70 08       	ld.w	r8,r8[0x0]
80004026:	58 08       	cp.w	r8,0
80004028:	c0 91       	brne	8000403a <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000402a:	49 a8       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
8000402c:	70 08       	ld.w	r8,r8[0x0]
8000402e:	30 29       	mov	r9,2
80004030:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004032:	49 b9       	lddpc	r9,8000409c <twim_master_interrupt_handler+0x12c>
80004034:	30 08       	mov	r8,0
80004036:	b2 88       	st.b	r9[0x0],r8
80004038:	c2 88       	rjmp	80004088 <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8000403a:	49 68       	lddpc	r8,80004090 <twim_master_interrupt_handler+0x120>
8000403c:	70 0a       	ld.w	r10,r8[0x0]
8000403e:	49 c8       	lddpc	r8,800040ac <twim_master_interrupt_handler+0x13c>
80004040:	70 08       	ld.w	r8,r8[0x0]
80004042:	11 89       	ld.ub	r9,r8[0x0]
80004044:	5c 59       	castu.b	r9
80004046:	95 69       	st.w	r10[0x18],r9
80004048:	f0 c9 ff ff 	sub	r9,r8,-1
8000404c:	49 88       	lddpc	r8,800040ac <twim_master_interrupt_handler+0x13c>
8000404e:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004050:	49 68       	lddpc	r8,800040a8 <twim_master_interrupt_handler+0x138>
80004052:	70 08       	ld.w	r8,r8[0x0]
80004054:	f0 c9 00 01 	sub	r9,r8,1
80004058:	49 48       	lddpc	r8,800040a8 <twim_master_interrupt_handler+0x138>
8000405a:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000405c:	49 38       	lddpc	r8,800040a8 <twim_master_interrupt_handler+0x138>
8000405e:	70 08       	ld.w	r8,r8[0x0]
80004060:	58 08       	cp.w	r8,0
80004062:	c1 31       	brne	80004088 <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004064:	48 e8       	lddpc	r8,8000409c <twim_master_interrupt_handler+0x12c>
80004066:	11 88       	ld.ub	r8,r8[0x0]
80004068:	5c 58       	castu.b	r8
8000406a:	c0 f0       	breq	80004088 <twim_master_interrupt_handler+0x118>
					twim_next = false;
8000406c:	48 c9       	lddpc	r9,8000409c <twim_master_interrupt_handler+0x12c>
8000406e:	30 08       	mov	r8,0
80004070:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004072:	49 08       	lddpc	r8,800040b0 <twim_master_interrupt_handler+0x140>
80004074:	70 08       	ld.w	r8,r8[0x0]
80004076:	70 39       	ld.w	r9,r8[0xc]
80004078:	48 c8       	lddpc	r8,800040a8 <twim_master_interrupt_handler+0x138>
8000407a:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8000407c:	48 d8       	lddpc	r8,800040b0 <twim_master_interrupt_handler+0x140>
8000407e:	70 08       	ld.w	r8,r8[0x0]
80004080:	70 28       	ld.w	r8,r8[0x8]
80004082:	10 99       	mov	r9,r8
80004084:	48 a8       	lddpc	r8,800040ac <twim_master_interrupt_handler+0x13c>
80004086:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004088:	2f fd       	sub	sp,-4
8000408a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000408e:	d6 03       	rete
80004090:	00 00       	add	r0,r0
80004092:	01 1c       	ld.sh	r12,r0++
80004094:	00 00       	add	r0,r0
80004096:	01 34       	ld.ub	r4,r0++
80004098:	00 00       	add	r0,r0
8000409a:	01 28       	ld.uh	r8,r0++
8000409c:	00 00       	add	r0,r0
8000409e:	01 3c       	ld.ub	r12,r0++
800040a0:	00 00       	add	r0,r0
800040a2:	01 24       	ld.uh	r4,r0++
800040a4:	00 00       	add	r0,r0
800040a6:	01 30       	ld.ub	r0,r0++
800040a8:	00 00       	add	r0,r0
800040aa:	01 2c       	ld.uh	r12,r0++
800040ac:	00 00       	add	r0,r0
800040ae:	01 20       	ld.uh	r0,r0++
800040b0:	00 00       	add	r0,r0
800040b2:	01 38       	ld.ub	r8,r0++

800040b4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800040b4:	eb cd 40 80 	pushm	r7,lr
800040b8:	1a 97       	mov	r7,sp
800040ba:	20 5d       	sub	sp,20
800040bc:	ef 4c ff f4 	st.w	r7[-12],r12
800040c0:	ef 4b ff f0 	st.w	r7[-16],r11
800040c4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
800040c8:	30 08       	mov	r8,0
800040ca:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
800040ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800040d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040d6:	f0 09 0d 08 	divu	r8,r8,r9
800040da:	a1 98       	lsr	r8,0x1
800040dc:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800040e0:	c0 b8       	rjmp	800040f6 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
800040e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800040e6:	2f f8       	sub	r8,-1
800040e8:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
800040ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040f0:	a1 98       	lsr	r8,0x1
800040f2:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800040f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040fa:	e0 48 00 ff 	cp.w	r8,255
800040fe:	e0 88 00 09 	brls	80004110 <twim_set_speed+0x5c>
80004102:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004106:	30 78       	mov	r8,7
80004108:	f0 09 18 00 	cp.b	r9,r8
8000410c:	fe 98 ff eb 	brls	800040e2 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004110:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004114:	30 78       	mov	r8,7
80004116:	f0 09 18 00 	cp.b	r9,r8
8000411a:	e0 88 00 04 	brls	80004122 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8000411e:	3f 88       	mov	r8,-8
80004120:	c1 a8       	rjmp	80004154 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004122:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004126:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000412a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000412e:	a1 98       	lsr	r8,0x1
80004130:	ee fa ff f8 	ld.w	r10,r7[-8]
80004134:	f4 08 01 08 	sub	r8,r10,r8
80004138:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
8000413a:	10 49       	or	r9,r8
8000413c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004140:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004142:	10 49       	or	r9,r8
80004144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004148:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000414a:	10 49       	or	r9,r8
8000414c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004150:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004152:	30 08       	mov	r8,0
}
80004154:	10 9c       	mov	r12,r8
80004156:	2f bd       	sub	sp,-20
80004158:	e3 cd 80 80 	ldm	sp++,r7,pc

8000415c <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8000415c:	eb cd 40 80 	pushm	r7,lr
80004160:	1a 97       	mov	r7,sp
80004162:	20 4d       	sub	sp,16
80004164:	ef 4c ff f4 	st.w	r7[-12],r12
80004168:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000416c:	e1 b8 00 00 	mfsr	r8,0x0
80004170:	10 9c       	mov	r12,r8
80004172:	f0 1f 00 37 	mcall	8000424c <twim_master_init+0xf0>
80004176:	18 98       	mov	r8,r12
80004178:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000417c:	4b 58       	lddpc	r8,80004250 <twim_master_init+0xf4>
8000417e:	30 09       	mov	r9,0
80004180:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80004182:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004186:	30 08       	mov	r8,0
80004188:	f0 09 18 00 	cp.b	r9,r8
8000418c:	c0 20       	breq	80004190 <twim_master_init+0x34>
		cpu_irq_disable ();
8000418e:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80004190:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004194:	3f f9       	mov	r9,-1
80004196:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004198:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000419c:	30 19       	mov	r9,1
8000419e:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800041a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041a4:	e0 69 00 80 	mov	r9,128
800041a8:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
800041aa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800041ae:	30 08       	mov	r8,0
800041b0:	f0 09 18 00 	cp.b	r9,r8
800041b4:	c0 20       	breq	800041b8 <twim_master_init+0x5c>
		cpu_irq_enable ();
800041b6:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
800041b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041bc:	3f f9       	mov	r9,-1
800041be:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
800041c0:	f0 1f 00 25 	mcall	80004254 <twim_master_init+0xf8>
800041c4:	18 98       	mov	r8,r12
800041c6:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
800041ca:	30 1a       	mov	r10,1
800041cc:	e0 6b 02 80 	mov	r11,640
800041d0:	4a 2c       	lddpc	r12,80004258 <twim_master_init+0xfc>
800041d2:	f0 1f 00 23 	mcall	8000425c <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
800041d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800041da:	f0 1f 00 22 	mcall	80004260 <twim_master_init+0x104>

	if (opt->smbus) {
800041de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041e2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800041e6:	58 08       	cp.w	r8,0
800041e8:	c0 90       	breq	800041fa <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800041ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041ee:	31 09       	mov	r9,16
800041f0:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
800041f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041f6:	3f f9       	mov	r9,-1
800041f8:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800041fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041fe:	70 09       	ld.w	r9,r8[0x0]
80004200:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004204:	70 18       	ld.w	r8,r8[0x4]
80004206:	12 9a       	mov	r10,r9
80004208:	10 9b       	mov	r11,r8
8000420a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000420e:	f0 1f 00 16 	mcall	80004264 <twim_master_init+0x108>
80004212:	18 98       	mov	r8,r12
80004214:	5b 88       	cp.w	r8,-8
80004216:	c0 31       	brne	8000421c <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
80004218:	3f 88       	mov	r8,-8
8000421a:	c1 48       	rjmp	80004242 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8000421c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004220:	70 28       	ld.w	r8,r8[0x8]
80004222:	10 9b       	mov	r11,r8
80004224:	ee fc ff f4 	ld.w	r12,r7[-12]
80004228:	f0 1f 00 10 	mcall	80004268 <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000422c:	48 98       	lddpc	r8,80004250 <twim_master_init+0xf4>
8000422e:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004230:	5b c8       	cp.w	r8,-4
80004232:	c0 50       	breq	8000423c <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004234:	48 78       	lddpc	r8,80004250 <twim_master_init+0xf4>
80004236:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004238:	5b e8       	cp.w	r8,-2
8000423a:	c0 31       	brne	80004240 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8000423c:	3f f8       	mov	r8,-1
8000423e:	c0 28       	rjmp	80004242 <twim_master_init+0xe6>
	}
	return STATUS_OK;
80004240:	30 08       	mov	r8,0
}
80004242:	10 9c       	mov	r12,r8
80004244:	2f cd       	sub	sp,-16
80004246:	e3 cd 80 80 	ldm	sp++,r7,pc
8000424a:	00 00       	add	r0,r0
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	3f 28       	mov	r8,-14
80004250:	00 00       	add	r0,r0
80004252:	01 28       	ld.uh	r8,r0++
80004254:	80 00       	ld.sh	r0,r0[0x0]
80004256:	3f 0a       	mov	r10,-16
80004258:	80 00       	ld.sh	r0,r0[0x0]
8000425a:	3f 70       	mov	r0,-9
8000425c:	80 00       	ld.sh	r0,r0[0x0]
8000425e:	37 9c       	mov	r12,121
80004260:	80 00       	ld.sh	r0,r0[0x0]
80004262:	3f 48       	mov	r8,-12
80004264:	80 00       	ld.sh	r0,r0[0x0]
80004266:	40 b4       	lddsp	r4,sp[0x2c]
80004268:	80 00       	ld.sh	r0,r0[0x0]
8000426a:	42 b0       	lddsp	r0,sp[0xac]

8000426c <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8000426c:	eb cd 40 80 	pushm	r7,lr
80004270:	1a 97       	mov	r7,sp
80004272:	20 2d       	sub	sp,8
80004274:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80004278:	e1 b8 00 00 	mfsr	r8,0x0
8000427c:	10 9c       	mov	r12,r8
8000427e:	f0 1f 00 0c 	mcall	800042ac <twim_disable_interrupt+0x40>
80004282:	18 98       	mov	r8,r12
80004284:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
80004288:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000428c:	30 08       	mov	r8,0
8000428e:	f0 09 18 00 	cp.b	r9,r8
80004292:	c0 20       	breq	80004296 <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80004294:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80004296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000429a:	3f f9       	mov	r9,-1
8000429c:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8000429e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042a2:	3f f9       	mov	r9,-1
800042a4:	91 b9       	st.w	r8[0x2c],r9
}
800042a6:	2f ed       	sub	sp,-8
800042a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800042ac:	80 00       	ld.sh	r0,r0[0x0]
800042ae:	3f 28       	mov	r8,-14

800042b0 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800042b0:	eb cd 40 80 	pushm	r7,lr
800042b4:	1a 97       	mov	r7,sp
800042b6:	20 3d       	sub	sp,12
800042b8:	ef 4c ff f8 	st.w	r7[-8],r12
800042bc:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
800042c0:	30 08       	mov	r8,0
800042c2:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
800042c6:	ee cb 00 04 	sub	r11,r7,4
800042ca:	30 08       	mov	r8,0
800042cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800042d0:	30 0a       	mov	r10,0
800042d2:	ee fc ff f8 	ld.w	r12,r7[-8]
800042d6:	f0 1f 00 04 	mcall	800042e4 <twim_probe+0x34>
800042da:	18 98       	mov	r8,r12
}
800042dc:	10 9c       	mov	r12,r8
800042de:	2f dd       	sub	sp,-12
800042e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800042e4:	80 00       	ld.sh	r0,r0[0x0]
800042e6:	45 98       	lddsp	r8,sp[0x164]

800042e8 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
800042e8:	eb cd 40 80 	pushm	r7,lr
800042ec:	1a 97       	mov	r7,sp
800042ee:	20 2d       	sub	sp,8
800042f0:	ef 4c ff fc 	st.w	r7[-4],r12
800042f4:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800042f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042fc:	30 29       	mov	r9,2
800042fe:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80004300:	4c f8       	lddpc	r8,8000443c <twim_read_packet+0x154>
80004302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004306:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80004308:	4c d8       	lddpc	r8,8000443c <twim_read_packet+0x154>
8000430a:	70 08       	ld.w	r8,r8[0x0]
8000430c:	10 9c       	mov	r12,r8
8000430e:	f0 1f 00 4d 	mcall	80004440 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80004312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004316:	70 28       	ld.w	r8,r8[0x8]
80004318:	10 99       	mov	r9,r8
8000431a:	4c b8       	lddpc	r8,80004444 <twim_read_packet+0x15c>
8000431c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000431e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004322:	70 39       	ld.w	r9,r8[0xc]
80004324:	4c 98       	lddpc	r8,80004448 <twim_read_packet+0x160>
80004326:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80004328:	4c 99       	lddpc	r9,8000444c <twim_read_packet+0x164>
8000432a:	30 08       	mov	r8,0
8000432c:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000432e:	4c 98       	lddpc	r8,80004450 <twim_read_packet+0x168>
80004330:	30 09       	mov	r9,0
80004332:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
80004334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004338:	11 f8       	ld.ub	r8,r8[0x7]
8000433a:	58 08       	cp.w	r8,0
8000433c:	c3 f0       	breq	800043ba <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000433e:	4c 08       	lddpc	r8,8000443c <twim_read_packet+0x154>
80004340:	70 08       	ld.w	r8,r8[0x0]
80004342:	30 19       	mov	r9,1
80004344:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80004346:	4b e8       	lddpc	r8,8000443c <twim_read_packet+0x154>
80004348:	70 08       	ld.w	r8,r8[0x0]
8000434a:	e0 69 00 80 	mov	r9,128
8000434e:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80004350:	4b b8       	lddpc	r8,8000443c <twim_read_packet+0x154>
80004352:	70 08       	ld.w	r8,r8[0x0]
80004354:	30 29       	mov	r9,2
80004356:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80004358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000435c:	2f c8       	sub	r8,-4
8000435e:	10 99       	mov	r9,r8
80004360:	4b d8       	lddpc	r8,80004454 <twim_read_packet+0x16c>
80004362:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80004364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004368:	11 f8       	ld.ub	r8,r8[0x7]
8000436a:	10 99       	mov	r9,r8
8000436c:	4b b8       	lddpc	r8,80004458 <twim_read_packet+0x170>
8000436e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80004370:	4b b8       	lddpc	r8,8000445c <twim_read_packet+0x174>
80004372:	e0 69 07 03 	mov	r9,1795
80004376:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004378:	4b 18       	lddpc	r8,8000443c <twim_read_packet+0x154>
8000437a:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000437c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004380:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004382:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004386:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000438a:	13 f9       	ld.ub	r9,r9[0x7]
8000438c:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000438e:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004392:	e8 19 a0 00 	orl	r9,0xa000
80004396:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80004398:	4a 98       	lddpc	r8,8000443c <twim_read_packet+0x154>
8000439a:	70 08       	ld.w	r8,r8[0x0]
8000439c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043a0:	72 09       	ld.w	r9,r9[0x0]
800043a2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800043a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043aa:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800043ac:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800043ae:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
800043b2:	e8 19 e0 01 	orl	r9,0xe001
800043b6:	91 49       	st.w	r8[0x10],r9
800043b8:	c1 88       	rjmp	800043e8 <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800043ba:	4a 88       	lddpc	r8,80004458 <twim_read_packet+0x170>
800043bc:	30 09       	mov	r9,0
800043be:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800043c0:	4a 78       	lddpc	r8,8000445c <twim_read_packet+0x174>
800043c2:	e0 69 07 01 	mov	r9,1793
800043c6:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800043c8:	49 d8       	lddpc	r8,8000443c <twim_read_packet+0x154>
800043ca:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800043cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d0:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800043d2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800043d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043da:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800043dc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800043de:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800043e2:	e8 19 e0 01 	orl	r9,0xe001
800043e6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800043e8:	49 58       	lddpc	r8,8000443c <twim_read_packet+0x154>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	49 c9       	lddpc	r9,8000445c <twim_read_packet+0x174>
800043ee:	72 09       	ld.w	r9,r9[0x0]
800043f0:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800043f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043f6:	30 19       	mov	r9,1
800043f8:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800043fa:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800043fc:	c0 38       	rjmp	80004402 <twim_read_packet+0x11a>
		cpu_relax();
800043fe:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80004402:	49 48       	lddpc	r8,80004450 <twim_read_packet+0x168>
80004404:	70 08       	ld.w	r8,r8[0x0]
80004406:	58 08       	cp.w	r8,0
80004408:	c0 61       	brne	80004414 <twim_read_packet+0x12c>
8000440a:	f0 1f 00 16 	mcall	80004460 <twim_read_packet+0x178>
8000440e:	18 98       	mov	r8,r12
80004410:	58 08       	cp.w	r8,0
80004412:	cf 60       	breq	800043fe <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004418:	30 29       	mov	r9,2
8000441a:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000441c:	48 d8       	lddpc	r8,80004450 <twim_read_packet+0x168>
8000441e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80004420:	5b c8       	cp.w	r8,-4
80004422:	c0 50       	breq	8000442c <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004424:	48 b8       	lddpc	r8,80004450 <twim_read_packet+0x168>
80004426:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80004428:	5b e8       	cp.w	r8,-2
8000442a:	c0 31       	brne	80004430 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8000442c:	3f f8       	mov	r8,-1
8000442e:	c0 28       	rjmp	80004432 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
80004430:	30 08       	mov	r8,0
}
80004432:	10 9c       	mov	r12,r8
80004434:	2f ed       	sub	sp,-8
80004436:	e3 cd 80 80 	ldm	sp++,r7,pc
8000443a:	00 00       	add	r0,r0
8000443c:	00 00       	add	r0,r0
8000443e:	01 1c       	ld.sh	r12,r0++
80004440:	80 00       	ld.sh	r0,r0[0x0]
80004442:	42 6c       	lddsp	r12,sp[0x98]
80004444:	00 00       	add	r0,r0
80004446:	01 24       	ld.uh	r4,r0++
80004448:	00 00       	add	r0,r0
8000444a:	01 30       	ld.ub	r0,r0++
8000444c:	00 00       	add	r0,r0
8000444e:	01 3c       	ld.ub	r12,r0++
80004450:	00 00       	add	r0,r0
80004452:	01 28       	ld.uh	r8,r0++
80004454:	00 00       	add	r0,r0
80004456:	01 20       	ld.uh	r0,r0++
80004458:	00 00       	add	r0,r0
8000445a:	01 2c       	ld.uh	r12,r0++
8000445c:	00 00       	add	r0,r0
8000445e:	01 34       	ld.ub	r4,r0++
80004460:	80 00       	ld.sh	r0,r0[0x0]
80004462:	46 94       	lddsp	r4,sp[0x1a4]

80004464 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80004464:	eb cd 40 80 	pushm	r7,lr
80004468:	1a 97       	mov	r7,sp
8000446a:	20 2d       	sub	sp,8
8000446c:	ef 4c ff fc 	st.w	r7[-4],r12
80004470:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004474:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004478:	30 19       	mov	r9,1
8000447a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000447c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004480:	e0 69 00 80 	mov	r9,128
80004484:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000448a:	30 29       	mov	r9,2
8000448c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000448e:	4b a8       	lddpc	r8,80004574 <twim_write_packet+0x110>
80004490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004494:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80004496:	4b 88       	lddpc	r8,80004574 <twim_write_packet+0x110>
80004498:	70 08       	ld.w	r8,r8[0x0]
8000449a:	10 9c       	mov	r12,r8
8000449c:	f0 1f 00 37 	mcall	80004578 <twim_write_packet+0x114>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800044a0:	4b 78       	lddpc	r8,8000457c <twim_write_packet+0x118>
800044a2:	30 09       	mov	r9,0
800044a4:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800044a6:	4b 78       	lddpc	r8,80004580 <twim_write_packet+0x11c>
800044a8:	e0 69 07 02 	mov	r9,1794
800044ac:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
800044ae:	4b 69       	lddpc	r9,80004584 <twim_write_packet+0x120>
800044b0:	30 08       	mov	r8,0
800044b2:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
800044b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044b8:	11 f8       	ld.ub	r8,r8[0x7]
800044ba:	58 08       	cp.w	r8,0
800044bc:	c1 50       	breq	800044e6 <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800044be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044c2:	2f c8       	sub	r8,-4
800044c4:	10 99       	mov	r9,r8
800044c6:	4b 18       	lddpc	r8,80004588 <twim_write_packet+0x124>
800044c8:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800044ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044ce:	11 f8       	ld.ub	r8,r8[0x7]
800044d0:	10 99       	mov	r9,r8
800044d2:	4a f8       	lddpc	r8,8000458c <twim_write_packet+0x128>
800044d4:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
800044d6:	4a c9       	lddpc	r9,80004584 <twim_write_packet+0x120>
800044d8:	30 18       	mov	r8,1
800044da:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
800044dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044e0:	4a c8       	lddpc	r8,80004590 <twim_write_packet+0x12c>
800044e2:	91 09       	st.w	r8[0x0],r9
800044e4:	c0 c8       	rjmp	800044fc <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
800044e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044ea:	70 28       	ld.w	r8,r8[0x8]
800044ec:	10 99       	mov	r9,r8
800044ee:	4a 78       	lddpc	r8,80004588 <twim_write_packet+0x124>
800044f0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
800044f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044f6:	70 39       	ld.w	r9,r8[0xc]
800044f8:	4a 58       	lddpc	r8,8000458c <twim_write_packet+0x128>
800044fa:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800044fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004500:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004502:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
80004506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000450a:	70 3a       	ld.w	r10,r8[0xc]
8000450c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004510:	11 f8       	ld.ub	r8,r8[0x7]
80004512:	f4 08 00 08 	add	r8,r10,r8
80004516:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80004518:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000451c:	10 99       	mov	r9,r8
8000451e:	e8 19 e0 00 	orl	r9,0xe000
80004522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004526:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80004528:	49 38       	lddpc	r8,80004574 <twim_write_packet+0x110>
8000452a:	70 08       	ld.w	r8,r8[0x0]
8000452c:	49 59       	lddpc	r9,80004580 <twim_write_packet+0x11c>
8000452e:	72 09       	ld.w	r9,r9[0x0]
80004530:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80004532:	49 18       	lddpc	r8,80004574 <twim_write_packet+0x110>
80004534:	70 08       	ld.w	r8,r8[0x0]
80004536:	30 19       	mov	r9,1
80004538:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000453a:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000453c:	c0 38       	rjmp	80004542 <twim_write_packet+0xde>
		cpu_relax();
8000453e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004542:	48 f8       	lddpc	r8,8000457c <twim_write_packet+0x118>
80004544:	70 08       	ld.w	r8,r8[0x0]
80004546:	58 08       	cp.w	r8,0
80004548:	c0 61       	brne	80004554 <twim_write_packet+0xf0>
8000454a:	f0 1f 00 13 	mcall	80004594 <twim_write_packet+0x130>
8000454e:	18 98       	mov	r8,r12
80004550:	58 08       	cp.w	r8,0
80004552:	cf 60       	breq	8000453e <twim_write_packet+0xda>
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004554:	48 a8       	lddpc	r8,8000457c <twim_write_packet+0x118>
80004556:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80004558:	5b c8       	cp.w	r8,-4
8000455a:	c0 50       	breq	80004564 <twim_write_packet+0x100>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000455c:	48 88       	lddpc	r8,8000457c <twim_write_packet+0x118>
8000455e:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80004560:	5b e8       	cp.w	r8,-2
80004562:	c0 31       	brne	80004568 <twim_write_packet+0x104>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004564:	3f f8       	mov	r8,-1
80004566:	c0 28       	rjmp	8000456a <twim_write_packet+0x106>
	}
	return STATUS_OK;
80004568:	30 08       	mov	r8,0
}
8000456a:	10 9c       	mov	r12,r8
8000456c:	2f ed       	sub	sp,-8
8000456e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004572:	00 00       	add	r0,r0
80004574:	00 00       	add	r0,r0
80004576:	01 1c       	ld.sh	r12,r0++
80004578:	80 00       	ld.sh	r0,r0[0x0]
8000457a:	42 6c       	lddsp	r12,sp[0x98]
8000457c:	00 00       	add	r0,r0
8000457e:	01 28       	ld.uh	r8,r0++
80004580:	00 00       	add	r0,r0
80004582:	01 34       	ld.ub	r4,r0++
80004584:	00 00       	add	r0,r0
80004586:	01 3c       	ld.ub	r12,r0++
80004588:	00 00       	add	r0,r0
8000458a:	01 20       	ld.uh	r0,r0++
8000458c:	00 00       	add	r0,r0
8000458e:	01 2c       	ld.uh	r12,r0++
80004590:	00 00       	add	r0,r0
80004592:	01 38       	ld.ub	r8,r0++
80004594:	80 00       	ld.sh	r0,r0[0x0]
80004596:	46 94       	lddsp	r4,sp[0x1a4]

80004598 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80004598:	eb cd 40 80 	pushm	r7,lr
8000459c:	1a 97       	mov	r7,sp
8000459e:	20 5d       	sub	sp,20
800045a0:	ef 4c ff fc 	st.w	r7[-4],r12
800045a4:	ef 4b ff f8 	st.w	r7[-8],r11
800045a8:	ef 4a ff f4 	st.w	r7[-12],r10
800045ac:	ef 49 ff f0 	st.w	r7[-16],r9
800045b0:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800045b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045b8:	30 19       	mov	r9,1
800045ba:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800045bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045c0:	e0 69 00 80 	mov	r9,128
800045c4:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800045c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045ca:	30 29       	mov	r9,2
800045cc:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800045ce:	4a a8       	lddpc	r8,80004674 <twim_write+0xdc>
800045d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800045d4:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800045d6:	4a 88       	lddpc	r8,80004674 <twim_write+0xdc>
800045d8:	70 08       	ld.w	r8,r8[0x0]
800045da:	10 9c       	mov	r12,r8
800045dc:	f0 1f 00 27 	mcall	80004678 <twim_write+0xe0>
	// get a pointer to applicative data
	twim_tx_data = buffer;
800045e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045e4:	4a 68       	lddpc	r8,8000467c <twim_write+0xe4>
800045e6:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800045e8:	4a 68       	lddpc	r8,80004680 <twim_write+0xe8>
800045ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800045ee:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
800045f0:	4a 59       	lddpc	r9,80004684 <twim_write+0xec>
800045f2:	30 08       	mov	r8,0
800045f4:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800045f6:	4a 58       	lddpc	r8,80004688 <twim_write+0xf0>
800045f8:	30 09       	mov	r9,0
800045fa:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800045fc:	49 e8       	lddpc	r8,80004674 <twim_write+0xdc>
800045fe:	70 08       	ld.w	r8,r8[0x0]
80004600:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004604:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004608:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000460c:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8000460e:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
80004610:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80004614:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80004616:	f5 e9 10 09 	or	r9,r10,r9
8000461a:	e8 19 e0 00 	orl	r9,0xe000
8000461e:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80004620:	49 b8       	lddpc	r8,8000468c <twim_write+0xf4>
80004622:	e0 69 03 02 	mov	r9,770
80004626:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80004628:	49 38       	lddpc	r8,80004674 <twim_write+0xdc>
8000462a:	70 08       	ld.w	r8,r8[0x0]
8000462c:	49 89       	lddpc	r9,8000468c <twim_write+0xf4>
8000462e:	72 09       	ld.w	r9,r9[0x0]
80004630:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80004632:	49 18       	lddpc	r8,80004674 <twim_write+0xdc>
80004634:	70 08       	ld.w	r8,r8[0x0]
80004636:	30 19       	mov	r9,1
80004638:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000463a:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000463c:	c0 38       	rjmp	80004642 <twim_write+0xaa>
		cpu_relax();
8000463e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004642:	49 28       	lddpc	r8,80004688 <twim_write+0xf0>
80004644:	70 08       	ld.w	r8,r8[0x0]
80004646:	58 08       	cp.w	r8,0
80004648:	c0 61       	brne	80004654 <twim_write+0xbc>
8000464a:	f0 1f 00 12 	mcall	80004690 <twim_write+0xf8>
8000464e:	18 98       	mov	r8,r12
80004650:	58 08       	cp.w	r8,0
80004652:	cf 60       	breq	8000463e <twim_write+0xa6>
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004654:	48 d8       	lddpc	r8,80004688 <twim_write+0xf0>
80004656:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80004658:	5b c8       	cp.w	r8,-4
8000465a:	c0 50       	breq	80004664 <twim_write+0xcc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000465c:	48 b8       	lddpc	r8,80004688 <twim_write+0xf0>
8000465e:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80004660:	5b e8       	cp.w	r8,-2
80004662:	c0 31       	brne	80004668 <twim_write+0xd0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004664:	3f f8       	mov	r8,-1
80004666:	c0 28       	rjmp	8000466a <twim_write+0xd2>
	}
	return STATUS_OK;
80004668:	30 08       	mov	r8,0
}
8000466a:	10 9c       	mov	r12,r8
8000466c:	2f bd       	sub	sp,-20
8000466e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004672:	00 00       	add	r0,r0
80004674:	00 00       	add	r0,r0
80004676:	01 1c       	ld.sh	r12,r0++
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	42 6c       	lddsp	r12,sp[0x98]
8000467c:	00 00       	add	r0,r0
8000467e:	01 20       	ld.uh	r0,r0++
80004680:	00 00       	add	r0,r0
80004682:	01 2c       	ld.uh	r12,r0++
80004684:	00 00       	add	r0,r0
80004686:	01 3c       	ld.ub	r12,r0++
80004688:	00 00       	add	r0,r0
8000468a:	01 28       	ld.uh	r8,r0++
8000468c:	00 00       	add	r0,r0
8000468e:	01 34       	ld.ub	r4,r0++
80004690:	80 00       	ld.sh	r0,r0[0x0]
80004692:	46 94       	lddsp	r4,sp[0x1a4]

80004694 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80004694:	eb cd 40 80 	pushm	r7,lr
80004698:	1a 97       	mov	r7,sp
8000469a:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
8000469c:	48 98       	lddpc	r8,800046c0 <twim_status+0x2c>
8000469e:	70 08       	ld.w	r8,r8[0x0]
800046a0:	70 78       	ld.w	r8,r8[0x1c]
800046a2:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
800046a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046aa:	e2 18 00 10 	andl	r8,0x10,COH
800046ae:	c0 30       	breq	800046b4 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
800046b0:	30 18       	mov	r8,1
800046b2:	c0 28       	rjmp	800046b6 <twim_status+0x22>
	} else {
		return 0;
800046b4:	30 08       	mov	r8,0
	}
}
800046b6:	10 9c       	mov	r12,r8
800046b8:	2f fd       	sub	sp,-4
800046ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800046be:	00 00       	add	r0,r0
800046c0:	00 00       	add	r0,r0
800046c2:	01 1c       	ld.sh	r12,r0++

800046c4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800046c4:	eb cd 40 80 	pushm	r7,lr
800046c8:	1a 97       	mov	r7,sp
800046ca:	20 1d       	sub	sp,4
800046cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	e6 18 00 01 	andh	r8,0x1,COH
800046d8:	5f 08       	sreq	r8
800046da:	5c 58       	castu.b	r8
}
800046dc:	10 9c       	mov	r12,r8
800046de:	2f fd       	sub	sp,-4
800046e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800046e4 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800046e4:	eb cd 40 80 	pushm	r7,lr
800046e8:	1a 97       	mov	r7,sp
800046ea:	20 7d       	sub	sp,28
800046ec:	ef 4c ff ec 	st.w	r7[-20],r12
800046f0:	ef 4b ff e8 	st.w	r7[-24],r11
800046f4:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800046f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800046fc:	f0 09 15 04 	lsl	r9,r8,0x4
80004700:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004704:	10 39       	cp.w	r9,r8
80004706:	e0 8b 00 04 	brhi	8000470e <usart_set_async_baudrate+0x2a>
8000470a:	31 08       	mov	r8,16
8000470c:	c0 28       	rjmp	80004710 <usart_set_async_baudrate+0x2c>
8000470e:	30 88       	mov	r8,8
80004710:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004714:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004718:	f0 09 15 03 	lsl	r9,r8,0x3
8000471c:	ee fa ff f0 	ld.w	r10,r7[-16]
80004720:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004724:	f4 08 02 48 	mul	r8,r10,r8
80004728:	a1 98       	lsr	r8,0x1
8000472a:	f2 08 00 08 	add	r8,r9,r8
8000472e:	ee fa ff f0 	ld.w	r10,r7[-16]
80004732:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004736:	f4 09 02 49 	mul	r9,r10,r9
8000473a:	f0 09 0d 08 	divu	r8,r8,r9
8000473e:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004742:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004746:	a3 98       	lsr	r8,0x3
80004748:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000474c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004750:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004754:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80004758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000475c:	58 08       	cp.w	r8,0
8000475e:	c0 70       	breq	8000476c <usart_set_async_baudrate+0x88>
80004760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004764:	e0 48 ff ff 	cp.w	r8,65535
80004768:	e0 88 00 04 	brls	80004770 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8000476c:	30 18       	mov	r8,1
8000476e:	c2 08       	rjmp	800047ae <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004770:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004774:	70 18       	ld.w	r8,r8[0x4]
80004776:	10 99       	mov	r9,r8
80004778:	e4 19 ff f7 	andh	r9,0xfff7
8000477c:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004780:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004784:	59 08       	cp.w	r8,16
80004786:	c0 40       	breq	8000478e <usart_set_async_baudrate+0xaa>
80004788:	e8 68 00 00 	mov	r8,524288
8000478c:	c0 28       	rjmp	80004790 <usart_set_async_baudrate+0xac>
8000478e:	30 08       	mov	r8,0
80004790:	10 49       	or	r9,r8
80004792:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004796:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80004798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000479c:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800047a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a4:	10 49       	or	r9,r8
800047a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047aa:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800047ac:	30 08       	mov	r8,0
}
800047ae:	10 9c       	mov	r12,r8
800047b0:	2f 9d       	sub	sp,-28
800047b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800047b6:	d7 03       	nop

800047b8 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800047b8:	eb cd 40 80 	pushm	r7,lr
800047bc:	1a 97       	mov	r7,sp
800047be:	20 2d       	sub	sp,8
800047c0:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800047c4:	e1 b8 00 00 	mfsr	r8,0x0
800047c8:	10 9c       	mov	r12,r8
800047ca:	f0 1f 00 18 	mcall	80004828 <usart_reset+0x70>
800047ce:	18 98       	mov	r8,r12
800047d0:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800047d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047d8:	30 08       	mov	r8,0
800047da:	f0 09 18 00 	cp.b	r9,r8
800047de:	c0 20       	breq	800047e2 <usart_reset+0x2a>
800047e0:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800047e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047e6:	3f f9       	mov	r9,-1
800047e8:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800047ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ee:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800047f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047f4:	30 08       	mov	r8,0
800047f6:	f0 09 18 00 	cp.b	r9,r8
800047fa:	c0 20       	breq	800047fe <usart_reset+0x46>
800047fc:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800047fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004802:	30 09       	mov	r9,0
80004804:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80004806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000480a:	30 09       	mov	r9,0
8000480c:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000480e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004812:	30 09       	mov	r9,0
80004814:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000481a:	e8 69 61 0c 	mov	r9,549132
8000481e:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004820:	2f ed       	sub	sp,-8
80004822:	e3 cd 80 80 	ldm	sp++,r7,pc
80004826:	00 00       	add	r0,r0
80004828:	80 00       	ld.sh	r0,r0[0x0]
8000482a:	46 c4       	lddsp	r4,sp[0x1b0]

8000482c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000482c:	eb cd 40 80 	pushm	r7,lr
80004830:	1a 97       	mov	r7,sp
80004832:	20 3d       	sub	sp,12
80004834:	ef 4c ff fc 	st.w	r7[-4],r12
80004838:	ef 4b ff f8 	st.w	r7[-8],r11
8000483c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004840:	ee fc ff fc 	ld.w	r12,r7[-4]
80004844:	f0 1f 00 54 	mcall	80004994 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80004848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000484c:	58 08       	cp.w	r8,0
8000484e:	c3 90       	breq	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004854:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004856:	30 48       	mov	r8,4
80004858:	f0 09 18 00 	cp.b	r9,r8
8000485c:	e0 88 00 32 	brls	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004864:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004866:	30 98       	mov	r8,9
80004868:	f0 09 18 00 	cp.b	r9,r8
8000486c:	e0 8b 00 2a 	brhi	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004874:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004876:	30 78       	mov	r8,7
80004878:	f0 09 18 00 	cp.b	r9,r8
8000487c:	e0 8b 00 22 	brhi	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80004880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004884:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004886:	e0 68 01 01 	mov	r8,257
8000488a:	f0 09 19 00 	cp.h	r9,r8
8000488e:	e0 8b 00 19 	brhi	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80004892:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004896:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000489a:	30 38       	mov	r8,3
8000489c:	f0 09 18 00 	cp.b	r9,r8
800048a0:	e0 8b 00 10 	brhi	800048c0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800048a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	70 08       	ld.w	r8,r8[0x0]
800048ae:	12 9a       	mov	r10,r9
800048b0:	10 9b       	mov	r11,r8
800048b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800048b6:	f0 1f 00 39 	mcall	80004998 <usart_init_rs232+0x16c>
800048ba:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800048bc:	58 18       	cp.w	r8,1
800048be:	c0 31       	brne	800048c4 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800048c0:	30 18       	mov	r8,1
800048c2:	c6 48       	rjmp	8000498a <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800048c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048c8:	11 c9       	ld.ub	r9,r8[0x4]
800048ca:	30 98       	mov	r8,9
800048cc:	f0 09 18 00 	cp.b	r9,r8
800048d0:	c0 a1       	brne	800048e4 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800048d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048d6:	70 18       	ld.w	r8,r8[0x4]
800048d8:	10 99       	mov	r9,r8
800048da:	b1 b9       	sbr	r9,0x11
800048dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048e0:	91 19       	st.w	r8[0x4],r9
800048e2:	c0 d8       	rjmp	800048fc <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800048e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048e8:	70 19       	ld.w	r9,r8[0x4]
800048ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ee:	11 c8       	ld.ub	r8,r8[0x4]
800048f0:	20 58       	sub	r8,5
800048f2:	a7 68       	lsl	r8,0x6
800048f4:	10 49       	or	r9,r8
800048f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048fa:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800048fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004900:	70 19       	ld.w	r9,r8[0x4]
80004902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004906:	11 d8       	ld.ub	r8,r8[0x5]
80004908:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8000490c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004910:	f1 38 00 08 	ld.ub	r8,r8[8]
80004914:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004916:	f5 e8 10 08 	or	r8,r10,r8
8000491a:	10 49       	or	r9,r8
8000491c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004920:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80004922:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004926:	90 39       	ld.sh	r9,r8[0x6]
80004928:	30 28       	mov	r8,2
8000492a:	f0 09 19 00 	cp.h	r9,r8
8000492e:	e0 88 00 14 	brls	80004956 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80004932:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004936:	70 18       	ld.w	r8,r8[0x4]
80004938:	10 99       	mov	r9,r8
8000493a:	ad b9       	sbr	r9,0xd
8000493c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004940:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	90 38       	ld.sh	r8,r8[0x6]
80004948:	5c 78       	castu.h	r8
8000494a:	20 28       	sub	r8,2
8000494c:	10 99       	mov	r9,r8
8000494e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004952:	91 a9       	st.w	r8[0x28],r9
80004954:	c0 d8       	rjmp	8000496e <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80004956:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000495a:	70 19       	ld.w	r9,r8[0x4]
8000495c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004960:	90 38       	ld.sh	r8,r8[0x6]
80004962:	5c 78       	castu.h	r8
80004964:	ad 68       	lsl	r8,0xc
80004966:	10 49       	or	r9,r8
80004968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000496c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000496e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004972:	70 18       	ld.w	r8,r8[0x4]
80004974:	10 99       	mov	r9,r8
80004976:	e0 19 ff f0 	andl	r9,0xfff0
8000497a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000497e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80004980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004984:	35 09       	mov	r9,80
80004986:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80004988:	30 08       	mov	r8,0
}
8000498a:	10 9c       	mov	r12,r8
8000498c:	2f dd       	sub	sp,-12
8000498e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004992:	00 00       	add	r0,r0
80004994:	80 00       	ld.sh	r0,r0[0x0]
80004996:	47 b8       	lddsp	r8,sp[0x1ec]
80004998:	80 00       	ld.sh	r0,r0[0x0]
8000499a:	46 e4       	lddsp	r4,sp[0x1b8]

8000499c <usart_init_hw_handshaking>:
  return USART_SUCCESS;
}


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000499c:	eb cd 40 80 	pushm	r7,lr
800049a0:	1a 97       	mov	r7,sp
800049a2:	20 3d       	sub	sp,12
800049a4:	ef 4c ff fc 	st.w	r7[-4],r12
800049a8:	ef 4b ff f8 	st.w	r7[-8],r11
800049ac:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
800049b0:	ee fa ff f4 	ld.w	r10,r7[-12]
800049b4:	ee fb ff f8 	ld.w	r11,r7[-8]
800049b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800049bc:	f0 1f 00 0b 	mcall	800049e8 <usart_init_hw_handshaking+0x4c>
800049c0:	18 98       	mov	r8,r12
800049c2:	58 18       	cp.w	r8,1
800049c4:	c0 31       	brne	800049ca <usart_init_hw_handshaking+0x2e>
    return USART_INVALID_INPUT;
800049c6:	30 18       	mov	r8,1
800049c8:	c0 c8       	rjmp	800049e0 <usart_init_hw_handshaking+0x44>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800049ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049ce:	70 18       	ld.w	r8,r8[0x4]
800049d0:	e0 18 ff f0 	andl	r8,0xfff0
800049d4:	10 99       	mov	r9,r8
800049d6:	a1 b9       	sbr	r9,0x1
800049d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049dc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
800049de:	30 08       	mov	r8,0
}
800049e0:	10 9c       	mov	r12,r8
800049e2:	2f dd       	sub	sp,-12
800049e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800049e8:	80 00       	ld.sh	r0,r0[0x0]
800049ea:	48 2c       	lddpc	r12,800049f0 <usart_write_char+0x4>

800049ec <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800049ec:	eb cd 40 80 	pushm	r7,lr
800049f0:	1a 97       	mov	r7,sp
800049f2:	20 3d       	sub	sp,12
800049f4:	ef 4c ff f8 	st.w	r7[-8],r12
800049f8:	ef 4b ff f4 	st.w	r7[-12],r11
800049fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a00:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80004a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a08:	70 58       	ld.w	r8,r8[0x14]
80004a0a:	e2 18 00 02 	andl	r8,0x2,COH
80004a0e:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80004a10:	58 08       	cp.w	r8,0
80004a12:	c0 a0       	breq	80004a26 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80004a14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a18:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80004a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a20:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80004a22:	30 08       	mov	r8,0
80004a24:	c0 28       	rjmp	80004a28 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80004a26:	30 28       	mov	r8,2
}
80004a28:	10 9c       	mov	r12,r8
80004a2a:	2f dd       	sub	sp,-12
80004a2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a30 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80004a30:	eb cd 40 80 	pushm	r7,lr
80004a34:	1a 97       	mov	r7,sp
80004a36:	20 3d       	sub	sp,12
80004a38:	ef 4c ff f8 	st.w	r7[-8],r12
80004a3c:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80004a40:	e0 68 27 10 	mov	r8,10000
80004a44:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80004a48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a4c:	58 08       	cp.w	r8,0
80004a4e:	5f 08       	sreq	r8
80004a50:	5c 58       	castu.b	r8
80004a52:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a56:	20 19       	sub	r9,1
80004a58:	ef 49 ff fc 	st.w	r7[-4],r9
80004a5c:	58 08       	cp.w	r8,0
80004a5e:	c0 30       	breq	80004a64 <usart_putchar+0x34>
80004a60:	3f f8       	mov	r8,-1
80004a62:	c0 b8       	rjmp	80004a78 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80004a64:	ee fb ff f4 	ld.w	r11,r7[-12]
80004a68:	ee fc ff f8 	ld.w	r12,r7[-8]
80004a6c:	f0 1f 00 05 	mcall	80004a80 <usart_putchar+0x50>
80004a70:	18 98       	mov	r8,r12
80004a72:	58 08       	cp.w	r8,0
80004a74:	ce a1       	brne	80004a48 <usart_putchar+0x18>

  return USART_SUCCESS;
80004a76:	30 08       	mov	r8,0
}
80004a78:	10 9c       	mov	r12,r8
80004a7a:	2f dd       	sub	sp,-12
80004a7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	49 ec       	lddpc	r12,80004af8 <udata_clear_loop_end+0x4>

80004a84 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80004a84:	eb cd 40 80 	pushm	r7,lr
80004a88:	1a 97       	mov	r7,sp
80004a8a:	20 2d       	sub	sp,8
80004a8c:	ef 4c ff fc 	st.w	r7[-4],r12
80004a90:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
80004a94:	c0 e8       	rjmp	80004ab0 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
80004a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a9a:	11 88       	ld.ub	r8,r8[0x0]
80004a9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004aa0:	2f f9       	sub	r9,-1
80004aa2:	ef 49 ff f8 	st.w	r7[-8],r9
80004aa6:	10 9b       	mov	r11,r8
80004aa8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004aac:	f0 1f 00 05 	mcall	80004ac0 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80004ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ab4:	11 88       	ld.ub	r8,r8[0x0]
80004ab6:	58 08       	cp.w	r8,0
80004ab8:	ce f1       	brne	80004a96 <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80004aba:	2f ed       	sub	sp,-8
80004abc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ac0:	80 00       	ld.sh	r0,r0[0x0]
80004ac2:	4a 30       	lddpc	r0,80004b4c <cpu_irq_is_enabled_flags+0x1e>

80004ac4 <_stext>:
80004ac4:	48 dd       	lddpc	sp,80004af8 <udata_clear_loop_end+0x4>
80004ac6:	fe c0 d6 c6 	sub	r0,pc,-10554
80004aca:	e3 b0 00 01 	mtsr	0x4,r0
80004ace:	d5 53       	csrf	0x15
80004ad0:	48 b0       	lddpc	r0,80004afc <udata_clear_loop_end+0x8>
80004ad2:	48 c1       	lddpc	r1,80004b00 <udata_clear_loop_end+0xc>
80004ad4:	02 30       	cp.w	r0,r1
80004ad6:	c0 62       	brcc	80004ae2 <idata_load_loop_end>
80004ad8:	48 b2       	lddpc	r2,80004b04 <udata_clear_loop_end+0x10>

80004ada <idata_load_loop>:
80004ada:	a5 05       	ld.d	r4,r2++
80004adc:	a1 24       	st.d	r0++,r4
80004ade:	02 30       	cp.w	r0,r1
80004ae0:	cf d3       	brcs	80004ada <idata_load_loop>

80004ae2 <idata_load_loop_end>:
80004ae2:	48 a0       	lddpc	r0,80004b08 <udata_clear_loop_end+0x14>
80004ae4:	48 a1       	lddpc	r1,80004b0c <udata_clear_loop_end+0x18>
80004ae6:	02 30       	cp.w	r0,r1
80004ae8:	c0 62       	brcc	80004af4 <udata_clear_loop_end>
80004aea:	30 02       	mov	r2,0
80004aec:	30 03       	mov	r3,0

80004aee <udata_clear_loop>:
80004aee:	a1 22       	st.d	r0++,r2
80004af0:	02 30       	cp.w	r0,r1
80004af2:	cf e3       	brcs	80004aee <udata_clear_loop>

80004af4 <udata_clear_loop_end>:
80004af4:	fe cf df ec 	sub	pc,pc,-8212
80004af8:	00 00       	add	r0,r0
80004afa:	40 00       	lddsp	r0,sp[0x0]
80004afc:	00 00       	add	r0,r0
80004afe:	00 04       	add	r4,r0
80004b00:	00 00       	add	r0,r0
80004b02:	00 38       	cp.w	r8,r0
80004b04:	80 00       	ld.sh	r0,r0[0x0]
80004b06:	77 38       	ld.w	r8,r11[0x4c]
80004b08:	00 00       	add	r0,r0
80004b0a:	00 38       	cp.w	r8,r0
80004b0c:	00 00       	add	r0,r0
80004b0e:	23 08       	sub	r8,48

80004b10 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004b10:	eb cd 40 80 	pushm	r7,lr
80004b14:	1a 97       	mov	r7,sp
80004b16:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b18:	e1 b8 00 00 	mfsr	r8,0x0
80004b1c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004b20:	d3 03       	ssrf	0x10

	return flags;
80004b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004b26:	10 9c       	mov	r12,r8
80004b28:	2f fd       	sub	sp,-4
80004b2a:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b2e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004b2e:	eb cd 40 80 	pushm	r7,lr
80004b32:	1a 97       	mov	r7,sp
80004b34:	20 1d       	sub	sp,4
80004b36:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b3e:	e6 18 00 01 	andh	r8,0x1,COH
80004b42:	5f 08       	sreq	r8
80004b44:	5c 58       	castu.b	r8
}
80004b46:	10 9c       	mov	r12,r8
80004b48:	2f fd       	sub	sp,-4
80004b4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b4e:	d7 03       	nop

80004b50 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004b50:	eb cd 40 80 	pushm	r7,lr
80004b54:	1a 97       	mov	r7,sp
80004b56:	20 1d       	sub	sp,4
80004b58:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004b60:	f0 1f 00 05 	mcall	80004b74 <cpu_irq_restore+0x24>
80004b64:	18 98       	mov	r8,r12
80004b66:	58 08       	cp.w	r8,0
80004b68:	c0 20       	breq	80004b6c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004b6a:	d5 03       	csrf	0x10
   }

	barrier();
}
80004b6c:	2f fd       	sub	sp,-4
80004b6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b72:	00 00       	add	r0,r0
80004b74:	80 00       	ld.sh	r0,r0[0x0]
80004b76:	4b 2e       	lddpc	lr,80004c3c <genclk_config_defaults+0x18>

80004b78 <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80004b78:	eb cd 40 80 	pushm	r7,lr
80004b7c:	1a 97       	mov	r7,sp
80004b7e:	20 1d       	sub	sp,4
80004b80:	18 98       	mov	r8,r12
80004b82:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80004b86:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004b8a:	58 28       	cp.w	r8,2
80004b8c:	c0 40       	breq	80004b94 <osc_enable+0x1c>
80004b8e:	58 38       	cp.w	r8,3
80004b90:	c0 50       	breq	80004b9a <osc_enable+0x22>
80004b92:	c0 68       	rjmp	80004b9e <osc_enable+0x26>
		osc_priv_enable_osc32();
		break;
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80004b94:	f0 1f 00 04 	mcall	80004ba4 <osc_enable+0x2c>
		break;
80004b98:	c0 38       	rjmp	80004b9e <osc_enable+0x26>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80004b9a:	f0 1f 00 04 	mcall	80004ba8 <osc_enable+0x30>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80004b9e:	2f fd       	sub	sp,-4
80004ba0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ba4:	80 00       	ld.sh	r0,r0[0x0]
80004ba6:	50 1c       	stdsp	sp[0x4],r12
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	50 5c       	stdsp	sp[0x14],r12

80004bac <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80004bac:	eb cd 40 80 	pushm	r7,lr
80004bb0:	1a 97       	mov	r7,sp
80004bb2:	20 1d       	sub	sp,4
80004bb4:	18 98       	mov	r8,r12
80004bb6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80004bba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004bbe:	58 38       	cp.w	r8,3
80004bc0:	c0 d0       	breq	80004bda <osc_is_ready+0x2e>
80004bc2:	58 48       	cp.w	r8,4
80004bc4:	c1 30       	breq	80004bea <osc_is_ready+0x3e>
80004bc6:	58 28       	cp.w	r8,2
80004bc8:	c1 31       	brne	80004bee <osc_is_ready+0x42>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
80004bca:	fe 78 18 00 	mov	r8,-59392
80004bce:	71 b8       	ld.w	r8,r8[0x6c]
80004bd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004bd4:	5f 18       	srne	r8
80004bd6:	5c 58       	castu.b	r8
80004bd8:	c0 c8       	rjmp	80004bf0 <osc_is_ready+0x44>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80004bda:	fe 78 18 00 	mov	r8,-59392
80004bde:	71 68       	ld.w	r8,r8[0x58]
80004be0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004be4:	5f 18       	srne	r8
80004be6:	5c 58       	castu.b	r8
80004be8:	c0 48       	rjmp	80004bf0 <osc_is_ready+0x44>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80004bea:	30 18       	mov	r8,1
80004bec:	c0 28       	rjmp	80004bf0 <osc_is_ready+0x44>

	default:
		/* unhandled_case(id); */
		return false;
80004bee:	30 08       	mov	r8,0
	}
}
80004bf0:	10 9c       	mov	r12,r8
80004bf2:	2f fd       	sub	sp,-4
80004bf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bf8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80004bf8:	eb cd 40 80 	pushm	r7,lr
80004bfc:	1a 97       	mov	r7,sp
80004bfe:	20 1d       	sub	sp,4
80004c00:	18 98       	mov	r8,r12
80004c02:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80004c06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004c0a:	10 9c       	mov	r12,r8
80004c0c:	f0 1f 00 05 	mcall	80004c20 <osc_wait_ready+0x28>
80004c10:	18 98       	mov	r8,r12
80004c12:	ec 18 00 01 	eorl	r8,0x1
80004c16:	5c 58       	castu.b	r8
80004c18:	cf 71       	brne	80004c06 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80004c1a:	2f fd       	sub	sp,-4
80004c1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	4b ac       	lddpc	r12,80004d08 <dfll_config_init_closed_loop_mode+0x8>

80004c24 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80004c24:	eb cd 40 80 	pushm	r7,lr
80004c28:	1a 97       	mov	r7,sp
80004c2a:	20 2d       	sub	sp,8
80004c2c:	ef 4c ff fc 	st.w	r7[-4],r12
80004c30:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80004c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c38:	30 09       	mov	r9,0
80004c3a:	91 09       	st.w	r8[0x0],r9
}
80004c3c:	2f ed       	sub	sp,-8
80004c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c42 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80004c42:	eb cd 40 80 	pushm	r7,lr
80004c46:	1a 97       	mov	r7,sp
80004c48:	20 2d       	sub	sp,8
80004c4a:	ef 4c ff fc 	st.w	r7[-4],r12
80004c4e:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80004c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c56:	70 08       	ld.w	r8,r8[0x0]
80004c58:	10 99       	mov	r9,r8
80004c5a:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80004c5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c62:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80004c64:	10 49       	or	r9,r8
80004c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6a:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80004c6c:	2f ed       	sub	sp,-8
80004c6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c72 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80004c72:	eb cd 40 80 	pushm	r7,lr
80004c76:	1a 97       	mov	r7,sp
80004c78:	20 2d       	sub	sp,8
80004c7a:	ef 4c ff fc 	st.w	r7[-4],r12
80004c7e:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80004c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c86:	70 08       	ld.w	r8,r8[0x0]
80004c88:	10 99       	mov	r9,r8
80004c8a:	e4 19 ff 00 	andh	r9,0xff00
80004c8e:	e0 19 ff fd 	andl	r9,0xfffd
80004c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c96:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80004c98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c9c:	58 18       	cp.w	r8,1
80004c9e:	e0 88 00 17 	brls	80004ccc <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80004ca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ca6:	70 08       	ld.w	r8,r8[0x0]
80004ca8:	10 99       	mov	r9,r8
80004caa:	a1 b9       	sbr	r9,0x1
80004cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cb0:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80004cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cb6:	70 09       	ld.w	r9,r8[0x0]
80004cb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cbc:	2f f8       	sub	r8,-1
80004cbe:	a1 98       	lsr	r8,0x1
80004cc0:	20 18       	sub	r8,1
80004cc2:	b1 68       	lsl	r8,0x10
80004cc4:	10 49       	or	r9,r8
80004cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cca:	91 09       	st.w	r8[0x0],r9
	}
}
80004ccc:	2f ed       	sub	sp,-8
80004cce:	e3 cd 80 80 	ldm	sp++,r7,pc

80004cd2 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80004cd2:	eb cd 40 80 	pushm	r7,lr
80004cd6:	1a 97       	mov	r7,sp
80004cd8:	20 2d       	sub	sp,8
80004cda:	ef 4c ff fc 	st.w	r7[-4],r12
80004cde:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80004ce2:	fe 78 18 00 	mov	r8,-59392
80004ce6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004cea:	ee fa ff fc 	ld.w	r10,r7[-4]
80004cee:	74 0a       	ld.w	r10,r10[0x0]
80004cf0:	a1 aa       	sbr	r10,0x0
80004cf2:	2e 49       	sub	r9,-28
80004cf4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80004cf8:	2f ed       	sub	sp,-8
80004cfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cfe:	d7 03       	nop

80004d00 <dfll_config_init_closed_loop_mode>:
	cfg->ssg = 0;
}

static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t div, uint16_t mul)
{
80004d00:	eb cd 40 80 	pushm	r7,lr
80004d04:	1a 97       	mov	r7,sp
80004d06:	20 4d       	sub	sp,16
80004d08:	ef 4c ff fc 	st.w	r7[-4],r12
80004d0c:	ef 4b ff f8 	st.w	r7[-8],r11
80004d10:	12 98       	mov	r8,r9
80004d12:	14 99       	mov	r9,r10
80004d14:	ef 59 ff f4 	st.h	r7[-12],r9
80004d18:	ef 58 ff f0 	st.h	r7[-16],r8
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
80004d1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d20:	30 0b       	mov	r11,0
80004d22:	10 9c       	mov	r12,r8
80004d24:	f0 1f 00 14 	mcall	80004d74 <dfll_config_init_closed_loop_mode+0x74>
	genclk_config_set_source(&cfg->ref_cfg, refclk);
80004d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d2c:	ee fb ff f8 	ld.w	r11,r7[-8]
80004d30:	10 9c       	mov	r12,r8
80004d32:	f0 1f 00 12 	mcall	80004d78 <dfll_config_init_closed_loop_mode+0x78>
	genclk_config_set_divider(&cfg->ref_cfg, div);
80004d36:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004d3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d3e:	12 9b       	mov	r11,r9
80004d40:	10 9c       	mov	r12,r8
80004d42:	f0 1f 00 0f 	mcall	80004d7c <dfll_config_init_closed_loop_mode+0x7c>

	cfg->conf = 1U << AVR32_SCIF_DFLL0CONF_MODE;
80004d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d4a:	30 29       	mov	r9,2
80004d4c:	91 19       	st.w	r8[0x4],r9
	cfg->mul = mul << 16;
80004d4e:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004d52:	b1 68       	lsl	r8,0x10
80004d54:	10 99       	mov	r9,r8
80004d56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d5a:	91 29       	st.w	r8[0x8],r9
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	cfg->step = ((4U << AVR32_SCIF_DFLL0STEP_FSTEP)
80004d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d60:	e4 69 00 04 	mov	r9,262148
80004d64:	91 39       	st.w	r8[0xc],r9
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
80004d66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d6a:	30 09       	mov	r9,0
80004d6c:	91 49       	st.w	r8[0x10],r9
}
80004d6e:	2f cd       	sub	sp,-16
80004d70:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d74:	80 00       	ld.sh	r0,r0[0x0]
80004d76:	4c 24       	lddpc	r4,80004e7c <dfll_enable_closed_loop+0x6c>
80004d78:	80 00       	ld.sh	r0,r0[0x0]
80004d7a:	4c 42       	lddpc	r2,80004e88 <dfll_enable_closed_loop+0x78>
80004d7c:	80 00       	ld.sh	r0,r0[0x0]
80004d7e:	4c 72       	lddpc	r2,80004e98 <dfll_enable_closed_loop+0x88>

80004d80 <dfll_is_fine_locked>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKC));
}

static inline bool dfll_is_fine_locked(unsigned int dfll_id)
{
80004d80:	eb cd 40 80 	pushm	r7,lr
80004d84:	1a 97       	mov	r7,sp
80004d86:	20 1d       	sub	sp,4
80004d88:	ef 4c ff fc 	st.w	r7[-4],r12
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKF));
80004d8c:	fe 78 18 00 	mov	r8,-59392
80004d90:	70 58       	ld.w	r8,r8[0x14]
80004d92:	e2 18 02 00 	andl	r8,0x200,COH
80004d96:	5f 18       	srne	r8
80004d98:	5c 58       	castu.b	r8
}
80004d9a:	10 9c       	mov	r12,r8
80004d9c:	2f fd       	sub	sp,-4
80004d9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004da2:	d7 03       	nop

80004da4 <dfll_enable_source>:
{
	return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_PCLKSR_DFLL0LOCKA));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
80004da4:	eb cd 40 80 	pushm	r7,lr
80004da8:	1a 97       	mov	r7,sp
80004daa:	20 1d       	sub	sp,4
80004dac:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80004db0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004db4:	58 48       	cp.w	r8,4
80004db6:	c0 40       	breq	80004dbe <dfll_enable_source+0x1a>
80004db8:	58 98       	cp.w	r8,9
80004dba:	c1 10       	breq	80004ddc <dfll_enable_source+0x38>
	case GENCLK_SRC_RCSYS:
		/* Nothing to do */
		break;
80004dbc:	c2 08       	rjmp	80004dfc <dfll_enable_source+0x58>
		}
		break;
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
80004dbe:	30 3c       	mov	r12,3
80004dc0:	f0 1f 00 11 	mcall	80004e04 <dfll_enable_source+0x60>
80004dc4:	18 98       	mov	r8,r12
80004dc6:	ec 18 00 01 	eorl	r8,0x1
80004dca:	5c 58       	castu.b	r8
80004dcc:	c1 70       	breq	80004dfa <dfll_enable_source+0x56>
			osc_enable(OSC_ID_RC120M);
80004dce:	30 3c       	mov	r12,3
80004dd0:	f0 1f 00 0e 	mcall	80004e08 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC120M);
80004dd4:	30 3c       	mov	r12,3
80004dd6:	f0 1f 00 0e 	mcall	80004e0c <dfll_enable_source+0x68>
		}
		break;
80004dda:	c1 18       	rjmp	80004dfc <dfll_enable_source+0x58>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
80004ddc:	30 2c       	mov	r12,2
80004dde:	f0 1f 00 0a 	mcall	80004e04 <dfll_enable_source+0x60>
80004de2:	18 98       	mov	r8,r12
80004de4:	ec 18 00 01 	eorl	r8,0x1
80004de8:	5c 58       	castu.b	r8
80004dea:	c0 90       	breq	80004dfc <dfll_enable_source+0x58>
			osc_enable(OSC_ID_RC32K);
80004dec:	30 2c       	mov	r12,2
80004dee:	f0 1f 00 07 	mcall	80004e08 <dfll_enable_source+0x64>
			osc_wait_ready(OSC_ID_RC32K);
80004df2:	30 2c       	mov	r12,2
80004df4:	f0 1f 00 06 	mcall	80004e0c <dfll_enable_source+0x68>
80004df8:	c0 28       	rjmp	80004dfc <dfll_enable_source+0x58>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
80004dfa:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80004dfc:	2f fd       	sub	sp,-4
80004dfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e02:	00 00       	add	r0,r0
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	4b ac       	lddpc	r12,80004eec <dfll_enable_closed_loop+0xdc>
80004e08:	80 00       	ld.sh	r0,r0[0x0]
80004e0a:	4b 78       	lddpc	r8,80004ee4 <dfll_enable_closed_loop+0xd4>
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	4b f8       	lddpc	r8,80004f08 <dfll_enable_closed_loop+0xf8>

80004e10 <dfll_enable_closed_loop>:
	dfll_write_reg(DFLL0CONF, 0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg,
		unsigned int dfll_id)
{
80004e10:	eb cd 40 80 	pushm	r7,lr
80004e14:	1a 97       	mov	r7,sp
80004e16:	20 7d       	sub	sp,28
80004e18:	ef 4c ff e8 	st.w	r7[-24],r12
80004e1c:	ef 4b ff e4 	st.w	r7[-28],r11
	irqflags_t flags;
	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
80004e20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004e24:	30 0b       	mov	r11,0
80004e26:	10 9c       	mov	r12,r8
80004e28:	f0 1f 00 43 	mcall	80004f34 <dfll_enable_closed_loop+0x124>
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
80004e2c:	f0 1f 00 43 	mcall	80004f38 <dfll_enable_closed_loop+0x128>
80004e30:	18 98       	mov	r8,r12
80004e32:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_SCIF.unlock =
80004e36:	fe 78 18 00 	mov	r8,-59392
80004e3a:	32 49       	mov	r9,36
80004e3c:	ea 19 aa 00 	orh	r9,0xaa00
80004e40:	91 69       	st.w	r8[0x18],r9
			( AVR32_SCIF_UNLOCK_KEY_VALUE << AVR32_SCIF_UNLOCK_KEY_OFFSET ) |
			AVR32_SCIF_DFLL0CONF;
	AVR32_SCIF.dfll0conf = 1U << AVR32_SCIF_DFLL0CONF_EN;
80004e42:	fe 78 18 00 	mov	r8,-59392
80004e46:	30 19       	mov	r9,1
80004e48:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
80004e4a:	ee fc ff ec 	ld.w	r12,r7[-20]
80004e4e:	f0 1f 00 3c 	mcall	80004f3c <dfll_enable_closed_loop+0x12c>

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
80004e52:	fe 78 18 00 	mov	r8,-59392
80004e56:	70 58       	ld.w	r8,r8[0x14]
80004e58:	e2 18 40 00 	andl	r8,0x4000,COH
80004e5c:	cf b0       	breq	80004e52 <dfll_enable_closed_loop+0x42>
80004e5e:	f0 1f 00 37 	mcall	80004f38 <dfll_enable_closed_loop+0x128>
80004e62:	18 98       	mov	r8,r12
80004e64:	ef 48 ff f0 	st.w	r7[-16],r8
80004e68:	fe 78 18 00 	mov	r8,-59392
80004e6c:	32 c9       	mov	r9,44
80004e6e:	ea 19 aa 00 	orh	r9,0xaa00
80004e72:	91 69       	st.w	r8[0x18],r9
80004e74:	fe 78 18 2c 	mov	r8,-59348
80004e78:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004e7c:	72 39       	ld.w	r9,r9[0xc]
80004e7e:	91 09       	st.w	r8[0x0],r9
80004e80:	ee fc ff f0 	ld.w	r12,r7[-16]
80004e84:	f0 1f 00 2e 	mcall	80004f3c <dfll_enable_closed_loop+0x12c>
#if AVR32_SCIF_H_VERSION < 110
	dfll_write_reg(DFLL0FMUL, cfg->mul);
80004e88:	fe 78 18 00 	mov	r8,-59392
80004e8c:	70 58       	ld.w	r8,r8[0x14]
80004e8e:	e2 18 40 00 	andl	r8,0x4000,COH
80004e92:	cf b0       	breq	80004e88 <dfll_enable_closed_loop+0x78>
80004e94:	f0 1f 00 29 	mcall	80004f38 <dfll_enable_closed_loop+0x128>
80004e98:	18 98       	mov	r8,r12
80004e9a:	ef 48 ff f4 	st.w	r7[-12],r8
80004e9e:	fe 78 18 00 	mov	r8,-59392
80004ea2:	32 89       	mov	r9,40
80004ea4:	ea 19 aa 00 	orh	r9,0xaa00
80004ea8:	91 69       	st.w	r8[0x18],r9
80004eaa:	fe 78 18 28 	mov	r8,-59352
80004eae:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004eb2:	72 29       	ld.w	r9,r9[0x8]
80004eb4:	91 09       	st.w	r8[0x0],r9
80004eb6:	ee fc ff f4 	ld.w	r12,r7[-12]
80004eba:	f0 1f 00 21 	mcall	80004f3c <dfll_enable_closed_loop+0x12c>
#else
	dfll_write_reg(DFLL0MUL, cfg->mul);
#endif
	dfll_write_reg(DFLL0SSG, cfg->ssg);
80004ebe:	fe 78 18 00 	mov	r8,-59392
80004ec2:	70 58       	ld.w	r8,r8[0x14]
80004ec4:	e2 18 40 00 	andl	r8,0x4000,COH
80004ec8:	cf b0       	breq	80004ebe <dfll_enable_closed_loop+0xae>
80004eca:	f0 1f 00 1c 	mcall	80004f38 <dfll_enable_closed_loop+0x128>
80004ece:	18 98       	mov	r8,r12
80004ed0:	ef 48 ff f8 	st.w	r7[-8],r8
80004ed4:	fe 78 18 00 	mov	r8,-59392
80004ed8:	33 09       	mov	r9,48
80004eda:	ea 19 aa 00 	orh	r9,0xaa00
80004ede:	91 69       	st.w	r8[0x18],r9
80004ee0:	fe 78 18 30 	mov	r8,-59344
80004ee4:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004ee8:	72 49       	ld.w	r9,r9[0x10]
80004eea:	91 09       	st.w	r8[0x0],r9
80004eec:	ee fc ff f8 	ld.w	r12,r7[-8]
80004ef0:	f0 1f 00 13 	mcall	80004f3c <dfll_enable_closed_loop+0x12c>
	dfll_write_reg(DFLL0CONF, cfg->conf | (1U << AVR32_SCIF_DFLL0CONF_EN)
80004ef4:	fe 78 18 00 	mov	r8,-59392
80004ef8:	70 58       	ld.w	r8,r8[0x14]
80004efa:	e2 18 40 00 	andl	r8,0x4000,COH
80004efe:	cf b0       	breq	80004ef4 <dfll_enable_closed_loop+0xe4>
80004f00:	f0 1f 00 0e 	mcall	80004f38 <dfll_enable_closed_loop+0x128>
80004f04:	18 98       	mov	r8,r12
80004f06:	ef 48 ff fc 	st.w	r7[-4],r8
80004f0a:	fe 78 18 00 	mov	r8,-59392
80004f0e:	32 49       	mov	r9,36
80004f10:	ea 19 aa 00 	orh	r9,0xaa00
80004f14:	91 69       	st.w	r8[0x18],r9
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
		| (1U << AVR32_SCIF_DFLL0CONF_CCEN)
#endif
		);
80004f16:	fe 78 18 24 	mov	r8,-59356
80004f1a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004f1e:	72 19       	ld.w	r9,r9[0x4]
80004f20:	a1 a9       	sbr	r9,0x0
80004f22:	91 09       	st.w	r8[0x0],r9
80004f24:	ee fc ff fc 	ld.w	r12,r7[-4]
80004f28:	f0 1f 00 05 	mcall	80004f3c <dfll_enable_closed_loop+0x12c>
}
80004f2c:	2f 9d       	sub	sp,-28
80004f2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f32:	00 00       	add	r0,r0
80004f34:	80 00       	ld.sh	r0,r0[0x0]
80004f36:	4c d2       	lddpc	r2,80005068 <osc_priv_enable_rc120m+0xc>
80004f38:	80 00       	ld.sh	r0,r0[0x0]
80004f3a:	4b 10       	lddpc	r0,80004ffc <cpu_irq_restore+0x8>
80004f3c:	80 00       	ld.sh	r0,r0[0x0]
80004f3e:	4b 50       	lddpc	r0,80005010 <cpu_irq_restore+0x1c>

80004f40 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(unsigned int dfll_id)
{
80004f40:	eb cd 40 80 	pushm	r7,lr
80004f44:	1a 97       	mov	r7,sp
80004f46:	20 6d       	sub	sp,24
80004f48:	ef 4c ff e8 	st.w	r7[-24],r12
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
80004f4c:	ee fc ff e8 	ld.w	r12,r7[-24]
80004f50:	f0 1f 00 15 	mcall	80004fa4 <dfll_enable_config_defaults+0x64>
80004f54:	18 98       	mov	r8,r12
80004f56:	58 08       	cp.w	r8,0
80004f58:	c2 21       	brne	80004f9c <dfll_enable_config_defaults+0x5c>
		return; // DFLL already running
	}

	switch (dfll_id) {
80004f5a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004f5e:	58 08       	cp.w	r8,0
80004f60:	c0 d1       	brne	80004f7a <dfll_enable_config_defaults+0x3a>
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
80004f62:	30 0c       	mov	r12,0
80004f64:	f0 1f 00 11 	mcall	80004fa8 <dfll_enable_config_defaults+0x68>
		dfll_config_init_closed_loop_mode(&dfllcfg,
80004f68:	ee c8 00 14 	sub	r8,r7,20
80004f6c:	e0 69 02 b6 	mov	r9,694
80004f70:	30 2a       	mov	r10,2
80004f72:	30 0b       	mov	r11,0
80004f74:	10 9c       	mov	r12,r8
80004f76:	f0 1f 00 0e 	mcall	80004fac <dfll_enable_config_defaults+0x6c>
	default:
		Assert(false);
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
80004f7a:	ee c8 00 14 	sub	r8,r7,20
80004f7e:	ee fb ff e8 	ld.w	r11,r7[-24]
80004f82:	10 9c       	mov	r12,r8
80004f84:	f0 1f 00 0b 	mcall	80004fb0 <dfll_enable_config_defaults+0x70>
	while (!dfll_is_fine_locked(dfll_id));
80004f88:	ee fc ff e8 	ld.w	r12,r7[-24]
80004f8c:	f0 1f 00 06 	mcall	80004fa4 <dfll_enable_config_defaults+0x64>
80004f90:	18 98       	mov	r8,r12
80004f92:	ec 18 00 01 	eorl	r8,0x1
80004f96:	5c 58       	castu.b	r8
80004f98:	cf 81       	brne	80004f88 <dfll_enable_config_defaults+0x48>
80004f9a:	c0 28       	rjmp	80004f9e <dfll_enable_config_defaults+0x5e>
void dfll_enable_config_defaults(unsigned int dfll_id)
{
	struct dfll_config dfllcfg;

	if (dfll_is_fine_locked(dfll_id)) {
		return; // DFLL already running
80004f9c:	d7 03       	nop
		break;
	}

	dfll_enable_closed_loop(&dfllcfg, dfll_id);
	while (!dfll_is_fine_locked(dfll_id));
}
80004f9e:	2f ad       	sub	sp,-24
80004fa0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fa4:	80 00       	ld.sh	r0,r0[0x0]
80004fa6:	4d 80       	lddpc	r0,80005104 <dfll_priv_get_source_hz>
80004fa8:	80 00       	ld.sh	r0,r0[0x0]
80004faa:	4d a4       	lddpc	r4,80005110 <dfll_priv_get_source_hz+0xc>
80004fac:	80 00       	ld.sh	r0,r0[0x0]
80004fae:	4d 00       	lddpc	r0,800050ec <cpu_irq_restore+0x10>
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	4e 10       	lddpc	r0,80005134 <dfll_priv_get_source_hz+0x30>

80004fb4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004fb4:	eb cd 40 80 	pushm	r7,lr
80004fb8:	1a 97       	mov	r7,sp
80004fba:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004fbc:	e1 b8 00 00 	mfsr	r8,0x0
80004fc0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004fc4:	d3 03       	ssrf	0x10

	return flags;
80004fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004fca:	10 9c       	mov	r12,r8
80004fcc:	2f fd       	sub	sp,-4
80004fce:	e3 cd 80 80 	ldm	sp++,r7,pc

80004fd2 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004fd2:	eb cd 40 80 	pushm	r7,lr
80004fd6:	1a 97       	mov	r7,sp
80004fd8:	20 1d       	sub	sp,4
80004fda:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004fde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fe2:	e6 18 00 01 	andh	r8,0x1,COH
80004fe6:	5f 08       	sreq	r8
80004fe8:	5c 58       	castu.b	r8
}
80004fea:	10 9c       	mov	r12,r8
80004fec:	2f fd       	sub	sp,-4
80004fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ff2:	d7 03       	nop

80004ff4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004ff4:	eb cd 40 80 	pushm	r7,lr
80004ff8:	1a 97       	mov	r7,sp
80004ffa:	20 1d       	sub	sp,4
80004ffc:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005000:	ee fc ff fc 	ld.w	r12,r7[-4]
80005004:	f0 1f 00 05 	mcall	80005018 <cpu_irq_restore+0x24>
80005008:	18 98       	mov	r8,r12
8000500a:	58 08       	cp.w	r8,0
8000500c:	c0 20       	breq	80005010 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000500e:	d5 03       	csrf	0x10
   }

	barrier();
}
80005010:	2f fd       	sub	sp,-4
80005012:	e3 cd 80 80 	ldm	sp++,r7,pc
80005016:	00 00       	add	r0,r0
80005018:	80 00       	ld.sh	r0,r0[0x0]
8000501a:	4f d2       	lddpc	r2,8000520c <sysclk_priv_enable_module+0x70>

8000501c <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
8000501c:	eb cd 40 80 	pushm	r7,lr
80005020:	1a 97       	mov	r7,sp
80005022:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005024:	f0 1f 00 0c 	mcall	80005054 <osc_priv_enable_rc32k+0x38>
80005028:	18 98       	mov	r8,r12
8000502a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
8000502e:	fe 78 18 00 	mov	r8,-59392
80005032:	36 c9       	mov	r9,108
80005034:	ea 19 aa 00 	orh	r9,0xaa00
80005038:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
8000503a:	fe 78 18 00 	mov	r8,-59392
8000503e:	30 19       	mov	r9,1
80005040:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
80005044:	ee fc ff fc 	ld.w	r12,r7[-4]
80005048:	f0 1f 00 04 	mcall	80005058 <osc_priv_enable_rc32k+0x3c>
}
8000504c:	2f fd       	sub	sp,-4
8000504e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005052:	00 00       	add	r0,r0
80005054:	80 00       	ld.sh	r0,r0[0x0]
80005056:	4f b4       	lddpc	r4,80005240 <sysclk_enable_pbb_module+0x24>
80005058:	80 00       	ld.sh	r0,r0[0x0]
8000505a:	4f f4       	lddpc	r4,80005254 <sysclk_enable_pbb_module+0x38>

8000505c <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
8000505c:	eb cd 40 80 	pushm	r7,lr
80005060:	1a 97       	mov	r7,sp
80005062:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005064:	f0 1f 00 0c 	mcall	80005094 <osc_priv_enable_rc120m+0x38>
80005068:	18 98       	mov	r8,r12
8000506a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8000506e:	fe 78 18 00 	mov	r8,-59392
80005072:	35 89       	mov	r9,88
80005074:	ea 19 aa 00 	orh	r9,0xaa00
80005078:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8000507a:	fe 78 18 00 	mov	r8,-59392
8000507e:	30 19       	mov	r9,1
80005080:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005084:	ee fc ff fc 	ld.w	r12,r7[-4]
80005088:	f0 1f 00 04 	mcall	80005098 <osc_priv_enable_rc120m+0x3c>
}
8000508c:	2f fd       	sub	sp,-4
8000508e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005092:	00 00       	add	r0,r0
80005094:	80 00       	ld.sh	r0,r0[0x0]
80005096:	4f b4       	lddpc	r4,80005280 <sysclk_set_prescalers+0x8>
80005098:	80 00       	ld.sh	r0,r0[0x0]
8000509a:	4f f4       	lddpc	r4,80005294 <sysclk_set_prescalers+0x1c>

8000509c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000509c:	eb cd 40 80 	pushm	r7,lr
800050a0:	1a 97       	mov	r7,sp
800050a2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800050a4:	e1 b8 00 00 	mfsr	r8,0x0
800050a8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800050ac:	d3 03       	ssrf	0x10

	return flags;
800050ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800050b2:	10 9c       	mov	r12,r8
800050b4:	2f fd       	sub	sp,-4
800050b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800050ba <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800050ba:	eb cd 40 80 	pushm	r7,lr
800050be:	1a 97       	mov	r7,sp
800050c0:	20 1d       	sub	sp,4
800050c2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800050c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050ca:	e6 18 00 01 	andh	r8,0x1,COH
800050ce:	5f 08       	sreq	r8
800050d0:	5c 58       	castu.b	r8
}
800050d2:	10 9c       	mov	r12,r8
800050d4:	2f fd       	sub	sp,-4
800050d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800050da:	d7 03       	nop

800050dc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800050dc:	eb cd 40 80 	pushm	r7,lr
800050e0:	1a 97       	mov	r7,sp
800050e2:	20 1d       	sub	sp,4
800050e4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800050e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800050ec:	f0 1f 00 05 	mcall	80005100 <cpu_irq_restore+0x24>
800050f0:	18 98       	mov	r8,r12
800050f2:	58 08       	cp.w	r8,0
800050f4:	c0 20       	breq	800050f8 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800050f6:	d5 03       	csrf	0x10
   }

	barrier();
}
800050f8:	2f fd       	sub	sp,-4
800050fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800050fe:	00 00       	add	r0,r0
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	50 ba       	stdsp	sp[0x2c],r10

80005104 <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
80005104:	eb cd 40 80 	pushm	r7,lr
80005108:	1a 97       	mov	r7,sp
8000510a:	20 1d       	sub	sp,4
8000510c:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
80005110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005114:	58 48       	cp.w	r8,4
80005116:	c0 80       	breq	80005126 <dfll_priv_get_source_hz+0x22>
80005118:	58 98       	cp.w	r8,9
8000511a:	c0 b0       	breq	80005130 <dfll_priv_get_source_hz+0x2c>
8000511c:	58 08       	cp.w	r8,0
8000511e:	c0 c1       	brne	80005136 <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80005120:	e0 78 c1 38 	mov	r8,115000
80005124:	c0 a8       	rjmp	80005138 <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80005126:	e0 68 0e 00 	mov	r8,3584
8000512a:	ea 18 07 27 	orh	r8,0x727
8000512e:	c0 58       	rjmp	80005138 <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
80005130:	e0 68 7d 00 	mov	r8,32000
80005134:	c0 28       	rjmp	80005138 <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
80005136:	30 08       	mov	r8,0
	}
}
80005138:	10 9c       	mov	r12,r8
8000513a:	2f fd       	sub	sp,-4
8000513c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005140 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80005140:	eb cd 40 80 	pushm	r7,lr
80005144:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
80005146:	30 0c       	mov	r12,0
80005148:	f0 1f 00 06 	mcall	80005160 <sysclk_get_main_hz+0x20>
8000514c:	18 99       	mov	r9,r12
8000514e:	e0 68 02 b6 	mov	r8,694
80005152:	f2 08 02 48 	mul	r8,r9,r8
80005156:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80005158:	10 9c       	mov	r12,r8
8000515a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000515e:	00 00       	add	r0,r0
80005160:	80 00       	ld.sh	r0,r0[0x0]
80005162:	51 04       	stdsp	sp[0x40],r4

80005164 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80005164:	eb cd 40 80 	pushm	r7,lr
80005168:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000516a:	f0 1f 00 04 	mcall	80005178 <sysclk_get_cpu_hz+0x14>
8000516e:	18 98       	mov	r8,r12
80005170:	a3 88       	lsr	r8,0x2
}
80005172:	10 9c       	mov	r12,r8
80005174:	e3 cd 80 80 	ldm	sp++,r7,pc
80005178:	80 00       	ld.sh	r0,r0[0x0]
8000517a:	51 40       	stdsp	sp[0x50],r0

8000517c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000517c:	eb cd 40 80 	pushm	r7,lr
80005180:	1a 97       	mov	r7,sp
80005182:	20 1d       	sub	sp,4
80005184:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80005188:	ee fb ff fc 	ld.w	r11,r7[-4]
8000518c:	30 1c       	mov	r12,1
8000518e:	f0 1f 00 03 	mcall	80005198 <sysclk_enable_hsb_module+0x1c>
}
80005192:	2f fd       	sub	sp,-4
80005194:	e3 cd 80 80 	ldm	sp++,r7,pc
80005198:	80 00       	ld.sh	r0,r0[0x0]
8000519a:	51 9c       	stdsp	sp[0x64],r12

8000519c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000519c:	eb cd 40 80 	pushm	r7,lr
800051a0:	1a 97       	mov	r7,sp
800051a2:	20 4d       	sub	sp,16
800051a4:	ef 4c ff f4 	st.w	r7[-12],r12
800051a8:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
800051ac:	f0 1f 00 1a 	mcall	80005214 <sysclk_priv_enable_module+0x78>
800051b0:	18 98       	mov	r8,r12
800051b2:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800051b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800051ba:	a3 68       	lsl	r8,0x2
800051bc:	e0 28 eb e0 	sub	r8,60384
800051c0:	70 08       	ld.w	r8,r8[0x0]
800051c2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
800051c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051ca:	30 19       	mov	r9,1
800051cc:	f2 08 09 48 	lsl	r8,r9,r8
800051d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051d4:	f3 e8 10 08 	or	r8,r9,r8
800051d8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
800051dc:	fe 78 14 00 	mov	r8,-60416
800051e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051e4:	f2 0a 15 02 	lsl	r10,r9,0x2
800051e8:	32 09       	mov	r9,32
800051ea:	ea 19 aa 00 	orh	r9,0xaa00
800051ee:	f4 09 00 09 	add	r9,r10,r9
800051f2:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
800051f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800051fa:	a3 68       	lsl	r8,0x2
800051fc:	e0 28 eb e0 	sub	r8,60384
80005200:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005204:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
80005206:	ee fc ff f8 	ld.w	r12,r7[-8]
8000520a:	f0 1f 00 04 	mcall	80005218 <sysclk_priv_enable_module+0x7c>
}
8000520e:	2f cd       	sub	sp,-16
80005210:	e3 cd 80 80 	ldm	sp++,r7,pc
80005214:	80 00       	ld.sh	r0,r0[0x0]
80005216:	50 9c       	stdsp	sp[0x24],r12
80005218:	80 00       	ld.sh	r0,r0[0x0]
8000521a:	50 dc       	stdsp	sp[0x34],r12

8000521c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000521c:	eb cd 40 80 	pushm	r7,lr
80005220:	1a 97       	mov	r7,sp
80005222:	20 2d       	sub	sp,8
80005224:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
80005228:	f0 1f 00 0f 	mcall	80005264 <sysclk_enable_pbb_module+0x48>
8000522c:	18 98       	mov	r8,r12
8000522e:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
80005232:	48 e8       	lddpc	r8,80005268 <sysclk_enable_pbb_module+0x4c>
80005234:	11 88       	ld.ub	r8,r8[0x0]
80005236:	58 08       	cp.w	r8,0
80005238:	c0 41       	brne	80005240 <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
8000523a:	30 3c       	mov	r12,3
8000523c:	f0 1f 00 0c 	mcall	8000526c <sysclk_enable_pbb_module+0x50>
	sysclk_pbb_refcount++;
80005240:	48 a8       	lddpc	r8,80005268 <sysclk_enable_pbb_module+0x4c>
80005242:	11 88       	ld.ub	r8,r8[0x0]
80005244:	2f f8       	sub	r8,-1
80005246:	5c 58       	castu.b	r8
80005248:	48 89       	lddpc	r9,80005268 <sysclk_enable_pbb_module+0x4c>
8000524a:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
8000524c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005250:	f0 1f 00 08 	mcall	80005270 <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80005254:	ee fb ff f8 	ld.w	r11,r7[-8]
80005258:	30 3c       	mov	r12,3
8000525a:	f0 1f 00 07 	mcall	80005274 <sysclk_enable_pbb_module+0x58>
}
8000525e:	2f ed       	sub	sp,-8
80005260:	e3 cd 80 80 	ldm	sp++,r7,pc
80005264:	80 00       	ld.sh	r0,r0[0x0]
80005266:	50 9c       	stdsp	sp[0x24],r12
80005268:	00 00       	add	r0,r0
8000526a:	01 3d       	ld.ub	sp,r0++
8000526c:	80 00       	ld.sh	r0,r0[0x0]
8000526e:	51 7c       	stdsp	sp[0x5c],r12
80005270:	80 00       	ld.sh	r0,r0[0x0]
80005272:	50 dc       	stdsp	sp[0x34],r12
80005274:	80 00       	ld.sh	r0,r0[0x0]
80005276:	51 9c       	stdsp	sp[0x64],r12

80005278 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80005278:	eb cd 40 80 	pushm	r7,lr
8000527c:	1a 97       	mov	r7,sp
8000527e:	20 7d       	sub	sp,28
80005280:	ef 4c ff ec 	st.w	r7[-20],r12
80005284:	ef 4b ff e8 	st.w	r7[-24],r11
80005288:	ef 4a ff e4 	st.w	r7[-28],r10
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8000528c:	30 08       	mov	r8,0
8000528e:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pba_cksel = 0;
80005292:	30 08       	mov	r8,0
80005294:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbb_cksel = 0;
80005298:	30 08       	mov	r8,0
8000529a:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8000529e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800052a2:	58 08       	cp.w	r8,0
800052a4:	c0 70       	breq	800052b2 <sysclk_set_prescalers+0x3a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
800052a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800052aa:	20 18       	sub	r8,1
800052ac:	a7 b8       	sbr	r8,0x7
800052ae:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_CPUSEL_CPUDIV);

	if (pba_shift > 0)
800052b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800052b6:	58 08       	cp.w	r8,0
800052b8:	c0 70       	breq	800052c6 <sysclk_set_prescalers+0x4e>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
800052ba:	ee f8 ff e8 	ld.w	r8,r7[-24]
800052be:	20 18       	sub	r8,1
800052c0:	a7 b8       	sbr	r8,0x7
800052c2:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBASEL_PBDIV);

	if (pbb_shift > 0)
800052c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800052ca:	58 08       	cp.w	r8,0
800052cc:	c0 70       	breq	800052da <sysclk_set_prescalers+0x62>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
800052ce:	ee f8 ff e4 	ld.w	r8,r7[-28]
800052d2:	20 18       	sub	r8,1
800052d4:	a7 b8       	sbr	r8,0x7
800052d6:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBBSEL_PBDIV);

	flags = cpu_irq_save();
800052da:	f0 1f 00 19 	mcall	8000533c <sysclk_set_prescalers+0xc4>
800052de:	18 98       	mov	r8,r12
800052e0:	ef 48 ff f0 	st.w	r7[-16],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
800052e4:	fe 78 14 00 	mov	r8,-60416
800052e8:	30 49       	mov	r9,4
800052ea:	ea 19 aa 00 	orh	r9,0xaa00
800052ee:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
800052f2:	fe 78 14 00 	mov	r8,-60416
800052f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800052fa:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
800052fc:	fe 78 14 00 	mov	r8,-60416
80005300:	30 c9       	mov	r9,12
80005302:	ea 19 aa 00 	orh	r9,0xaa00
80005306:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8000530a:	fe 78 14 00 	mov	r8,-60416
8000530e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005312:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005314:	fe 78 14 00 	mov	r8,-60416
80005318:	31 09       	mov	r9,16
8000531a:	ea 19 aa 00 	orh	r9,0xaa00
8000531e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005322:	fe 78 14 00 	mov	r8,-60416
80005326:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000532a:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8000532c:	ee fc ff f0 	ld.w	r12,r7[-16]
80005330:	f0 1f 00 04 	mcall	80005340 <sysclk_set_prescalers+0xc8>
}
80005334:	2f 9d       	sub	sp,-28
80005336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000533a:	00 00       	add	r0,r0
8000533c:	80 00       	ld.sh	r0,r0[0x0]
8000533e:	50 9c       	stdsp	sp[0x24],r12
80005340:	80 00       	ld.sh	r0,r0[0x0]
80005342:	50 dc       	stdsp	sp[0x34],r12

80005344 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005344:	eb cd 40 80 	pushm	r7,lr
80005348:	1a 97       	mov	r7,sp
8000534a:	20 2d       	sub	sp,8
8000534c:	ef 4c ff f8 	st.w	r7[-8],r12
	Assert(src <= SYSCLK_SRC_PLL0);
#else
	Assert(src <= SYSCLK_SRC_RC120M);
#endif

	flags = cpu_irq_save();
80005350:	f0 1f 00 0c 	mcall	80005380 <sysclk_set_source+0x3c>
80005354:	18 98       	mov	r8,r12
80005356:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8000535a:	fe 78 14 00 	mov	r8,-60416
8000535e:	fc 19 aa 00 	movh	r9,0xaa00
80005362:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005366:	fe 78 14 00 	mov	r8,-60416
8000536a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000536e:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005370:	ee fc ff fc 	ld.w	r12,r7[-4]
80005374:	f0 1f 00 04 	mcall	80005384 <sysclk_set_source+0x40>
}
80005378:	2f ed       	sub	sp,-8
8000537a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000537e:	00 00       	add	r0,r0
80005380:	80 00       	ld.sh	r0,r0[0x0]
80005382:	50 9c       	stdsp	sp[0x24],r12
80005384:	80 00       	ld.sh	r0,r0[0x0]
80005386:	50 dc       	stdsp	sp[0x34],r12

80005388 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
80005388:	eb cd 40 80 	pushm	r7,lr
8000538c:	1a 97       	mov	r7,sp
8000538e:	20 1d       	sub	sp,4
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
80005390:	30 2a       	mov	r10,2
80005392:	30 2b       	mov	r11,2
80005394:	30 2c       	mov	r12,2
80005396:	f0 1f 00 0e 	mcall	800053cc <sysclk_init+0x44>
		break;
#endif

#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
8000539a:	30 0c       	mov	r12,0
8000539c:	f0 1f 00 0d 	mcall	800053d0 <sysclk_init+0x48>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800053a0:	f0 1f 00 0d 	mcall	800053d4 <sysclk_init+0x4c>
800053a4:	18 98       	mov	r8,r12
800053a6:	10 9c       	mov	r12,r8
800053a8:	f0 1f 00 0c 	mcall	800053d8 <sysclk_init+0x50>
		sysclk_set_source(SYSCLK_SRC_DFLL);
800053ac:	30 2c       	mov	r12,2
800053ae:	f0 1f 00 0c 	mcall	800053dc <sysclk_init+0x54>
		Assert(false);
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
800053b2:	f0 1f 00 0c 	mcall	800053e0 <sysclk_init+0x58>
800053b6:	18 98       	mov	r8,r12
800053b8:	ef 48 ff fc 	st.w	r7[-4],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.unlock = 0xaa000000 + AVR32_PM_HSBMASK;
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
#endif
	cpu_irq_restore(flags);
800053bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800053c0:	f0 1f 00 09 	mcall	800053e4 <sysclk_init+0x5c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800053c4:	2f fd       	sub	sp,-4
800053c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800053ca:	00 00       	add	r0,r0
800053cc:	80 00       	ld.sh	r0,r0[0x0]
800053ce:	52 78       	stdsp	sp[0x9c],r8
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	4f 40       	lddpc	r0,800055a0 <spi_read_packet+0xd4>
800053d4:	80 00       	ld.sh	r0,r0[0x0]
800053d6:	51 64       	stdsp	sp[0x58],r4
800053d8:	80 00       	ld.sh	r0,r0[0x0]
800053da:	2f 78       	sub	r8,-9
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	53 44       	stdsp	sp[0xd0],r4
800053e0:	80 00       	ld.sh	r0,r0[0x0]
800053e2:	50 9c       	stdsp	sp[0x24],r12
800053e4:	80 00       	ld.sh	r0,r0[0x0]
800053e6:	50 dc       	stdsp	sp[0x34],r12

800053e8 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
800053e8:	eb cd 40 80 	pushm	r7,lr
800053ec:	1a 97       	mov	r7,sp
800053ee:	20 2d       	sub	sp,8
800053f0:	ef 4c ff fc 	st.w	r7[-4],r12
800053f4:	16 98       	mov	r8,r11
800053f6:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800053fa:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800053fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005402:	91 39       	st.w	r8[0xc],r9
}
80005404:	2f ed       	sub	sp,-8
80005406:	e3 cd 80 80 	ldm	sp++,r7,pc

8000540a <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8000540a:	eb cd 40 80 	pushm	r7,lr
8000540e:	1a 97       	mov	r7,sp
80005410:	20 1d       	sub	sp,4
80005412:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
80005416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000541a:	70 28       	ld.w	r8,r8[0x8]
8000541c:	5c 88       	casts.h	r8
}
8000541e:	10 9c       	mov	r12,r8
80005420:	2f fd       	sub	sp,-4
80005422:	e3 cd 80 80 	ldm	sp++,r7,pc

80005426 <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
80005426:	eb cd 40 80 	pushm	r7,lr
8000542a:	1a 97       	mov	r7,sp
8000542c:	20 1d       	sub	sp,4
8000542e:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80005432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005436:	70 48       	ld.w	r8,r8[0x10]
80005438:	e2 18 00 02 	andl	r8,0x2,COH
8000543c:	5f 18       	srne	r8
8000543e:	5c 58       	castu.b	r8
}
80005440:	10 9c       	mov	r12,r8
80005442:	2f fd       	sub	sp,-4
80005444:	e3 cd 80 80 	ldm	sp++,r7,pc

80005448 <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
80005448:	eb cd 40 80 	pushm	r7,lr
8000544c:	1a 97       	mov	r7,sp
8000544e:	20 1d       	sub	sp,4
80005450:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr &
80005454:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005458:	70 48       	ld.w	r8,r8[0x10]
8000545a:	e2 18 02 01 	andl	r8,0x201,COH
8000545e:	e0 48 02 01 	cp.w	r8,513
80005462:	5f 08       	sreq	r8
80005464:	5c 58       	castu.b	r8
	       (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
	       (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
80005466:	10 9c       	mov	r12,r8
80005468:	2f fd       	sub	sp,-4
8000546a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000546e:	d7 03       	nop

80005470 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
80005470:	eb cd 40 80 	pushm	r7,lr
80005474:	1a 97       	mov	r7,sp
80005476:	20 2d       	sub	sp,8
80005478:	ef 4c ff fc 	st.w	r7[-4],r12
8000547c:	16 98       	mov	r8,r11
8000547e:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
80005482:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005486:	10 9b       	mov	r11,r8
80005488:	ee fc ff fc 	ld.w	r12,r7[-4]
8000548c:	f0 1f 00 03 	mcall	80005498 <spi_write_single+0x28>
}
80005490:	2f ed       	sub	sp,-8
80005492:	e3 cd 80 80 	ldm	sp++,r7,pc
80005496:	00 00       	add	r0,r0
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	53 e8       	stdsp	sp[0xf8],r8

8000549c <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8000549c:	eb cd 40 80 	pushm	r7,lr
800054a0:	1a 97       	mov	r7,sp
800054a2:	20 2d       	sub	sp,8
800054a4:	ef 4c ff fc 	st.w	r7[-4],r12
800054a8:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
800054ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800054b0:	f0 1f 00 06 	mcall	800054c8 <spi_read_single+0x2c>
800054b4:	18 98       	mov	r8,r12
800054b6:	5c 88       	casts.h	r8
800054b8:	5c 58       	castu.b	r8
800054ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800054be:	b2 88       	st.b	r9[0x0],r8
}
800054c0:	2f ed       	sub	sp,-8
800054c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800054c6:	00 00       	add	r0,r0
800054c8:	80 00       	ld.sh	r0,r0[0x0]
800054ca:	54 0a       	stdsp	sp[0x100],r10

800054cc <spi_read_packet>:
#endif
}

status_code_t spi_read_packet(volatile avr32_spi_t *spi,
		uint8_t *data, size_t len)
{
800054cc:	eb cd 40 80 	pushm	r7,lr
800054d0:	1a 97       	mov	r7,sp
800054d2:	20 6d       	sub	sp,24
800054d4:	ef 4c ff f0 	st.w	r7[-16],r12
800054d8:	ef 4b ff ec 	st.w	r7[-20],r11
800054dc:	ef 4a ff e8 	st.w	r7[-24],r10
	unsigned int timeout = SPI_TIMEOUT;
800054e0:	e0 68 3a 98 	mov	r8,15000
800054e4:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t val;
	size_t i=0;
800054e8:	30 08       	mov	r8,0
800054ea:	ef 48 ff fc 	st.w	r7[-4],r8
	while(len) {
800054ee:	c5 88       	rjmp	8000559e <spi_read_packet+0xd2>
		timeout = SPI_TIMEOUT;
800054f0:	e0 68 3a 98 	mov	r8,15000
800054f4:	ef 48 ff f8 	st.w	r7[-8],r8
		while (!spi_is_tx_ready(spi)) {
800054f8:	c0 f8       	rjmp	80005516 <spi_read_packet+0x4a>
			if (!timeout--) {
800054fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fe:	58 08       	cp.w	r8,0
80005500:	5f 08       	sreq	r8
80005502:	5c 58       	castu.b	r8
80005504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005508:	20 19       	sub	r9,1
8000550a:	ef 49 ff f8 	st.w	r7[-8],r9
8000550e:	58 08       	cp.w	r8,0
80005510:	c0 30       	breq	80005516 <spi_read_packet+0x4a>
				return ERR_TIMEOUT;
80005512:	3f d8       	mov	r8,-3
80005514:	c4 a8       	rjmp	800055a8 <spi_read_packet+0xdc>
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(spi)) {
80005516:	ee fc ff f0 	ld.w	r12,r7[-16]
8000551a:	f0 1f 00 26 	mcall	800055b0 <spi_read_packet+0xe4>
8000551e:	18 98       	mov	r8,r12
80005520:	ec 18 00 01 	eorl	r8,0x1
80005524:	5c 58       	castu.b	r8
80005526:	ce a1       	brne	800054fa <spi_read_packet+0x2e>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
80005528:	e0 6b 00 ff 	mov	r11,255
8000552c:	ee fc ff f0 	ld.w	r12,r7[-16]
80005530:	f0 1f 00 21 	mcall	800055b4 <spi_read_packet+0xe8>
		timeout = SPI_TIMEOUT;
80005534:	e0 68 3a 98 	mov	r8,15000
80005538:	ef 48 ff f8 	st.w	r7[-8],r8
		while (!spi_is_rx_ready(spi)) {
8000553c:	c0 f8       	rjmp	8000555a <spi_read_packet+0x8e>
			if (!timeout--) {
8000553e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005542:	58 08       	cp.w	r8,0
80005544:	5f 08       	sreq	r8
80005546:	5c 58       	castu.b	r8
80005548:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000554c:	20 19       	sub	r9,1
8000554e:	ef 49 ff f8 	st.w	r7[-8],r9
80005552:	58 08       	cp.w	r8,0
80005554:	c0 30       	breq	8000555a <spi_read_packet+0x8e>
				return ERR_TIMEOUT;
80005556:	3f d8       	mov	r8,-3
80005558:	c2 88       	rjmp	800055a8 <spi_read_packet+0xdc>
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(spi)) {
8000555a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000555e:	f0 1f 00 17 	mcall	800055b8 <spi_read_packet+0xec>
80005562:	18 98       	mov	r8,r12
80005564:	ec 18 00 01 	eorl	r8,0x1
80005568:	5c 58       	castu.b	r8
8000556a:	ce a1       	brne	8000553e <spi_read_packet+0x72>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(spi,&val);
8000556c:	ee c8 00 09 	sub	r8,r7,9
80005570:	10 9b       	mov	r11,r8
80005572:	ee fc ff f0 	ld.w	r12,r7[-16]
80005576:	f0 1f 00 12 	mcall	800055bc <spi_read_packet+0xf0>
		data[i] = val;
8000557a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000557e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005582:	10 09       	add	r9,r8
80005584:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005588:	b2 88       	st.b	r9[0x0],r8
		i++;
8000558a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000558e:	2f f8       	sub	r8,-1
80005590:	ef 48 ff fc 	st.w	r7[-4],r8
		len--;
80005594:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005598:	20 18       	sub	r8,1
8000559a:	ef 48 ff e8 	st.w	r7[-24],r8
		uint8_t *data, size_t len)
{
	unsigned int timeout = SPI_TIMEOUT;
	uint8_t val;
	size_t i=0;
	while(len) {
8000559e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055a2:	58 08       	cp.w	r8,0
800055a4:	ca 61       	brne	800054f0 <spi_read_packet+0x24>
		spi_read_single(spi,&val);
		data[i] = val;
		i++;
		len--;
	}
	return STATUS_OK;
800055a6:	30 08       	mov	r8,0
}
800055a8:	10 9c       	mov	r12,r8
800055aa:	2f ad       	sub	sp,-24
800055ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800055b0:	80 00       	ld.sh	r0,r0[0x0]
800055b2:	54 26       	stdsp	sp[0x108],r6
800055b4:	80 00       	ld.sh	r0,r0[0x0]
800055b6:	54 70       	stdsp	sp[0x11c],r0
800055b8:	80 00       	ld.sh	r0,r0[0x0]
800055ba:	54 48       	stdsp	sp[0x110],r8
800055bc:	80 00       	ld.sh	r0,r0[0x0]
800055be:	54 9c       	stdsp	sp[0x124],r12
800055c0:	24 24       	sub	r4,66
800055c2:	24 00       	sub	r0,64
800055c4:	53 49       	stdsp	sp[0xd0],r9
800055c6:	2c 30       	sub	r0,-61
800055c8:	30 38       	mov	r8,3
800055ca:	30 0d       	mov	sp,0
800055cc:	0a 00       	add	r0,r5
800055ce:	00 00       	add	r0,r0
800055d0:	53 57       	stdsp	sp[0xd4],r7
800055d2:	2c 30       	sub	r0,-61
800055d4:	30 32       	mov	r2,3
800055d6:	38 0d       	mov	sp,-128
800055d8:	0a 00       	add	r0,r5
800055da:	00 00       	add	r0,r0
800055dc:	53 25       	stdsp	sp[0xc8],r5
800055de:	2c 32       	sub	r2,-61
800055e0:	34 32       	mov	r2,67
800055e2:	34 0d       	mov	sp,64
800055e4:	0a 00       	add	r0,r5
800055e6:	00 00       	add	r0,r0
800055e8:	52 2c       	stdsp	sp[0x88],r12
800055ea:	31 0d       	mov	sp,16
800055ec:	0a 00       	add	r0,r5
800055ee:	00 00       	add	r0,r0
800055f0:	49 6e       	lddpc	lr,80005648 <cpu_irq_is_enabled_flags+0x18>
800055f2:	76 61       	ld.w	r1,r11[0x18]
800055f4:	6c 69       	ld.w	r9,r6[0x18]
800055f6:	64 20       	ld.w	r0,r2[0x8]
800055f8:	49 44       	lddpc	r4,80005648 <cpu_irq_is_enabled_flags+0x18>
800055fa:	2e 20       	sub	r0,-30
800055fc:	50 6f       	stdsp	sp[0x18],pc
800055fe:	73 73       	ld.w	r3,r9[0x5c]
80005600:	69 62       	ld.w	r2,r4[0x58]
80005602:	6c 65       	ld.w	r5,r6[0x18]
80005604:	20 53       	sub	r3,5
80005606:	50 49       	stdsp	sp[0x10],r9
80005608:	20 65       	sub	r5,6
8000560a:	72 72       	ld.w	r2,r9[0x1c]
8000560c:	6f 72       	ld.w	r2,r7[0x5c]
8000560e:	2e 0d       	sub	sp,-128
80005610:	0a 00       	add	r0,r5
80005612:	00 00       	add	r0,r0
80005614:	49 4d       	lddpc	sp,80005664 <dfll_priv_get_source_hz+0x14>
80005616:	55 20       	stdsp	sp[0x148],r0
80005618:	66 61       	ld.w	r1,r3[0x18]
8000561a:	69 6c       	ld.w	r12,r4[0x58]
8000561c:	65 64       	ld.w	r4,r2[0x58]
8000561e:	20 74       	sub	r4,7
80005620:	6f 20       	ld.w	r0,r7[0x48]
80005622:	69 6e       	ld.w	lr,r4[0x58]
80005624:	69 74       	ld.w	r4,r4[0x5c]
80005626:	69 61       	ld.w	r1,r4[0x58]
80005628:	6c 69       	ld.w	r9,r6[0x18]
8000562a:	7a 65       	ld.w	r5,sp[0x18]
8000562c:	2e 0d       	sub	sp,-128
8000562e:	0a 00       	add	r0,r5

80005630 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005630:	eb cd 40 80 	pushm	r7,lr
80005634:	1a 97       	mov	r7,sp
80005636:	20 1d       	sub	sp,4
80005638:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000563c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005640:	e6 18 00 01 	andh	r8,0x1,COH
80005644:	5f 08       	sreq	r8
80005646:	5c 58       	castu.b	r8
}
80005648:	10 9c       	mov	r12,r8
8000564a:	2f fd       	sub	sp,-4
8000564c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005650 <dfll_priv_get_source_hz>:
			| (4U << AVR32_SCIF_DFLL0STEP_CSTEP));
	cfg->ssg = 0;
}

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
80005650:	eb cd 40 80 	pushm	r7,lr
80005654:	1a 97       	mov	r7,sp
80005656:	20 1d       	sub	sp,4
80005658:	ef 4c ff fc 	st.w	r7[-4],r12
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
8000565c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005660:	58 48       	cp.w	r8,4
80005662:	c0 80       	breq	80005672 <dfll_priv_get_source_hz+0x22>
80005664:	58 98       	cp.w	r8,9
80005666:	c0 b0       	breq	8000567c <dfll_priv_get_source_hz+0x2c>
80005668:	58 08       	cp.w	r8,0
8000566a:	c0 c1       	brne	80005682 <dfll_priv_get_source_hz+0x32>
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8000566c:	e0 78 c1 38 	mov	r8,115000
80005670:	c0 a8       	rjmp	80005684 <dfll_priv_get_source_hz+0x34>
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
#endif

	case GENCLK_SRC_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80005672:	e0 68 0e 00 	mov	r8,3584
80005676:	ea 18 07 27 	orh	r8,0x727
8000567a:	c0 58       	rjmp	80005684 <dfll_priv_get_source_hz+0x34>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
8000567c:	e0 68 7d 00 	mov	r8,32000
80005680:	c0 28       	rjmp	80005684 <dfll_priv_get_source_hz+0x34>

	default:
		/* unhandled_case(src) */
		return 0;
80005682:	30 08       	mov	r8,0
	}
}
80005684:	10 9c       	mov	r12,r8
80005686:	2f fd       	sub	sp,-4
80005688:	e3 cd 80 80 	ldm	sp++,r7,pc

8000568c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000568c:	eb cd 40 80 	pushm	r7,lr
80005690:	1a 97       	mov	r7,sp
#endif


#ifdef CONFIG_DFLL0_SOURCE
	case SYSCLK_SRC_DFLL:
		return dfll_get_default_rate(0);
80005692:	30 0c       	mov	r12,0
80005694:	f0 1f 00 06 	mcall	800056ac <sysclk_get_main_hz+0x20>
80005698:	18 99       	mov	r9,r12
8000569a:	e0 68 02 b6 	mov	r8,694
8000569e:	f2 08 02 48 	mul	r8,r9,r8
800056a2:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800056a4:	10 9c       	mov	r12,r8
800056a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056aa:	00 00       	add	r0,r0
800056ac:	80 00       	ld.sh	r0,r0[0x0]
800056ae:	56 50       	stdsp	sp[0x194],r0

800056b0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
800056b0:	eb cd 40 80 	pushm	r7,lr
800056b4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
800056b6:	f0 1f 00 04 	mcall	800056c4 <sysclk_get_cpu_hz+0x14>
800056ba:	18 98       	mov	r8,r12
800056bc:	a3 88       	lsr	r8,0x2
}
800056be:	10 9c       	mov	r12,r8
800056c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800056c4:	80 00       	ld.sh	r0,r0[0x0]
800056c6:	56 8c       	stdsp	sp[0x1a0],r12

800056c8 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
800056c8:	eb cd 40 80 	pushm	r7,lr
800056cc:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
800056ce:	f0 1f 00 04 	mcall	800056dc <sysclk_get_pba_hz+0x14>
800056d2:	18 98       	mov	r8,r12
800056d4:	a3 88       	lsr	r8,0x2
}
800056d6:	10 9c       	mov	r12,r8
800056d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800056dc:	80 00       	ld.sh	r0,r0[0x0]
800056de:	56 8c       	stdsp	sp[0x1a0],r12

800056e0 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
800056e0:	eb cd 40 80 	pushm	r7,lr
800056e4:	1a 97       	mov	r7,sp
800056e6:	20 1d       	sub	sp,4
800056e8:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800056ec:	ee fb ff fc 	ld.w	r11,r7[-4]
800056f0:	30 1c       	mov	r12,1
800056f2:	f0 1f 00 03 	mcall	800056fc <sysclk_enable_hsb_module+0x1c>
}
800056f6:	2f fd       	sub	sp,-4
800056f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800056fc:	80 00       	ld.sh	r0,r0[0x0]
800056fe:	51 9c       	stdsp	sp[0x64],r12

80005700 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80005700:	eb cd 40 80 	pushm	r7,lr
80005704:	1a 97       	mov	r7,sp
80005706:	20 1d       	sub	sp,4
80005708:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8000570c:	ee fb ff fc 	ld.w	r11,r7[-4]
80005710:	30 2c       	mov	r12,2
80005712:	f0 1f 00 03 	mcall	8000571c <sysclk_enable_pba_module+0x1c>
}
80005716:	2f fd       	sub	sp,-4
80005718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000571c:	80 00       	ld.sh	r0,r0[0x0]
8000571e:	51 9c       	stdsp	sp[0x64],r12

80005720 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
80005720:	eb cd 40 80 	pushm	r7,lr
80005724:	1a 97       	mov	r7,sp
80005726:	20 1d       	sub	sp,4
80005728:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
8000572c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005730:	fe 58 38 00 	cp.w	r8,-51200
80005734:	e0 80 00 9e 	breq	80005870 <sysclk_enable_peripheral_clock+0x150>
80005738:	e0 8b 00 39 	brhi	800057aa <sysclk_enable_peripheral_clock+0x8a>
8000573c:	fe 58 18 00 	cp.w	r8,-59392
80005740:	c7 80       	breq	80005830 <sysclk_enable_peripheral_clock+0x110>
80005742:	e0 8b 00 1b 	brhi	80005778 <sysclk_enable_peripheral_clock+0x58>
80005746:	fe 48 08 00 	cp.w	r8,-129024
8000574a:	e0 80 00 da 	breq	800058fe <sysclk_enable_peripheral_clock+0x1de>
8000574e:	e0 8b 00 0b 	brhi	80005764 <sysclk_enable_peripheral_clock+0x44>
80005752:	fe 48 00 00 	cp.w	r8,-131072
80005756:	e0 80 00 c9 	breq	800058e8 <sysclk_enable_peripheral_clock+0x1c8>
8000575a:	fe 48 04 00 	cp.w	r8,-130048
8000575e:	e0 80 00 cc 	breq	800058f6 <sysclk_enable_peripheral_clock+0x1d6>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
80005762:	cd 58       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80005764:	fe 58 10 00 	cp.w	r8,-61440
80005768:	c5 c0       	breq	80005820 <sysclk_enable_peripheral_clock+0x100>
8000576a:	fe 58 14 00 	cp.w	r8,-60416
8000576e:	c5 d0       	breq	80005828 <sysclk_enable_peripheral_clock+0x108>
80005770:	fe 58 00 00 	cp.w	r8,-65536
80005774:	c4 f0       	breq	80005812 <sysclk_enable_peripheral_clock+0xf2>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
80005776:	cc b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80005778:	fe 58 28 00 	cp.w	r8,-55296
8000577c:	c6 a0       	breq	80005850 <sysclk_enable_peripheral_clock+0x130>
8000577e:	e0 8b 00 0c 	brhi	80005796 <sysclk_enable_peripheral_clock+0x76>
80005782:	fe 58 20 00 	cp.w	r8,-57344
80005786:	c5 d0       	breq	80005840 <sysclk_enable_peripheral_clock+0x120>
80005788:	fe 58 24 00 	cp.w	r8,-56320
8000578c:	c5 e0       	breq	80005848 <sysclk_enable_peripheral_clock+0x128>
8000578e:	fe 58 1c 00 	cp.w	r8,-58368
80005792:	c5 30       	breq	80005838 <sysclk_enable_peripheral_clock+0x118>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
80005794:	cb c8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80005796:	fe 58 30 00 	cp.w	r8,-53248
8000579a:	c6 30       	breq	80005860 <sysclk_enable_peripheral_clock+0x140>
8000579c:	fe 58 34 00 	cp.w	r8,-52224
800057a0:	c6 40       	breq	80005868 <sysclk_enable_peripheral_clock+0x148>
800057a2:	fe 58 2c 00 	cp.w	r8,-54272
800057a6:	c5 90       	breq	80005858 <sysclk_enable_peripheral_clock+0x138>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
800057a8:	cb 28       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800057aa:	fe 58 54 00 	cp.w	r8,-44032
800057ae:	c7 d0       	breq	800058a8 <sysclk_enable_peripheral_clock+0x188>
800057b0:	e0 8b 00 18 	brhi	800057e0 <sysclk_enable_peripheral_clock+0xc0>
800057b4:	fe 58 44 00 	cp.w	r8,-48128
800057b8:	c6 80       	breq	80005888 <sysclk_enable_peripheral_clock+0x168>
800057ba:	e0 8b 00 09 	brhi	800057cc <sysclk_enable_peripheral_clock+0xac>
800057be:	fe 58 3c 00 	cp.w	r8,-50176
800057c2:	c5 b0       	breq	80005878 <sysclk_enable_peripheral_clock+0x158>
800057c4:	fe 58 40 00 	cp.w	r8,-49152
800057c8:	c5 c0       	breq	80005880 <sysclk_enable_peripheral_clock+0x160>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
800057ca:	ca 18       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800057cc:	fe 58 4c 00 	cp.w	r8,-46080
800057d0:	c6 40       	breq	80005898 <sysclk_enable_peripheral_clock+0x178>
800057d2:	fe 58 50 00 	cp.w	r8,-45056
800057d6:	c6 50       	breq	800058a0 <sysclk_enable_peripheral_clock+0x180>
800057d8:	fe 58 48 00 	cp.w	r8,-47104
800057dc:	c5 a0       	breq	80005890 <sysclk_enable_peripheral_clock+0x170>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
800057de:	c9 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800057e0:	fe 58 64 00 	cp.w	r8,-39936
800057e4:	c7 20       	breq	800058c8 <sysclk_enable_peripheral_clock+0x1a8>
800057e6:	e0 8b 00 0c 	brhi	800057fe <sysclk_enable_peripheral_clock+0xde>
800057ea:	fe 58 5c 00 	cp.w	r8,-41984
800057ee:	c6 50       	breq	800058b8 <sysclk_enable_peripheral_clock+0x198>
800057f0:	fe 58 60 00 	cp.w	r8,-40960
800057f4:	c6 60       	breq	800058c0 <sysclk_enable_peripheral_clock+0x1a0>
800057f6:	fe 58 58 00 	cp.w	r8,-43008
800057fa:	c5 b0       	breq	800058b0 <sysclk_enable_peripheral_clock+0x190>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
800057fc:	c8 88       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800057fe:	fe 58 6c 00 	cp.w	r8,-37888
80005802:	c6 b0       	breq	800058d8 <sysclk_enable_peripheral_clock+0x1b8>
80005804:	fe 58 70 00 	cp.w	r8,-36864
80005808:	c6 c0       	breq	800058e0 <sysclk_enable_peripheral_clock+0x1c0>
8000580a:	fe 58 68 00 	cp.w	r8,-38912
8000580e:	c6 10       	breq	800058d0 <sysclk_enable_peripheral_clock+0x1b0>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
			break;

		default:
			Assert(false);
			return;
80005810:	c7 e8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
		case AVR32_PDCA_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
80005812:	30 0c       	mov	r12,0
80005814:	f0 1f 00 40 	mcall	80005914 <sysclk_enable_peripheral_clock+0x1f4>
			sysclk_enable_pba_module(SYSCLK_PDCA_PB);
80005818:	30 0c       	mov	r12,0
8000581a:	f0 1f 00 40 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000581e:	c7 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_INTC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_INTC);
80005820:	30 1c       	mov	r12,1
80005822:	f0 1f 00 3e 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005826:	c7 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_PM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PM);
80005828:	30 2c       	mov	r12,2
8000582a:	f0 1f 00 3c 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000582e:	c6 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_SCIF_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SCIF);
80005830:	30 3c       	mov	r12,3
80005832:	f0 1f 00 3a 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005836:	c6 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_AST_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_AST);
80005838:	30 4c       	mov	r12,4
8000583a:	f0 1f 00 38 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000583e:	c6 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_WDT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_WDT);
80005840:	30 5c       	mov	r12,5
80005842:	f0 1f 00 36 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005846:	c6 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_EIC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_EIC);
80005848:	30 6c       	mov	r12,6
8000584a:	f0 1f 00 34 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000584e:	c5 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_FREQM_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_FREQM);
80005850:	30 7c       	mov	r12,7
80005852:	f0 1f 00 32 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005856:	c5 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_GPIO_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GPIO);
80005858:	30 8c       	mov	r12,8
8000585a:	f0 1f 00 30 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000585e:	c5 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_USART0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART0);
80005860:	30 9c       	mov	r12,9
80005862:	f0 1f 00 2e 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005866:	c5 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_USART1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART1);
80005868:	30 ac       	mov	r12,10
8000586a:	f0 1f 00 2c 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000586e:	c4 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_USART2_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART2);
80005870:	30 bc       	mov	r12,11
80005872:	f0 1f 00 2a 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005876:	c4 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_USART3_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_USART3);
80005878:	30 cc       	mov	r12,12
8000587a:	f0 1f 00 28 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000587e:	c4 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_SPI_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_SPI);
80005880:	30 dc       	mov	r12,13
80005882:	f0 1f 00 26 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005886:	c4 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TWIM0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM0);
80005888:	30 ec       	mov	r12,14
8000588a:	f0 1f 00 24 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000588e:	c3 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TWIM1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIM1);
80005890:	30 fc       	mov	r12,15
80005892:	f0 1f 00 22 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
80005896:	c3 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TWIS0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS0);
80005898:	31 0c       	mov	r12,16
8000589a:	f0 1f 00 20 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
8000589e:	c3 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TWIS1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TWIS1);
800058a0:	31 1c       	mov	r12,17
800058a2:	f0 1f 00 1e 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058a6:	c3 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_PWMA_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_PWMA);
800058a8:	31 2c       	mov	r12,18
800058aa:	f0 1f 00 1c 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058ae:	c2 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TC0_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC0);
800058b0:	31 3c       	mov	r12,19
800058b2:	f0 1f 00 1a 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058b6:	c2 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_TC1_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_TC1);
800058b8:	31 4c       	mov	r12,20
800058ba:	f0 1f 00 18 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058be:	c2 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_ADCIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ADCIFB);
800058c0:	31 5c       	mov	r12,21
800058c2:	f0 1f 00 16 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058c6:	c2 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_ACIFB_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_ACIFB);
800058c8:	31 6c       	mov	r12,22
800058ca:	f0 1f 00 14 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058ce:	c1 f8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_CAT_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_CAT);
800058d0:	31 7c       	mov	r12,23
800058d2:	f0 1f 00 12 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058d6:	c1 b8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_GLOC_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_GLOC);
800058d8:	31 8c       	mov	r12,24
800058da:	f0 1f 00 10 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058de:	c1 78       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_AW_ADDRESS:
			sysclk_enable_pba_module(SYSCLK_AW);
800058e0:	31 9c       	mov	r12,25
800058e2:	f0 1f 00 0e 	mcall	80005918 <sysclk_enable_peripheral_clock+0x1f8>
			break;
800058e6:	c1 38       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_FLASHCDW_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_FLASHCDW_DATA);
800058e8:	30 1c       	mov	r12,1
800058ea:	f0 1f 00 0b 	mcall	80005914 <sysclk_enable_peripheral_clock+0x1f4>
			sysclk_enable_pbb_module(SYSCLK_FLASHCDW_REGS);
800058ee:	30 0c       	mov	r12,0
800058f0:	f0 1f 00 0b 	mcall	8000591c <sysclk_enable_peripheral_clock+0x1fc>
			break;
800058f4:	c0 c8       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>
			sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
			sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
			break;
#endif
		case AVR32_HMATRIXB_ADDRESS:
			sysclk_enable_pbb_module(SYSCLK_HMATRIX);
800058f6:	30 1c       	mov	r12,1
800058f8:	f0 1f 00 09 	mcall	8000591c <sysclk_enable_peripheral_clock+0x1fc>
			break;
800058fc:	c0 88       	rjmp	8000590c <sysclk_enable_peripheral_clock+0x1ec>

		case AVR32_SAU_ADDRESS:
			sysclk_enable_hsb_module(SYSCLK_SAU_HSB);
800058fe:	30 2c       	mov	r12,2
80005900:	f0 1f 00 05 	mcall	80005914 <sysclk_enable_peripheral_clock+0x1f4>
			sysclk_enable_pbb_module(SYSCLK_SAU_REGS);
80005904:	30 2c       	mov	r12,2
80005906:	f0 1f 00 06 	mcall	8000591c <sysclk_enable_peripheral_clock+0x1fc>
			break;
8000590a:	d7 03       	nop

		default:
			Assert(false);
			return;
	}
}
8000590c:	2f fd       	sub	sp,-4
8000590e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005912:	00 00       	add	r0,r0
80005914:	80 00       	ld.sh	r0,r0[0x0]
80005916:	56 e0       	stdsp	sp[0x1b8],r0
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	57 00       	stdsp	sp[0x1c0],r0
8000591c:	80 00       	ld.sh	r0,r0[0x0]
8000591e:	52 1c       	stdsp	sp[0x84],r12

80005920 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
80005920:	eb cd 40 80 	pushm	r7,lr
80005924:	1a 97       	mov	r7,sp
80005926:	20 2d       	sub	sp,8
80005928:	ef 4c ff fc 	st.w	r7[-4],r12
8000592c:	16 98       	mov	r8,r11
8000592e:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80005932:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80005936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000593a:	91 39       	st.w	r8[0xc],r9
}
8000593c:	2f ed       	sub	sp,-8
8000593e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005942 <spi_is_tx_empty>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_empty(volatile avr32_spi_t *spi)
{
80005942:	eb cd 40 80 	pushm	r7,lr
80005946:	1a 97       	mov	r7,sp
80005948:	20 1d       	sub	sp,4
8000594a:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0;
8000594e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005952:	70 48       	ld.w	r8,r8[0x10]
80005954:	e2 18 02 00 	andl	r8,0x200,COH
80005958:	5f 18       	srne	r8
8000595a:	5c 58       	castu.b	r8
}
8000595c:	10 9c       	mov	r12,r8
8000595e:	2f fd       	sub	sp,-4
80005960:	e3 cd 80 80 	ldm	sp++,r7,pc

80005964 <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
80005964:	eb cd 40 80 	pushm	r7,lr
80005968:	1a 97       	mov	r7,sp
8000596a:	20 1d       	sub	sp,4
8000596c:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
80005970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005974:	70 48       	ld.w	r8,r8[0x10]
80005976:	e2 18 00 02 	andl	r8,0x2,COH
8000597a:	5f 18       	srne	r8
8000597c:	5c 58       	castu.b	r8
}
8000597e:	10 9c       	mov	r12,r8
80005980:	2f fd       	sub	sp,-4
80005982:	e3 cd 80 80 	ldm	sp++,r7,pc
80005986:	d7 03       	nop

80005988 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
80005988:	eb cd 40 80 	pushm	r7,lr
8000598c:	1a 97       	mov	r7,sp
8000598e:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
80005990:	30 08       	mov	r8,0
80005992:	ef 68 ff ff 	st.b	r7[-1],r8
80005996:	c0 c8       	rjmp	800059ae <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
80005998:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000599c:	48 ba       	lddpc	r10,800059c8 <sleepmgr_init+0x40>
8000599e:	30 08       	mov	r8,0
800059a0:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
800059a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800059a8:	2f f8       	sub	r8,-1
800059aa:	ef 68 ff ff 	st.b	r7[-1],r8
800059ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800059b2:	30 68       	mov	r8,6
800059b4:	f0 09 18 00 	cp.b	r9,r8
800059b8:	fe 98 ff f0 	brls	80005998 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
800059bc:	48 39       	lddpc	r9,800059c8 <sleepmgr_init+0x40>
800059be:	30 18       	mov	r8,1
800059c0:	b2 f8       	st.b	r9[0x7],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
800059c2:	2f fd       	sub	sp,-4
800059c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800059c8:	00 00       	add	r0,r0
800059ca:	01 40       	ld.w	r0,--r0

800059cc <ads1299_send_byte_no_cs>:
 * \pre Requires spi.h from the Atmel Software Framework and ads1299_spi_adapt.h.
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte_no_cs(uint8_t opcode)
{
800059cc:	eb cd 40 80 	pushm	r7,lr
800059d0:	1a 97       	mov	r7,sp
800059d2:	20 1d       	sub	sp,4
800059d4:	18 98       	mov	r8,r12
800059d6:	ef 68 ff fc 	st.b	r7[-4],r8
	while(!spi_is_tx_ready(SPI_ADDRESS));
800059da:	fe 7c 40 00 	mov	r12,-49152
800059de:	f0 1f 00 0f 	mcall	80005a18 <ads1299_send_byte_no_cs+0x4c>
800059e2:	18 98       	mov	r8,r12
800059e4:	ec 18 00 01 	eorl	r8,0x1
800059e8:	5c 58       	castu.b	r8
800059ea:	cf 81       	brne	800059da <ads1299_send_byte_no_cs+0xe>
	spi_put(SPI_ADDRESS, opcode);
800059ec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800059f0:	10 9b       	mov	r11,r8
800059f2:	fe 7c 40 00 	mov	r12,-49152
800059f6:	f0 1f 00 0a 	mcall	80005a1c <ads1299_send_byte_no_cs+0x50>
	while(!spi_is_tx_empty(SPI_ADDRESS));
800059fa:	fe 7c 40 00 	mov	r12,-49152
800059fe:	f0 1f 00 09 	mcall	80005a20 <ads1299_send_byte_no_cs+0x54>
80005a02:	18 98       	mov	r8,r12
80005a04:	ec 18 00 01 	eorl	r8,0x1
80005a08:	5c 58       	castu.b	r8
80005a0a:	cf 81       	brne	800059fa <ads1299_send_byte_no_cs+0x2e>
	
	return ADS1299_STATUS_OK;
80005a0c:	30 08       	mov	r8,0
}
80005a0e:	10 9c       	mov	r12,r8
80005a10:	2f fd       	sub	sp,-4
80005a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a16:	00 00       	add	r0,r0
80005a18:	80 00       	ld.sh	r0,r0[0x0]
80005a1a:	59 64       	cp.w	r4,22
80005a1c:	80 00       	ld.sh	r0,r0[0x0]
80005a1e:	59 20       	cp.w	r0,18
80005a20:	80 00       	ld.sh	r0,r0[0x0]
80005a22:	59 42       	cp.w	r2,20

80005a24 <ads1299_send_byte>:
 * \param chip_select The chip select number of the ADS1299 to be initialized.
 * \param opcode The opcode to send.
 * \return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte(uint8_t chip_select, uint8_t opcode)
{
80005a24:	eb cd 40 80 	pushm	r7,lr
80005a28:	1a 97       	mov	r7,sp
80005a2a:	20 2d       	sub	sp,8
80005a2c:	18 99       	mov	r9,r12
80005a2e:	16 98       	mov	r8,r11
80005a30:	ef 69 ff fc 	st.b	r7[-4],r9
80005a34:	ef 68 ff f8 	st.b	r7[-8],r8
	//#if UC3
	spi_selectChip(SPI_ADDRESS, chip_select);
80005a38:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005a3c:	10 9b       	mov	r11,r8
80005a3e:	fe 7c 40 00 	mov	r12,-49152
80005a42:	f0 1f 00 0a 	mcall	80005a68 <ads1299_send_byte+0x44>
	
	ads1299_send_byte_no_cs(opcode);
80005a46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005a4a:	10 9c       	mov	r12,r8
80005a4c:	f0 1f 00 08 	mcall	80005a6c <ads1299_send_byte+0x48>
	
	spi_unselectChip(SPI_ADDRESS, chip_select);
80005a50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005a54:	10 9b       	mov	r11,r8
80005a56:	fe 7c 40 00 	mov	r12,-49152
80005a5a:	f0 1f 00 06 	mcall	80005a70 <ads1299_send_byte+0x4c>
	
	return ADS1299_STATUS_OK;
80005a5e:	30 08       	mov	r8,0
	//#else
	//#endif
}
80005a60:	10 9c       	mov	r12,r8
80005a62:	2f ed       	sub	sp,-8
80005a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a68:	80 00       	ld.sh	r0,r0[0x0]
80005a6a:	3c 68       	mov	r8,-58
80005a6c:	80 00       	ld.sh	r0,r0[0x0]
80005a6e:	59 cc       	cp.w	r12,28
80005a70:	80 00       	ld.sh	r0,r0[0x0]
80005a72:	3d 00       	mov	r0,-48

80005a74 <eic_handler>:
status_code_t config_twim(void);
status_code_t config_rn42(volatile avr32_usart_t*);
status_code_t ads1299_check_device_id(uint8_t);

__attribute__((__interrupt__)) static void eic_handler(void)
{	
80005a74:	eb cd 40 80 	pushm	r7,lr
80005a78:	1a 97       	mov	r7,sp
	Disable_global_interrupt();
80005a7a:	d3 03       	ssrf	0x10
	eic_clear_interrupt_line(&AVR32_EIC, ADS1299_DRDY_INT);
80005a7c:	30 5b       	mov	r11,5
80005a7e:	fe 7c 24 00 	mov	r12,-56320
80005a82:	f0 1f 00 2a 	mcall	80005b28 <eic_handler+0xb4>
	
	if (processing_type == DATA_STREAM)
80005a86:	4a a8       	lddpc	r8,80005b2c <eic_handler+0xb8>
80005a88:	70 08       	ld.w	r8,r8[0x0]
80005a8a:	58 08       	cp.w	r8,0
80005a8c:	c2 61       	brne	80005ad8 <eic_handler+0x64>
	/* If we're in data stream mode, there is no intermediate buffering, so write directly to USART TX packet */
	{
		/* Read back 24-bit status word and 8 channels of 24-bit data */
		ads1299_rdata24_packet(SPI_ADS1299_MAIN_CHIPNUM, usart_tx_buffer_idx, &data_usart_tx_packet);
80005a8e:	4a 98       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005a90:	70 08       	ld.w	r8,r8[0x0]
80005a92:	4a 9a       	lddpc	r10,80005b34 <eic_handler+0xc0>
80005a94:	10 9b       	mov	r11,r8
80005a96:	30 0c       	mov	r12,0
80005a98:	f0 1f 00 28 	mcall	80005b38 <eic_handler+0xc4>
		if (gpio_get_pin_value(MPU6050_INT_PIN))
80005a9c:	30 7c       	mov	r12,7
80005a9e:	f0 1f 00 28 	mcall	80005b3c <eic_handler+0xc8>
80005aa2:	18 98       	mov	r8,r12
80005aa4:	58 08       	cp.w	r8,0
80005aa6:	c0 80       	breq	80005ab6 <eic_handler+0x42>
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
80005aa8:	4a 28       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005aaa:	70 08       	ld.w	r8,r8[0x0]
80005aac:	4a 2a       	lddpc	r10,80005b34 <eic_handler+0xc0>
80005aae:	10 9b       	mov	r11,r8
80005ab0:	36 8c       	mov	r12,104
80005ab2:	f0 1f 00 24 	mcall	80005b40 <eic_handler+0xcc>
		}
		if (++usart_tx_buffer_idx == DATA_USART_TX_BUFFER_SIZE)
80005ab6:	49 f8       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005ab8:	70 08       	ld.w	r8,r8[0x0]
80005aba:	f0 c9 ff ff 	sub	r9,r8,-1
80005abe:	49 d8       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005ac0:	91 09       	st.w	r8[0x0],r9
80005ac2:	49 c8       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005ac4:	70 08       	ld.w	r8,r8[0x0]
80005ac6:	58 18       	cp.w	r8,1
80005ac8:	c2 d1       	brne	80005b22 <eic_handler+0xae>
		{
			usart_tx_buffer_idx = 0;
80005aca:	49 a8       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005acc:	30 09       	mov	r9,0
80005ace:	91 09       	st.w	r8[0x0],r9
			pdca_enable(DATA_USART_TX_PDCA_CHANNEL);
80005ad0:	30 0c       	mov	r12,0
80005ad2:	f0 1f 00 1d 	mcall	80005b44 <eic_handler+0xd0>
80005ad6:	c2 68       	rjmp	80005b22 <eic_handler+0xae>
	}
	else
	/* We have to pre-buffer the data for processing */
	{
		/* Read back 24-bit status word and 8 channels of 24-bit data; store in 32-bit ints */
		ads1299_rdata32_generic(SPI_ADS1299_MAIN_CHIPNUM, spi_buf_write_idx, spi_rx_ads1299_status, spi_rx_data_buffer);			
80005ad8:	49 c8       	lddpc	r8,80005b48 <eic_handler+0xd4>
80005ada:	70 0a       	ld.w	r10,r8[0x0]
80005adc:	49 c8       	lddpc	r8,80005b4c <eic_handler+0xd8>
80005ade:	70 08       	ld.w	r8,r8[0x0]
80005ae0:	49 c9       	lddpc	r9,80005b50 <eic_handler+0xdc>
80005ae2:	10 9b       	mov	r11,r8
80005ae4:	30 0c       	mov	r12,0
80005ae6:	f0 1f 00 1c 	mcall	80005b54 <eic_handler+0xe0>
		if (gpio_get_pin_value(MPU6050_INT_PIN))
80005aea:	30 7c       	mov	r12,7
80005aec:	f0 1f 00 14 	mcall	80005b3c <eic_handler+0xc8>
80005af0:	18 98       	mov	r8,r12
80005af2:	58 08       	cp.w	r8,0
80005af4:	c0 80       	breq	80005b04 <eic_handler+0x90>
		{
			/* Update inertial values Ax, Ay, Az, Gx, Gy, Gz */
			mpu6050_rdata16_packet(MPU6050_DEFAULT_ADDRESS, usart_tx_buffer_idx, &data_usart_tx_packet);
80005af6:	48 f8       	lddpc	r8,80005b30 <eic_handler+0xbc>
80005af8:	70 08       	ld.w	r8,r8[0x0]
80005afa:	48 fa       	lddpc	r10,80005b34 <eic_handler+0xc0>
80005afc:	10 9b       	mov	r11,r8
80005afe:	36 8c       	mov	r12,104
80005b00:	f0 1f 00 10 	mcall	80005b40 <eic_handler+0xcc>
		}			
		spi_buf_write_idx = (spi_buf_write_idx+1) % DSP_PREBUFFER_NB_SAMPLES;			
80005b04:	49 28       	lddpc	r8,80005b4c <eic_handler+0xd8>
80005b06:	70 08       	ld.w	r8,r8[0x0]
80005b08:	2f f8       	sub	r8,-1
80005b0a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005b0e:	49 08       	lddpc	r8,80005b4c <eic_handler+0xd8>
80005b10:	91 09       	st.w	r8[0x0],r9
		if (spi_buf_write_idx % FRAME_SIZE == 0)
80005b12:	48 f8       	lddpc	r8,80005b4c <eic_handler+0xd8>
80005b14:	70 08       	ld.w	r8,r8[0x0]
80005b16:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80005b1a:	c0 41       	brne	80005b22 <eic_handler+0xae>
		{
			frame_complete_flag = 1;
80005b1c:	48 f8       	lddpc	r8,80005b58 <eic_handler+0xe4>
80005b1e:	30 19       	mov	r9,1
80005b20:	91 09       	st.w	r8[0x0],r9
		}
	}	
}
80005b22:	e3 cd 40 80 	ldm	sp++,r7,lr
80005b26:	d6 03       	rete
80005b28:	80 00       	ld.sh	r0,r0[0x0]
80005b2a:	2e e8       	sub	r8,-18
80005b2c:	00 00       	add	r0,r0
80005b2e:	21 dc       	sub	r12,29
80005b30:	00 00       	add	r0,r0
80005b32:	21 e8       	sub	r8,30
80005b34:	00 00       	add	r0,r0
80005b36:	00 08       	add	r8,r0
80005b38:	80 00       	ld.sh	r0,r0[0x0]
80005b3a:	29 0c       	sub	r12,-112
80005b3c:	80 00       	ld.sh	r0,r0[0x0]
80005b3e:	35 6c       	mov	r12,86
80005b40:	80 00       	ld.sh	r0,r0[0x0]
80005b42:	6f 58       	ld.w	r8,r7[0x54]
80005b44:	80 00       	ld.sh	r0,r0[0x0]
80005b46:	3a 14       	mov	r4,-95
80005b48:	00 00       	add	r0,r0
80005b4a:	01 48       	ld.w	r8,--r0
80005b4c:	00 00       	add	r0,r0
80005b4e:	21 e0       	sub	r0,30
80005b50:	00 00       	add	r0,r0
80005b52:	01 54       	ld.sh	r4,--r0
80005b54:	80 00       	ld.sh	r0,r0[0x0]
80005b56:	2a 4c       	sub	r12,-92
80005b58:	00 00       	add	r0,r0
80005b5a:	22 ec       	sub	r12,46

80005b5c <pdca_data_usart_tx_handler>:

__attribute__((__interrupt__)) static void pdca_data_usart_tx_handler(void)
{
80005b5c:	eb cd 40 80 	pushm	r7,lr
80005b60:	1a 97       	mov	r7,sp
	pdca_disable(DATA_USART_TX_PDCA_CHANNEL);
80005b62:	30 0c       	mov	r12,0
80005b64:	f0 1f 00 12 	mcall	80005bac <pdca_data_usart_tx_handler+0x50>
	if (processing_type == DATA_STREAM)
80005b68:	49 28       	lddpc	r8,80005bb0 <pdca_data_usart_tx_handler+0x54>
80005b6a:	70 08       	ld.w	r8,r8[0x0]
80005b6c:	58 08       	cp.w	r8,0
80005b6e:	c1 61       	brne	80005b9a <pdca_data_usart_tx_handler+0x3e>
	{
		pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&data_usart_tx_packet, sizeof(data_usart_tx_packet));
80005b70:	32 aa       	mov	r10,42
80005b72:	49 1b       	lddpc	r11,80005bb4 <pdca_data_usart_tx_handler+0x58>
80005b74:	30 0c       	mov	r12,0
80005b76:	f0 1f 00 11 	mcall	80005bb8 <pdca_data_usart_tx_handler+0x5c>
		/* Circularly increment packet number */
		data_usart_tx_packet.packetnum = (data_usart_tx_packet.packetnum+1) % 128;
80005b7a:	48 f8       	lddpc	r8,80005bb4 <pdca_data_usart_tx_handler+0x58>
80005b7c:	11 a8       	ld.ub	r8,r8[0x2]
80005b7e:	f0 c9 ff ff 	sub	r9,r8,-1
80005b82:	f2 08 14 1f 	asr	r8,r9,0x1f
80005b86:	b9 98       	lsr	r8,0x19
80005b88:	10 09       	add	r9,r8
80005b8a:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80005b8e:	f2 08 01 08 	sub	r8,r9,r8
80005b92:	5c 58       	castu.b	r8
80005b94:	48 89       	lddpc	r9,80005bb4 <pdca_data_usart_tx_handler+0x58>
80005b96:	b2 a8       	st.b	r9[0x2],r8
80005b98:	c0 68       	rjmp	80005ba4 <pdca_data_usart_tx_handler+0x48>
	}
	else
	{
		pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&mu_band_avg, sizeof(mu_band_avg));
80005b9a:	30 4a       	mov	r10,4
80005b9c:	48 8b       	lddpc	r11,80005bbc <pdca_data_usart_tx_handler+0x60>
80005b9e:	30 0c       	mov	r12,0
80005ba0:	f0 1f 00 06 	mcall	80005bb8 <pdca_data_usart_tx_handler+0x5c>
	}
}
80005ba4:	e3 cd 40 80 	ldm	sp++,r7,lr
80005ba8:	d6 03       	rete
80005baa:	00 00       	add	r0,r0
80005bac:	80 00       	ld.sh	r0,r0[0x0]
80005bae:	39 e4       	mov	r4,-98
80005bb0:	00 00       	add	r0,r0
80005bb2:	21 dc       	sub	r12,29
80005bb4:	00 00       	add	r0,r0
80005bb6:	00 08       	add	r8,r0
80005bb8:	80 00       	ld.sh	r0,r0[0x0]
80005bba:	3a 44       	mov	r4,-92
80005bbc:	00 00       	add	r0,r0
80005bbe:	21 58       	sub	r8,21

80005bc0 <pdca_data_usart_rx_handler>:

__attribute__((__interrupt__)) static void pdca_data_usart_rx_handler(void)
{
80005bc0:	eb cd 40 80 	pushm	r7,lr
80005bc4:	1a 97       	mov	r7,sp
80005bc6:	20 2d       	sub	sp,8
	uint8_t readback;
	
	Disable_global_interrupt();
80005bc8:	d3 03       	ssrf	0x10
	
	DATA_USART->cr = AVR32_USART_CR_RTSDIS_MASK;
80005bca:	fe 78 3c 00 	mov	r8,-50176
80005bce:	e8 69 00 00 	mov	r9,524288
80005bd2:	91 09       	st.w	r8[0x0],r9
	
	/* Code would go here to parse command switching between data streaming and frequency band extraction
	 * modes. Make sure value of this command is not included in set of ADS1299 commands.
	 */
	
	switch (data_usart_rx_dma_buffer[0] & 0xE0)
80005bd4:	4a f8       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005bd6:	11 88       	ld.ub	r8,r8[0x0]
80005bd8:	5c 58       	castu.b	r8
80005bda:	e2 18 00 e0 	andl	r8,0xe0,COH
80005bde:	e0 48 00 20 	cp.w	r8,32
80005be2:	c1 30       	breq	80005c08 <pdca_data_usart_rx_handler+0x48>
80005be4:	e0 48 00 40 	cp.w	r8,64
80005be8:	c3 01       	brne	80005c48 <pdca_data_usart_rx_handler+0x88>
	{
		case 0x40:	// WREG
			ads1299_wreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, data_usart_rx_dma_buffer[2]);
80005bea:	4a a8       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005bec:	11 a8       	ld.ub	r8,r8[0x2]
80005bee:	5c 58       	castu.b	r8
80005bf0:	10 99       	mov	r9,r8
80005bf2:	4a 88       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005bf4:	11 88       	ld.ub	r8,r8[0x0]
80005bf6:	5c 58       	castu.b	r8
80005bf8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005bfc:	12 9a       	mov	r10,r9
80005bfe:	10 9b       	mov	r11,r8
80005c00:	30 0c       	mov	r12,0
80005c02:	f0 1f 00 25 	mcall	80005c94 <pdca_data_usart_rx_handler+0xd4>
			break;
80005c06:	c2 88       	rjmp	80005c56 <pdca_data_usart_rx_handler+0x96>
		case 0x20:	// RREG
			ads1299_rreg(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0] & 0x1F, &readback);
80005c08:	4a 28       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005c0a:	11 88       	ld.ub	r8,r8[0x0]
80005c0c:	5c 58       	castu.b	r8
80005c0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005c12:	ee c9 00 05 	sub	r9,r7,5
80005c16:	12 9a       	mov	r10,r9
80005c18:	10 9b       	mov	r11,r8
80005c1a:	30 0c       	mov	r12,0
80005c1c:	f0 1f 00 1f 	mcall	80005c98 <pdca_data_usart_rx_handler+0xd8>
			usart_putchar(DATA_USART, (int)readback);
80005c20:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005c24:	10 9b       	mov	r11,r8
80005c26:	fe 7c 3c 00 	mov	r12,-50176
80005c2a:	f0 1f 00 1d 	mcall	80005c9c <pdca_data_usart_rx_handler+0xdc>
80005c2e:	fe 78 3c 00 	mov	r8,-50176
80005c32:	ef 48 ff fc 	st.w	r7[-4],r8
 * \return \c 1 if the USART Transmit Shift Register and the USART Transmit
 *         Holding Register are free, otherwise \c 0.
 */
__always_inline static int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
80005c36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c3a:	70 58       	ld.w	r8,r8[0x14]
80005c3c:	e2 18 02 00 	andl	r8,0x200,COH
80005c40:	5f 18       	srne	r8
			while(!usart_tx_empty(DATA_USART));
80005c42:	58 08       	cp.w	r8,0
80005c44:	cf 50       	breq	80005c2e <pdca_data_usart_rx_handler+0x6e>
			break;
80005c46:	c0 88       	rjmp	80005c56 <pdca_data_usart_rx_handler+0x96>
		default:
			ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, data_usart_rx_dma_buffer[0]);
80005c48:	49 28       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005c4a:	11 88       	ld.ub	r8,r8[0x0]
80005c4c:	5c 58       	castu.b	r8
80005c4e:	10 9b       	mov	r11,r8
80005c50:	30 0c       	mov	r12,0
80005c52:	f0 1f 00 14 	mcall	80005ca0 <pdca_data_usart_rx_handler+0xe0>
			break;
	}
	if (data_usart_rx_dma_buffer[0] == ADS1299_OPC_STOP)
80005c56:	48 f8       	lddpc	r8,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005c58:	11 88       	ld.ub	r8,r8[0x0]
80005c5a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005c5e:	30 a8       	mov	r8,10
80005c60:	f0 09 18 00 	cp.b	r9,r8
80005c64:	c0 71       	brne	80005c72 <pdca_data_usart_rx_handler+0xb2>
	{
		usart_tx_buffer_idx = 0;
80005c66:	49 08       	lddpc	r8,80005ca4 <pdca_data_usart_rx_handler+0xe4>
80005c68:	30 09       	mov	r9,0
80005c6a:	91 09       	st.w	r8[0x0],r9
		pdca_disable(DATA_USART_TX_PDCA_CHANNEL);
80005c6c:	30 0c       	mov	r12,0
80005c6e:	f0 1f 00 0f 	mcall	80005ca8 <pdca_data_usart_rx_handler+0xe8>
	}
	pdca_load_channel(DATA_USART_RX_PDCA_CHANNEL, (void *)data_usart_rx_dma_buffer, 3);
80005c72:	30 3a       	mov	r10,3
80005c74:	48 7b       	lddpc	r11,80005c90 <pdca_data_usart_rx_handler+0xd0>
80005c76:	30 1c       	mov	r12,1
80005c78:	f0 1f 00 0d 	mcall	80005cac <pdca_data_usart_rx_handler+0xec>
	DATA_USART->cr = AVR32_USART_CR_RTSEN_MASK;
80005c7c:	fe 78 3c 00 	mov	r8,-50176
80005c80:	e4 69 00 00 	mov	r9,262144
80005c84:	91 09       	st.w	r8[0x0],r9
	
	Enable_global_interrupt();
80005c86:	d5 03       	csrf	0x10
}
80005c88:	2f ed       	sub	sp,-8
80005c8a:	e3 cd 40 80 	ldm	sp++,r7,lr
80005c8e:	d6 03       	rete
80005c90:	00 00       	add	r0,r0
80005c92:	21 e4       	sub	r4,30
80005c94:	80 00       	ld.sh	r0,r0[0x0]
80005c96:	28 a0       	sub	r0,-118
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	26 d8       	sub	r8,109
80005c9c:	80 00       	ld.sh	r0,r0[0x0]
80005c9e:	4a 30       	lddpc	r0,80005d28 <config_dma+0x78>
80005ca0:	80 00       	ld.sh	r0,r0[0x0]
80005ca2:	5a 24       	cp.w	r4,-30
80005ca4:	00 00       	add	r0,r0
80005ca6:	21 e8       	sub	r8,30
80005ca8:	80 00       	ld.sh	r0,r0[0x0]
80005caa:	39 e4       	mov	r4,-98
80005cac:	80 00       	ld.sh	r0,r0[0x0]
80005cae:	3a 44       	mov	r4,-92

80005cb0 <config_dma>:

void config_dma(void)
{
80005cb0:	eb cd 40 80 	pushm	r7,lr
80005cb4:	1a 97       	mov	r7,sp
80005cb6:	20 fd       	sub	sp,60
	{
		.pid			= DATA_USART_TX_PDCA_PID,
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.r_addr			= NULL,
		.r_size			= 0
	};
80005cb8:	ee c8 00 20 	sub	r8,r7,32
80005cbc:	30 0a       	mov	r10,0
80005cbe:	30 0b       	mov	r11,0
80005cc0:	f0 eb 00 00 	st.d	r8[0],r10
80005cc4:	2f 88       	sub	r8,-8
80005cc6:	30 0a       	mov	r10,0
80005cc8:	30 0b       	mov	r11,0
80005cca:	f0 eb 00 00 	st.d	r8[0],r10
80005cce:	2f 88       	sub	r8,-8
80005cd0:	30 0a       	mov	r10,0
80005cd2:	30 0b       	mov	r11,0
80005cd4:	f0 eb 00 00 	st.d	r8[0],r10
80005cd8:	2f 88       	sub	r8,-8
80005cda:	30 09       	mov	r9,0
80005cdc:	91 09       	st.w	r8[0x0],r9
80005cde:	2f c8       	sub	r8,-4
80005ce0:	30 f8       	mov	r8,15
80005ce2:	ef 48 ff f0 	st.w	r7[-16],r8
		.transfer_size	= PDCA_TRANSFER_SIZE_BYTE,
		.addr			= (void *)data_usart_rx_dma_buffer,
		.size			= 3,
		.r_addr			= NULL,
		.r_size			= 0
	};
80005ce6:	ee c8 00 3c 	sub	r8,r7,60
80005cea:	30 0a       	mov	r10,0
80005cec:	30 0b       	mov	r11,0
80005cee:	f0 eb 00 00 	st.d	r8[0],r10
80005cf2:	2f 88       	sub	r8,-8
80005cf4:	30 0a       	mov	r10,0
80005cf6:	30 0b       	mov	r11,0
80005cf8:	f0 eb 00 00 	st.d	r8[0],r10
80005cfc:	2f 88       	sub	r8,-8
80005cfe:	30 0a       	mov	r10,0
80005d00:	30 0b       	mov	r11,0
80005d02:	f0 eb 00 00 	st.d	r8[0],r10
80005d06:	2f 88       	sub	r8,-8
80005d08:	30 09       	mov	r9,0
80005d0a:	91 09       	st.w	r8[0x0],r9
80005d0c:	2f c8       	sub	r8,-4
80005d0e:	4a 38       	lddpc	r8,80005d98 <config_dma+0xe8>
80005d10:	ef 48 ff c4 	st.w	r7[-60],r8
80005d14:	30 38       	mov	r8,3
80005d16:	ef 48 ff c8 	st.w	r7[-56],r8
80005d1a:	30 38       	mov	r8,3
80005d1c:	ef 48 ff d4 	st.w	r7[-44],r8
	
	bool global_irq_enabled = cpu_irq_is_enabled();
80005d20:	e1 b8 00 00 	mfsr	r8,0x0
80005d24:	10 9c       	mov	r12,r8
80005d26:	f0 1f 00 1e 	mcall	80005d9c <config_dma+0xec>
80005d2a:	18 98       	mov	r8,r12
80005d2c:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_irq_enabled) {
80005d30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d34:	30 08       	mov	r8,0
80005d36:	f0 09 18 00 	cp.b	r9,r8
80005d3a:	c0 20       	breq	80005d3e <config_dma+0x8e>
		/* Turn off interrupts while we set stuff up */
		Disable_global_interrupt();
80005d3c:	d3 03       	ssrf	0x10
	}
	
	/* Init PDCA and register corresponding interrupts */
	/* USART3 receipt */
	pdca_init_channel(DATA_USART_RX_PDCA_CHANNEL, &pdca_data_usart_rx_opt);
80005d3e:	ee c8 00 3c 	sub	r8,r7,60
80005d42:	10 9b       	mov	r11,r8
80005d44:	30 1c       	mov	r12,1
80005d46:	f0 1f 00 17 	mcall	80005da0 <config_dma+0xf0>
	INTC_register_interrupt((__int_handler)&pdca_data_usart_rx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_RX_PDCA_CHANNEL, AVR32_INTC_INT3);
80005d4a:	30 3a       	mov	r10,3
80005d4c:	e0 6b 00 81 	mov	r11,129
80005d50:	49 5c       	lddpc	r12,80005da4 <config_dma+0xf4>
80005d52:	f0 1f 00 16 	mcall	80005da8 <config_dma+0xf8>
	pdca_enable_interrupt_transfer_complete(DATA_USART_RX_PDCA_CHANNEL);
80005d56:	30 1c       	mov	r12,1
80005d58:	f0 1f 00 15 	mcall	80005dac <config_dma+0xfc>
	
	/* USART3 transmission */
	pdca_init_channel(DATA_USART_TX_PDCA_CHANNEL, &pdca_data_usart_tx_opt);
80005d5c:	ee c8 00 20 	sub	r8,r7,32
80005d60:	10 9b       	mov	r11,r8
80005d62:	30 0c       	mov	r12,0
80005d64:	f0 1f 00 0f 	mcall	80005da0 <config_dma+0xf0>
	INTC_register_interrupt((__int_handler)&pdca_data_usart_tx_handler, AVR32_PDCA_IRQ_0 + DATA_USART_TX_PDCA_CHANNEL, AVR32_INTC_INT2);
80005d68:	30 2a       	mov	r10,2
80005d6a:	e0 6b 00 80 	mov	r11,128
80005d6e:	49 1c       	lddpc	r12,80005db0 <config_dma+0x100>
80005d70:	f0 1f 00 0e 	mcall	80005da8 <config_dma+0xf8>
	pdca_load_channel(DATA_USART_TX_PDCA_CHANNEL, (void *)&data_usart_tx_packet, sizeof(data_usart_tx_packet));
80005d74:	32 aa       	mov	r10,42
80005d76:	49 0b       	lddpc	r11,80005db4 <config_dma+0x104>
80005d78:	30 0c       	mov	r12,0
80005d7a:	f0 1f 00 10 	mcall	80005db8 <config_dma+0x108>
	pdca_enable_interrupt_transfer_complete(DATA_USART_TX_PDCA_CHANNEL);	
80005d7e:	30 0c       	mov	r12,0
80005d80:	f0 1f 00 0b 	mcall	80005dac <config_dma+0xfc>
	
	if (global_irq_enabled) {
80005d84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d88:	30 08       	mov	r8,0
80005d8a:	f0 09 18 00 	cp.b	r9,r8
80005d8e:	c0 20       	breq	80005d92 <config_dma+0xe2>
		/* Enable all interrupts */
		Enable_global_interrupt();
80005d90:	d5 03       	csrf	0x10
	}
}
80005d92:	2f 1d       	sub	sp,-60
80005d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d98:	00 00       	add	r0,r0
80005d9a:	21 e4       	sub	r4,30
80005d9c:	80 00       	ld.sh	r0,r0[0x0]
80005d9e:	56 30       	stdsp	sp[0x18c],r0
80005da0:	80 00       	ld.sh	r0,r0[0x0]
80005da2:	39 14       	mov	r4,-111
80005da4:	80 00       	ld.sh	r0,r0[0x0]
80005da6:	5b c0       	cp.w	r0,-4
80005da8:	80 00       	ld.sh	r0,r0[0x0]
80005daa:	37 9c       	mov	r12,121
80005dac:	80 00       	ld.sh	r0,r0[0x0]
80005dae:	3b 04       	mov	r4,-80
80005db0:	80 00       	ld.sh	r0,r0[0x0]
80005db2:	5b 5c       	cp.w	r12,-11
80005db4:	00 00       	add	r0,r0
80005db6:	00 08       	add	r8,r0
80005db8:	80 00       	ld.sh	r0,r0[0x0]
80005dba:	3a 44       	mov	r4,-92

80005dbc <config_eic>:

void config_eic(void)
{
80005dbc:	eb cd 40 80 	pushm	r7,lr
80005dc0:	1a 97       	mov	r7,sp
80005dc2:	20 2d       	sub	sp,8
		.eic_mode    = EIC_MODE_EDGE_TRIGGERED,
		.eic_level   = EIC_EDGE_FALLING_EDGE,
		.eic_filter  = EIC_FILTER_DISABLED,
		.eic_async   = EIC_ASYNCH_MODE,
		.eic_line    = ADS1299_DRDY_INT
	};
80005dc4:	ee c8 00 07 	sub	r8,r7,7
80005dc8:	30 09       	mov	r9,0
80005dca:	b0 89       	st.b	r8[0x0],r9
80005dcc:	2f f8       	sub	r8,-1
80005dce:	30 09       	mov	r9,0
80005dd0:	b0 89       	st.b	r8[0x0],r9
80005dd2:	2f f8       	sub	r8,-1
80005dd4:	30 09       	mov	r9,0
80005dd6:	b0 89       	st.b	r8[0x0],r9
80005dd8:	2f f8       	sub	r8,-1
80005dda:	30 09       	mov	r9,0
80005ddc:	b0 89       	st.b	r8[0x0],r9
80005dde:	2f f8       	sub	r8,-1
80005de0:	30 09       	mov	r9,0
80005de2:	b0 89       	st.b	r8[0x0],r9
80005de4:	2f f8       	sub	r8,-1
80005de6:	30 09       	mov	r9,0
80005de8:	b0 89       	st.b	r8[0x0],r9
80005dea:	2f f8       	sub	r8,-1
80005dec:	30 58       	mov	r8,5
80005dee:	ef 68 ff f9 	st.b	r7[-7],r8
80005df2:	30 18       	mov	r8,1
80005df4:	ef 68 ff fe 	st.b	r7[-2],r8
	
	bool global_irq_enabled = cpu_irq_is_enabled();
80005df8:	e1 b8 00 00 	mfsr	r8,0x0
80005dfc:	10 9c       	mov	r12,r8
80005dfe:	f0 1f 00 1a 	mcall	80005e64 <config_eic+0xa8>
80005e02:	18 98       	mov	r8,r12
80005e04:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_irq_enabled) {
80005e08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005e0c:	30 08       	mov	r8,0
80005e0e:	f0 09 18 00 	cp.b	r9,r8
80005e12:	c0 20       	breq	80005e16 <config_eic+0x5a>
		Disable_global_interrupt();
80005e14:	d3 03       	ssrf	0x10
	}
	
	/* Register external DRDY interrupt */
	INTC_register_interrupt((__int_handler)&eic_handler, ADS1299_DRDY_IRQ, AVR32_INTC_INT0);
80005e16:	30 0a       	mov	r10,0
80005e18:	e0 6b 01 80 	mov	r11,384
80005e1c:	49 3c       	lddpc	r12,80005e68 <config_eic+0xac>
80005e1e:	f0 1f 00 14 	mcall	80005e6c <config_eic+0xb0>
	eic_init(&AVR32_EIC, &eic_drdy_opt, 1);
80005e22:	ee c8 00 07 	sub	r8,r7,7
80005e26:	30 1a       	mov	r10,1
80005e28:	10 9b       	mov	r11,r8
80005e2a:	fe 7c 24 00 	mov	r12,-56320
80005e2e:	f0 1f 00 11 	mcall	80005e70 <config_eic+0xb4>
	eic_enable_line(&AVR32_EIC, eic_drdy_opt.eic_line);
80005e32:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005e36:	10 9b       	mov	r11,r8
80005e38:	fe 7c 24 00 	mov	r12,-56320
80005e3c:	f0 1f 00 0e 	mcall	80005e74 <config_eic+0xb8>
	eic_enable_interrupt_line(&AVR32_EIC, eic_drdy_opt.eic_line);
80005e40:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005e44:	10 9b       	mov	r11,r8
80005e46:	fe 7c 24 00 	mov	r12,-56320
80005e4a:	f0 1f 00 0c 	mcall	80005e78 <config_eic+0xbc>
	
	if (global_irq_enabled) {
80005e4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005e52:	30 08       	mov	r8,0
80005e54:	f0 09 18 00 	cp.b	r9,r8
80005e58:	c0 20       	breq	80005e5c <config_eic+0xa0>
		Enable_global_interrupt();
80005e5a:	d5 03       	csrf	0x10
	}
}
80005e5c:	2f ed       	sub	sp,-8
80005e5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e62:	00 00       	add	r0,r0
80005e64:	80 00       	ld.sh	r0,r0[0x0]
80005e66:	56 30       	stdsp	sp[0x18c],r0
80005e68:	80 00       	ld.sh	r0,r0[0x0]
80005e6a:	5a 74       	cp.w	r4,-25
80005e6c:	80 00       	ld.sh	r0,r0[0x0]
80005e6e:	37 9c       	mov	r12,121
80005e70:	80 00       	ld.sh	r0,r0[0x0]
80005e72:	2c 18       	sub	r8,-63
80005e74:	80 00       	ld.sh	r0,r0[0x0]
80005e76:	2e 96       	sub	r6,-23
80005e78:	80 00       	ld.sh	r0,r0[0x0]
80005e7a:	2e be       	sub	lr,-21

80005e7c <config_spi>:

void config_spi(void)
{
80005e7c:	eb cd 40 80 	pushm	r7,lr
80005e80:	1a 97       	mov	r7,sp
80005e82:	20 4d       	sub	sp,16
		.spck_delay		= 0,							// Delay before first clock pulse after selecting slave (in PBA clock periods)
		.trans_delay	= 0,							// Delay between each transfer/character (in PBA clock periods)
		.stay_act		= true,							// Sets this chip to stay active after last transfer to it
		.spi_mode		= SPI_MODE_1,					// Which SPI mode to use (ADS1299 is mode 1)
		.modfdis		= true							// Disable the mode fault detection
	};
80005e84:	49 59       	lddpc	r9,80005ed8 <config_spi+0x5c>
80005e86:	ee c8 00 10 	sub	r8,r7,16
80005e8a:	20 08       	sub	r8,0
80005e8c:	20 09       	sub	r9,0
80005e8e:	72 0a       	ld.w	r10,r9[0x0]
80005e90:	91 0a       	st.w	r8[0x0],r10
80005e92:	72 1a       	ld.w	r10,r9[0x4]
80005e94:	91 1a       	st.w	r8[0x4],r10
80005e96:	72 2a       	ld.w	r10,r9[0x8]
80005e98:	91 2a       	st.w	r8[0x8],r10
80005e9a:	72 39       	ld.w	r9,r9[0xc]
80005e9c:	91 39       	st.w	r8[0xc],r9
	
	/* Init SPI module as master */
	spi_initMaster(SPI_ADDRESS, &spi_opt);
80005e9e:	ee c8 00 10 	sub	r8,r7,16
80005ea2:	10 9b       	mov	r11,r8
80005ea4:	fe 7c 40 00 	mov	r12,-49152
80005ea8:	f0 1f 00 0d 	mcall	80005edc <config_spi+0x60>
	
	/* Setup configuration for chip connected to CS0 */
	debug_spi = spi_setupChipReg(SPI_ADDRESS, &spi_opt, sysclk_get_pba_hz());
80005eac:	f0 1f 00 0d 	mcall	80005ee0 <config_spi+0x64>
80005eb0:	18 99       	mov	r9,r12
80005eb2:	ee c8 00 10 	sub	r8,r7,16
80005eb6:	12 9a       	mov	r10,r9
80005eb8:	10 9b       	mov	r11,r8
80005eba:	fe 7c 40 00 	mov	r12,-49152
80005ebe:	f0 1f 00 0a 	mcall	80005ee4 <config_spi+0x68>
80005ec2:	18 99       	mov	r9,r12
80005ec4:	48 98       	lddpc	r8,80005ee8 <config_spi+0x6c>
80005ec6:	91 09       	st.w	r8[0x0],r9
	
	/* Allow the module to transfer data */
	spi_enable(SPI_ADDRESS);
80005ec8:	fe 7c 40 00 	mov	r12,-49152
80005ecc:	f0 1f 00 08 	mcall	80005eec <config_spi+0x70>
}
80005ed0:	2f cd       	sub	sp,-16
80005ed2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ed6:	00 00       	add	r0,r0
80005ed8:	80 00       	ld.sh	r0,r0[0x0]
80005eda:	77 24       	ld.w	r4,r11[0x48]
80005edc:	80 00       	ld.sh	r0,r0[0x0]
80005ede:	3b d4       	mov	r4,-67
80005ee0:	80 00       	ld.sh	r0,r0[0x0]
80005ee2:	56 c8       	stdsp	sp[0x1b0],r8
80005ee4:	80 00       	ld.sh	r0,r0[0x0]
80005ee6:	3d 6c       	mov	r12,-42
80005ee8:	00 00       	add	r0,r0
80005eea:	21 54       	sub	r4,21
80005eec:	80 00       	ld.sh	r0,r0[0x0]
80005eee:	3e f0       	mov	r0,-17

80005ef0 <config_gpios>:

void config_gpios(void)
{						
80005ef0:	eb cd 40 80 	pushm	r7,lr
80005ef4:	1a 97       	mov	r7,sp
	#if (BRAINBOARD_REV > 0)
	/* Config GPIOs for I2C/TWI comms with inertial measurement unit */
	/* First we apparently have to assign the default TWIM pins as something so that we can
	 * use different ones. Stupid. Tore my hair out before I got this one...
	 */
	gpio_enable_gpio_pin(AVR32_PIN_PB05);												// Default TWIMS0 TWCK
80005ef6:	32 5c       	mov	r12,37
80005ef8:	f0 1f 00 2b 	mcall	80005fa4 <config_gpios+0xb4>
	gpio_enable_gpio_pin(AVR32_PIN_PA21);												// Default TWIMS0 TWD
80005efc:	31 5c       	mov	r12,21
80005efe:	f0 1f 00 2a 	mcall	80005fa4 <config_gpios+0xb4>
	gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);	// PA04
80005f02:	30 1b       	mov	r11,1
80005f04:	30 4c       	mov	r12,4
80005f06:	f0 1f 00 29 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_2_PIN, AVR32_TWIMS0_TWD_0_2_FUNCTION);	// PA05
80005f0a:	30 6b       	mov	r11,6
80005f0c:	30 5c       	mov	r12,5
80005f0e:	f0 1f 00 27 	mcall	80005fa8 <config_gpios+0xb8>
	
	/* MPU6050 interrupt pin: polled at each ADS1299 DRDY */
	gpio_enable_gpio_pin(MPU6050_INT_PIN);												// PA10
80005f12:	30 7c       	mov	r12,7
80005f14:	f0 1f 00 24 	mcall	80005fa4 <config_gpios+0xb4>
	gpio_configure_pin(MPU6050_INT_PIN, GPIO_DIR_INPUT);
80005f18:	30 0b       	mov	r11,0
80005f1a:	30 7c       	mov	r12,7
80005f1c:	f0 1f 00 24 	mcall	80005fac <config_gpios+0xbc>
	#endif
	
	/* Config GPIOs for USART2 (wired data) */
	gpio_enable_module_pin(AVR32_USART2_TXD_0_1_PIN, AVR32_USART2_TXD_0_1_FUNCTION);	// PA06
80005f20:	30 1b       	mov	r11,1
80005f22:	30 6c       	mov	r12,6
80005f24:	f0 1f 00 21 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_pin_pull_up(AVR32_USART2_TXD_0_1_PIN);
80005f28:	30 6c       	mov	r12,6
80005f2a:	f0 1f 00 22 	mcall	80005fb0 <config_gpios+0xc0>
	gpio_enable_module_pin(AVR32_USART2_RXD_0_1_PIN, AVR32_USART2_RXD_0_1_FUNCTION);	// PA07
80005f2e:	30 1b       	mov	r11,1
80005f30:	30 7c       	mov	r12,7
80005f32:	f0 1f 00 1e 	mcall	80005fa8 <config_gpios+0xb8>

	/* Config GPIOs for USART3 (RN-42 Bluetooth data) */
	gpio_enable_module_pin(AVR32_USART3_TXD_0_1_PIN, AVR32_USART3_TXD_0_1_FUNCTION);	// PB06
80005f36:	30 1b       	mov	r11,1
80005f38:	32 6c       	mov	r12,38
80005f3a:	f0 1f 00 1c 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_pin_pull_up(AVR32_USART3_TXD_0_1_PIN);
80005f3e:	32 6c       	mov	r12,38
80005f40:	f0 1f 00 1c 	mcall	80005fb0 <config_gpios+0xc0>
	gpio_enable_module_pin(AVR32_USART3_RXD_0_1_PIN, AVR32_USART3_RXD_0_1_FUNCTION);	// PB07
80005f44:	30 1b       	mov	r11,1
80005f46:	32 7c       	mov	r12,39
80005f48:	f0 1f 00 18 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_USART3_RTS_0_1_PIN, AVR32_USART3_RTS_0_1_FUNCTION);	// PB08
80005f4c:	30 1b       	mov	r11,1
80005f4e:	32 8c       	mov	r12,40
80005f50:	f0 1f 00 16 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_USART3_CTS_0_1_PIN, AVR32_USART3_CTS_0_1_FUNCTION);	// PB09
80005f54:	30 1b       	mov	r11,1
80005f56:	32 9c       	mov	r12,41
80005f58:	f0 1f 00 14 	mcall	80005fa8 <config_gpios+0xb8>
	
	/* Config GPIOs for SPI */
	gpio_enable_module_pin(AVR32_SPI_MISO_0_1_PIN, AVR32_SPI_MISO_0_1_FUNCTION);		// PB02
80005f5c:	30 2b       	mov	r11,2
80005f5e:	32 2c       	mov	r12,34
80005f60:	f0 1f 00 12 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_SPI_MOSI_0_1_PIN, AVR32_SPI_MOSI_0_1_FUNCTION);		// PB03
80005f64:	30 2b       	mov	r11,2
80005f66:	32 3c       	mov	r12,35
80005f68:	f0 1f 00 10 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_SPI_SCK_0_1_PIN, AVR32_SPI_SCK_0_1_FUNCTION);			// PB01
80005f6c:	30 2b       	mov	r11,2
80005f6e:	32 1c       	mov	r12,33
80005f70:	f0 1f 00 0e 	mcall	80005fa8 <config_gpios+0xb8>
	gpio_enable_module_pin(AVR32_SPI_NPCS_0_1_PIN, AVR32_SPI_NPCS_0_1_FUNCTION);		// PB00
80005f74:	30 2b       	mov	r11,2
80005f76:	32 0c       	mov	r12,32
80005f78:	f0 1f 00 0c 	mcall	80005fa8 <config_gpios+0xb8>
	
	/* RN-42 hardware reset pin */
	gpio_enable_gpio_pin(BT_RESET_PIN);													// PB11
80005f7c:	32 bc       	mov	r12,43
80005f7e:	f0 1f 00 0a 	mcall	80005fa4 <config_gpios+0xb4>
	gpio_configure_pin(BT_RESET_PIN, GPIO_DIR_OUTPUT);
80005f82:	30 1b       	mov	r11,1
80005f84:	32 bc       	mov	r12,43
80005f86:	f0 1f 00 0a 	mcall	80005fac <config_gpios+0xbc>
	gpio_enable_gpio_pin(ADS1299_PIN_START);											// PA17	
	gpio_configure_pin(ADS1299_PIN_START, GPIO_DIR_OUTPUT);
	gpio_enable_gpio_pin(ADS1299_PIN_RESET);											// PB04
	gpio_configure_pin(ADS1299_PIN_RESET, GPIO_DIR_OUTPUT);
	#endif
	gpio_enable_gpio_pin(ADS1299_PIN_PWDN);												// PA09
80005f8a:	30 9c       	mov	r12,9
80005f8c:	f0 1f 00 06 	mcall	80005fa4 <config_gpios+0xb4>
	gpio_configure_pin(ADS1299_PIN_PWDN, GPIO_DIR_OUTPUT);
80005f90:	30 1b       	mov	r11,1
80005f92:	30 9c       	mov	r12,9
80005f94:	f0 1f 00 06 	mcall	80005fac <config_gpios+0xbc>
	/* ADS1299 DRDY interrupt pin */	
	gpio_enable_module_pin(ADS1299_PIN_DRDY, ADS1299_DRDY_INT_FN);						// PA18
80005f98:	30 6b       	mov	r11,6
80005f9a:	31 2c       	mov	r12,18
80005f9c:	f0 1f 00 03 	mcall	80005fa8 <config_gpios+0xb8>
}
80005fa0:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fa4:	80 00       	ld.sh	r0,r0[0x0]
80005fa6:	33 34       	mov	r4,51
80005fa8:	80 00       	ld.sh	r0,r0[0x0]
80005faa:	30 b8       	mov	r8,11
80005fac:	80 00       	ld.sh	r0,r0[0x0]
80005fae:	33 be       	mov	lr,59
80005fb0:	80 00       	ld.sh	r0,r0[0x0]
80005fb2:	33 84       	mov	r4,56

80005fb4 <config_twim>:

status_code_t config_twim(void)
{	
80005fb4:	eb cd 40 80 	pushm	r7,lr
80005fb8:	1a 97       	mov	r7,sp
80005fba:	20 4d       	sub	sp,16
	twim_options_t twim_opt =
	{
		.speed	= I2C_MASTER_SPEED_HZ,
		.chip	= MPU6050_DEFAULT_ADDRESS,
		.pba_hz = sysclk_get_pba_hz(),
80005fbc:	f0 1f 00 10 	mcall	80005ffc <config_twim+0x48>
80005fc0:	18 98       	mov	r8,r12
		.smbus	= false 
	};
80005fc2:	ef 48 ff f0 	st.w	r7[-16],r8
80005fc6:	e6 68 1a 80 	mov	r8,400000
80005fca:	ef 48 ff f4 	st.w	r7[-12],r8
80005fce:	36 88       	mov	r8,104
80005fd0:	ef 48 ff f8 	st.w	r7[-8],r8
80005fd4:	30 08       	mov	r8,0
80005fd6:	ef 68 ff fc 	st.b	r7[-4],r8
	
	sysclk_enable_peripheral_clock(I2C_MODULE);			
80005fda:	fe 7c 44 00 	mov	r12,-48128
80005fde:	f0 1f 00 09 	mcall	80006000 <config_twim+0x4c>
	return twim_master_init(I2C_MODULE, (const twim_options_t *)&twim_opt);
80005fe2:	ee c8 00 10 	sub	r8,r7,16
80005fe6:	10 9b       	mov	r11,r8
80005fe8:	fe 7c 44 00 	mov	r12,-48128
80005fec:	f0 1f 00 06 	mcall	80006004 <config_twim+0x50>
80005ff0:	18 98       	mov	r8,r12
}
80005ff2:	10 9c       	mov	r12,r8
80005ff4:	2f cd       	sub	sp,-16
80005ff6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ffa:	00 00       	add	r0,r0
80005ffc:	80 00       	ld.sh	r0,r0[0x0]
80005ffe:	56 c8       	stdsp	sp[0x1b0],r8
80006000:	80 00       	ld.sh	r0,r0[0x0]
80006002:	57 20       	stdsp	sp[0x1c8],r0
80006004:	80 00       	ld.sh	r0,r0[0x0]
80006006:	41 5c       	lddsp	r12,sp[0x54]

80006008 <config_usart>:

void config_usart(void)
{	
80006008:	eb cd 40 80 	pushm	r7,lr
8000600c:	1a 97       	mov	r7,sp
8000600e:	20 3d       	sub	sp,12
		.channelmode = USART_NORMAL_CHMODE,
		.charlength  = 8,
		.paritytype  = USART_NO_PARITY,
		.stopbits    = USART_1_STOPBIT
		
	};
80006010:	49 08       	lddpc	r8,80006050 <config_usart+0x48>
80006012:	ee ca 00 0c 	sub	r10,r7,12
80006016:	10 9b       	mov	r11,r8
80006018:	f6 e8 00 00 	ld.d	r8,r11[0]
8000601c:	f4 e9 00 00 	st.d	r10[0],r8
80006020:	76 28       	ld.w	r8,r11[0x8]
80006022:	95 28       	st.w	r10[0x8],r8
	/* Configure and enable USART module for inter-processor comms */
// 	sysclk_enable_peripheral_clock(USARTUC_MODULE);
// 	usart_init_rs232(USARTUC_MODULE, &usartuc_opt, sysclk_get_pba_hz());
	
	/* Enable USART for Bluetooth module comms */
	sysclk_enable_peripheral_clock(USARTBT_MODULE);
80006024:	fe 7c 3c 00 	mov	r12,-50176
80006028:	f0 1f 00 0b 	mcall	80006054 <config_usart+0x4c>
	debug_usart = usart_init_hw_handshaking(USARTBT_MODULE, &usartbt_opt, sysclk_get_pba_hz());
8000602c:	f0 1f 00 0b 	mcall	80006058 <config_usart+0x50>
80006030:	18 98       	mov	r8,r12
80006032:	10 99       	mov	r9,r8
80006034:	ee c8 00 0c 	sub	r8,r7,12
80006038:	12 9a       	mov	r10,r9
8000603a:	10 9b       	mov	r11,r8
8000603c:	fe 7c 3c 00 	mov	r12,-50176
80006040:	f0 1f 00 07 	mcall	8000605c <config_usart+0x54>
80006044:	18 99       	mov	r9,r12
80006046:	48 78       	lddpc	r8,80006060 <config_usart+0x58>
80006048:	91 09       	st.w	r8[0x0],r9
}
8000604a:	2f dd       	sub	sp,-12
8000604c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006050:	80 00       	ld.sh	r0,r0[0x0]
80006052:	77 18       	ld.w	r8,r11[0x44]
80006054:	80 00       	ld.sh	r0,r0[0x0]
80006056:	57 20       	stdsp	sp[0x1c8],r0
80006058:	80 00       	ld.sh	r0,r0[0x0]
8000605a:	56 c8       	stdsp	sp[0x1b0],r8
8000605c:	80 00       	ld.sh	r0,r0[0x0]
8000605e:	49 9c       	lddpc	r12,800060c0 <config_rn42+0x5c>
80006060:	00 00       	add	r0,r0
80006062:	01 4c       	ld.w	r12,--r0

80006064 <config_rn42>:

status_code_t config_rn42(volatile avr32_usart_t* usart)
{
80006064:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80006068:	1a 97       	mov	r7,sp
8000606a:	fa cd 01 ac 	sub	sp,sp,428
8000606e:	ef 4c fe b4 	st.w	r7[-332],r12
	
	/* Reset-cycle RN-42 Bluetooth module */
	gpio_clr_gpio_pin(BT_RESET_PIN);
80006072:	32 bc       	mov	r12,43
80006074:	f0 1f 02 8b 	mcall	80006aa0 <config_rn42+0xa3c>
	delay_us(100);
80006078:	f0 1f 02 8b 	mcall	80006aa4 <config_rn42+0xa40>
8000607c:	18 99       	mov	r9,r12
8000607e:	36 48       	mov	r8,100
80006080:	ef 48 ff 10 	st.w	r7[-240],r8
80006084:	ef 49 ff 0c 	st.w	r7[-244],r9
80006088:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000608c:	ef 48 ff 18 	st.w	r7[-232],r8
80006090:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80006094:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006098:	ee f0 ff 18 	ld.w	r0,r7[-232]
8000609c:	30 01       	mov	r1,0
8000609e:	ee f2 ff 14 	ld.w	r2,r7[-236]
800060a2:	30 03       	mov	r3,0
800060a4:	e2 02 02 49 	mul	r9,r1,r2
800060a8:	e6 00 02 48 	mul	r8,r3,r0
800060ac:	10 09       	add	r9,r8
800060ae:	e0 02 06 4a 	mulu.d	r10,r0,r2
800060b2:	16 09       	add	r9,r11
800060b4:	12 9b       	mov	r11,r9
800060b6:	ee 78 42 3f 	mov	r8,999999
800060ba:	30 09       	mov	r9,0
800060bc:	10 0a       	add	r10,r8
800060be:	f6 09 00 4b 	adc	r11,r11,r9
800060c2:	ee 78 42 40 	mov	r8,1000000
800060c6:	30 09       	mov	r9,0
800060c8:	f0 1f 02 78 	mcall	80006aa8 <config_rn42+0xa44>
800060cc:	14 98       	mov	r8,r10
800060ce:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800060d0:	ef 48 ff 20 	st.w	r7[-224],r8
800060d4:	ee c8 01 48 	sub	r8,r7,328
800060d8:	ef 48 ff 1c 	st.w	r7[-228],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800060dc:	e1 b8 00 42 	mfsr	r8,0x108
800060e0:	10 99       	mov	r9,r8
800060e2:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800060e6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800060e8:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800060ec:	70 09       	ld.w	r9,r8[0x0]
800060ee:	ee f8 ff 20 	ld.w	r8,r7[-224]
800060f2:	10 09       	add	r9,r8
800060f4:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800060f8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800060fa:	ee f9 ff 1c 	ld.w	r9,r7[-228]
800060fe:	30 08       	mov	r8,0
80006100:	f3 68 00 08 	st.b	r9[8],r8
80006104:	ee c8 01 48 	sub	r8,r7,328
80006108:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000610c:	e1 b8 00 42 	mfsr	r8,0x108
80006110:	ef 48 ff 28 	st.w	r7[-216],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006114:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006118:	f1 39 00 08 	ld.ub	r9,r8[8]
8000611c:	30 28       	mov	r8,2
8000611e:	f0 09 18 00 	cp.b	r9,r8
80006122:	c0 31       	brne	80006128 <config_rn42+0xc4>
    return false;
80006124:	30 08       	mov	r8,0
80006126:	c4 38       	rjmp	800061ac <config_rn42+0x148>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006128:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000612c:	f1 39 00 08 	ld.ub	r9,r8[8]
80006130:	30 18       	mov	r8,1
80006132:	f0 09 18 00 	cp.b	r9,r8
80006136:	c0 31       	brne	8000613c <config_rn42+0xd8>
    return true;
80006138:	30 18       	mov	r8,1
8000613a:	c3 98       	rjmp	800061ac <config_rn42+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000613c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006140:	70 09       	ld.w	r9,r8[0x0]
80006142:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006146:	70 18       	ld.w	r8,r8[0x4]
80006148:	10 39       	cp.w	r9,r8
8000614a:	e0 88 00 1a 	brls	8000617e <config_rn42+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000614e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006152:	70 09       	ld.w	r9,r8[0x0]
80006154:	ee f8 ff 28 	ld.w	r8,r7[-216]
80006158:	12 38       	cp.w	r8,r9
8000615a:	c1 02       	brcc	8000617a <config_rn42+0x116>
8000615c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006160:	70 19       	ld.w	r9,r8[0x4]
80006162:	ee f8 ff 28 	ld.w	r8,r7[-216]
80006166:	12 38       	cp.w	r8,r9
80006168:	e0 88 00 09 	brls	8000617a <config_rn42+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000616c:	ee f9 ff 24 	ld.w	r9,r7[-220]
80006170:	30 18       	mov	r8,1
80006172:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006176:	30 18       	mov	r8,1
80006178:	c1 a8       	rjmp	800061ac <config_rn42+0x148>
    }
    return false;
8000617a:	30 08       	mov	r8,0
8000617c:	c1 88       	rjmp	800061ac <config_rn42+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000617e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006182:	70 09       	ld.w	r9,r8[0x0]
80006184:	ee f8 ff 28 	ld.w	r8,r7[-216]
80006188:	12 38       	cp.w	r8,r9
8000618a:	c0 93       	brcs	8000619c <config_rn42+0x138>
8000618c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80006190:	70 19       	ld.w	r9,r8[0x4]
80006192:	ee f8 ff 28 	ld.w	r8,r7[-216]
80006196:	12 38       	cp.w	r8,r9
80006198:	e0 88 00 09 	brls	800061aa <config_rn42+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000619c:	ee f9 ff 24 	ld.w	r9,r7[-220]
800061a0:	30 18       	mov	r8,1
800061a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800061a6:	30 18       	mov	r8,1
800061a8:	c0 28       	rjmp	800061ac <config_rn42+0x148>
    }
    return false;
800061aa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800061ac:	58 08       	cp.w	r8,0
800061ae:	ca b0       	breq	80006104 <config_rn42+0xa0>
	gpio_set_gpio_pin(BT_RESET_PIN);
800061b0:	32 bc       	mov	r12,43
800061b2:	f0 1f 02 3f 	mcall	80006aac <config_rn42+0xa48>
	delay_ms(100);
800061b6:	f0 1f 02 3c 	mcall	80006aa4 <config_rn42+0xa40>
800061ba:	18 99       	mov	r9,r12
800061bc:	36 48       	mov	r8,100
800061be:	ef 48 ff 30 	st.w	r7[-208],r8
800061c2:	ef 49 ff 2c 	st.w	r7[-212],r9
800061c6:	ee f8 ff 30 	ld.w	r8,r7[-208]
800061ca:	ef 48 ff 38 	st.w	r7[-200],r8
800061ce:	ee f8 ff 2c 	ld.w	r8,r7[-212]
800061d2:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800061d6:	ee fc ff 38 	ld.w	r12,r7[-200]
800061da:	ef 4c fe 60 	st.w	r7[-416],r12
800061de:	30 0b       	mov	r11,0
800061e0:	ef 4b fe 5c 	st.w	r7[-420],r11
800061e4:	ee fa ff 34 	ld.w	r10,r7[-204]
800061e8:	ef 4a fe 58 	st.w	r7[-424],r10
800061ec:	30 09       	mov	r9,0
800061ee:	ef 49 fe 54 	st.w	r7[-428],r9
800061f2:	ee f9 fe 5c 	ld.w	r9,r7[-420]
800061f6:	ee f8 fe 58 	ld.w	r8,r7[-424]
800061fa:	b1 39       	mul	r9,r8
800061fc:	ee f8 fe 54 	ld.w	r8,r7[-428]
80006200:	ee fc fe 60 	ld.w	r12,r7[-416]
80006204:	b9 38       	mul	r8,r12
80006206:	10 09       	add	r9,r8
80006208:	ee f8 fe 60 	ld.w	r8,r7[-416]
8000620c:	ee fc fe 58 	ld.w	r12,r7[-424]
80006210:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80006214:	16 09       	add	r9,r11
80006216:	12 9b       	mov	r11,r9
80006218:	e0 68 03 e7 	mov	r8,999
8000621c:	30 09       	mov	r9,0
8000621e:	10 0a       	add	r10,r8
80006220:	f6 09 00 4b 	adc	r11,r11,r9
80006224:	e0 68 03 e8 	mov	r8,1000
80006228:	30 09       	mov	r9,0
8000622a:	f0 1f 02 20 	mcall	80006aa8 <config_rn42+0xa44>
8000622e:	14 98       	mov	r8,r10
80006230:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006232:	ef 48 ff 40 	st.w	r7[-192],r8
80006236:	ee c8 01 3c 	sub	r8,r7,316
8000623a:	ef 48 ff 3c 	st.w	r7[-196],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000623e:	e1 b8 00 42 	mfsr	r8,0x108
80006242:	10 99       	mov	r9,r8
80006244:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80006248:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000624a:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000624e:	70 09       	ld.w	r9,r8[0x0]
80006250:	ee f8 ff 40 	ld.w	r8,r7[-192]
80006254:	10 09       	add	r9,r8
80006256:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000625a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000625c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80006260:	30 08       	mov	r8,0
80006262:	f3 68 00 08 	st.b	r9[8],r8
80006266:	ee c8 01 3c 	sub	r8,r7,316
8000626a:	ef 48 ff 44 	st.w	r7[-188],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000626e:	e1 b8 00 42 	mfsr	r8,0x108
80006272:	ef 48 ff 48 	st.w	r7[-184],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006276:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000627a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000627e:	30 28       	mov	r8,2
80006280:	f0 09 18 00 	cp.b	r9,r8
80006284:	c0 31       	brne	8000628a <config_rn42+0x226>
    return false;
80006286:	30 08       	mov	r8,0
80006288:	c4 38       	rjmp	8000630e <config_rn42+0x2aa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000628a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000628e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006292:	30 18       	mov	r8,1
80006294:	f0 09 18 00 	cp.b	r9,r8
80006298:	c0 31       	brne	8000629e <config_rn42+0x23a>
    return true;
8000629a:	30 18       	mov	r8,1
8000629c:	c3 98       	rjmp	8000630e <config_rn42+0x2aa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000629e:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062a2:	70 09       	ld.w	r9,r8[0x0]
800062a4:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062a8:	70 18       	ld.w	r8,r8[0x4]
800062aa:	10 39       	cp.w	r9,r8
800062ac:	e0 88 00 1a 	brls	800062e0 <config_rn42+0x27c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800062b0:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062b4:	70 09       	ld.w	r9,r8[0x0]
800062b6:	ee f8 ff 48 	ld.w	r8,r7[-184]
800062ba:	12 38       	cp.w	r8,r9
800062bc:	c1 02       	brcc	800062dc <config_rn42+0x278>
800062be:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062c2:	70 19       	ld.w	r9,r8[0x4]
800062c4:	ee f8 ff 48 	ld.w	r8,r7[-184]
800062c8:	12 38       	cp.w	r8,r9
800062ca:	e0 88 00 09 	brls	800062dc <config_rn42+0x278>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800062ce:	ee f9 ff 44 	ld.w	r9,r7[-188]
800062d2:	30 18       	mov	r8,1
800062d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800062d8:	30 18       	mov	r8,1
800062da:	c1 a8       	rjmp	8000630e <config_rn42+0x2aa>
    }
    return false;
800062dc:	30 08       	mov	r8,0
800062de:	c1 88       	rjmp	8000630e <config_rn42+0x2aa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800062e0:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062e4:	70 09       	ld.w	r9,r8[0x0]
800062e6:	ee f8 ff 48 	ld.w	r8,r7[-184]
800062ea:	12 38       	cp.w	r8,r9
800062ec:	c0 93       	brcs	800062fe <config_rn42+0x29a>
800062ee:	ee f8 ff 44 	ld.w	r8,r7[-188]
800062f2:	70 19       	ld.w	r9,r8[0x4]
800062f4:	ee f8 ff 48 	ld.w	r8,r7[-184]
800062f8:	12 38       	cp.w	r8,r9
800062fa:	e0 88 00 09 	brls	8000630c <config_rn42+0x2a8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800062fe:	ee f9 ff 44 	ld.w	r9,r7[-188]
80006302:	30 18       	mov	r8,1
80006304:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006308:	30 18       	mov	r8,1
8000630a:	c0 28       	rjmp	8000630e <config_rn42+0x2aa>
    }
    return false;
8000630c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000630e:	58 08       	cp.w	r8,0
80006310:	ca b0       	breq	80006266 <config_rn42+0x202>
	
	/* Configure RN-42 */
	/* Enter command mode */
	usart_write_line(usart, "$$$");
80006312:	fe fb 07 9e 	ld.w	r11,pc[1950]
80006316:	ee fc fe b4 	ld.w	r12,r7[-332]
8000631a:	f0 1f 01 e7 	mcall	80006ab4 <config_rn42+0xa50>
8000631e:	ee f8 fe b4 	ld.w	r8,r7[-332]
80006322:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80006326:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000632a:	70 58       	ld.w	r8,r8[0x14]
8000632c:	e2 18 00 02 	andl	r8,0x2,COH
80006330:	5f 18       	srne	r8
	while(!usart_tx_ready(usart));
80006332:	58 08       	cp.w	r8,0
80006334:	cf 50       	breq	8000631e <config_rn42+0x2ba>
	delay_ms(15);
80006336:	f0 1f 01 dc 	mcall	80006aa4 <config_rn42+0xa40>
8000633a:	18 99       	mov	r9,r12
8000633c:	30 f8       	mov	r8,15
8000633e:	ef 48 ff 54 	st.w	r7[-172],r8
80006342:	ef 49 ff 50 	st.w	r7[-176],r9
80006346:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000634a:	ef 48 ff 5c 	st.w	r7[-164],r8
8000634e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80006352:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006356:	ee fb ff 5c 	ld.w	r11,r7[-164]
8000635a:	ef 4b fe 70 	st.w	r7[-400],r11
8000635e:	30 0a       	mov	r10,0
80006360:	ef 4a fe 6c 	st.w	r7[-404],r10
80006364:	ee f9 ff 58 	ld.w	r9,r7[-168]
80006368:	ef 49 fe 68 	st.w	r7[-408],r9
8000636c:	30 08       	mov	r8,0
8000636e:	ef 48 fe 64 	st.w	r7[-412],r8
80006372:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80006376:	ee fc fe 68 	ld.w	r12,r7[-408]
8000637a:	b9 39       	mul	r9,r12
8000637c:	ee f8 fe 64 	ld.w	r8,r7[-412]
80006380:	ee fb fe 70 	ld.w	r11,r7[-400]
80006384:	b7 38       	mul	r8,r11
80006386:	10 09       	add	r9,r8
80006388:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000638c:	ee fc fe 68 	ld.w	r12,r7[-408]
80006390:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80006394:	16 09       	add	r9,r11
80006396:	12 9b       	mov	r11,r9
80006398:	e0 68 03 e7 	mov	r8,999
8000639c:	30 09       	mov	r9,0
8000639e:	10 0a       	add	r10,r8
800063a0:	f6 09 00 4b 	adc	r11,r11,r9
800063a4:	e0 68 03 e8 	mov	r8,1000
800063a8:	30 09       	mov	r9,0
800063aa:	f0 1f 01 c0 	mcall	80006aa8 <config_rn42+0xa44>
800063ae:	14 98       	mov	r8,r10
800063b0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800063b2:	ef 48 ff 64 	st.w	r7[-156],r8
800063b6:	ee c8 01 30 	sub	r8,r7,304
800063ba:	ef 48 ff 60 	st.w	r7[-160],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800063be:	e1 b8 00 42 	mfsr	r8,0x108
800063c2:	10 99       	mov	r9,r8
800063c4:	ee f8 ff 60 	ld.w	r8,r7[-160]
800063c8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800063ca:	ee f8 ff 60 	ld.w	r8,r7[-160]
800063ce:	70 09       	ld.w	r9,r8[0x0]
800063d0:	ee f8 ff 64 	ld.w	r8,r7[-156]
800063d4:	10 09       	add	r9,r8
800063d6:	ee f8 ff 60 	ld.w	r8,r7[-160]
800063da:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800063dc:	ee f9 ff 60 	ld.w	r9,r7[-160]
800063e0:	30 08       	mov	r8,0
800063e2:	f3 68 00 08 	st.b	r9[8],r8
800063e6:	ee c8 01 30 	sub	r8,r7,304
800063ea:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800063ee:	e1 b8 00 42 	mfsr	r8,0x108
800063f2:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800063f6:	ee f8 ff 68 	ld.w	r8,r7[-152]
800063fa:	f1 39 00 08 	ld.ub	r9,r8[8]
800063fe:	30 28       	mov	r8,2
80006400:	f0 09 18 00 	cp.b	r9,r8
80006404:	c0 31       	brne	8000640a <config_rn42+0x3a6>
    return false;
80006406:	30 08       	mov	r8,0
80006408:	c4 38       	rjmp	8000648e <config_rn42+0x42a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000640a:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000640e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006412:	30 18       	mov	r8,1
80006414:	f0 09 18 00 	cp.b	r9,r8
80006418:	c0 31       	brne	8000641e <config_rn42+0x3ba>
    return true;
8000641a:	30 18       	mov	r8,1
8000641c:	c3 98       	rjmp	8000648e <config_rn42+0x42a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000641e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006422:	70 09       	ld.w	r9,r8[0x0]
80006424:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006428:	70 18       	ld.w	r8,r8[0x4]
8000642a:	10 39       	cp.w	r9,r8
8000642c:	e0 88 00 1a 	brls	80006460 <config_rn42+0x3fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006430:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006434:	70 09       	ld.w	r9,r8[0x0]
80006436:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000643a:	12 38       	cp.w	r8,r9
8000643c:	c1 02       	brcc	8000645c <config_rn42+0x3f8>
8000643e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006442:	70 19       	ld.w	r9,r8[0x4]
80006444:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80006448:	12 38       	cp.w	r8,r9
8000644a:	e0 88 00 09 	brls	8000645c <config_rn42+0x3f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000644e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80006452:	30 18       	mov	r8,1
80006454:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006458:	30 18       	mov	r8,1
8000645a:	c1 a8       	rjmp	8000648e <config_rn42+0x42a>
    }
    return false;
8000645c:	30 08       	mov	r8,0
8000645e:	c1 88       	rjmp	8000648e <config_rn42+0x42a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006460:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006464:	70 09       	ld.w	r9,r8[0x0]
80006466:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000646a:	12 38       	cp.w	r8,r9
8000646c:	c0 93       	brcs	8000647e <config_rn42+0x41a>
8000646e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80006472:	70 19       	ld.w	r9,r8[0x4]
80006474:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80006478:	12 38       	cp.w	r8,r9
8000647a:	e0 88 00 09 	brls	8000648c <config_rn42+0x428>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000647e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80006482:	30 18       	mov	r8,1
80006484:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006488:	30 18       	mov	r8,1
8000648a:	c0 28       	rjmp	8000648e <config_rn42+0x42a>
    }
    return false;
8000648c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000648e:	58 08       	cp.w	r8,0
80006490:	ca b0       	breq	800063e6 <config_rn42+0x382>
	/* Reduce window for accepting device discovery requests (inquiry) to 80 ms. Default
	 * window is 160 ms (0x0100).
	 * The 16-bit hex value is multiplied by 0.625 ms to determine the interval. The minimum is
	 * 0x0012 (11.25 ms).
	 */
	usart_write_line(usart, "SI,0080\r\n");
80006492:	fe fb 06 26 	ld.w	r11,pc[1574]
80006496:	ee fc fe b4 	ld.w	r12,r7[-332]
8000649a:	f0 1f 01 87 	mcall	80006ab4 <config_rn42+0xa50>
8000649e:	ee f8 fe b4 	ld.w	r8,r7[-332]
800064a2:	ef 48 ff 70 	st.w	r7[-144],r8
800064a6:	ee f8 ff 70 	ld.w	r8,r7[-144]
800064aa:	70 58       	ld.w	r8,r8[0x14]
800064ac:	e2 18 00 02 	andl	r8,0x2,COH
800064b0:	5f 18       	srne	r8
	while(!usart_tx_ready(usart));
800064b2:	58 08       	cp.w	r8,0
800064b4:	cf 50       	breq	8000649e <config_rn42+0x43a>
	delay_ms(50);
800064b6:	f0 1f 01 7c 	mcall	80006aa4 <config_rn42+0xa40>
800064ba:	18 99       	mov	r9,r12
800064bc:	33 28       	mov	r8,50
800064be:	ef 48 ff 78 	st.w	r7[-136],r8
800064c2:	ef 49 ff 74 	st.w	r7[-140],r9
800064c6:	ee f8 ff 78 	ld.w	r8,r7[-136]
800064ca:	ef 48 ff 80 	st.w	r7[-128],r8
800064ce:	ee f8 ff 74 	ld.w	r8,r7[-140]
800064d2:	ef 48 ff 7c 	st.w	r7[-132],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800064d6:	ee fb ff 80 	ld.w	r11,r7[-128]
800064da:	ef 4b fe 80 	st.w	r7[-384],r11
800064de:	30 0a       	mov	r10,0
800064e0:	ef 4a fe 7c 	st.w	r7[-388],r10
800064e4:	ee f9 ff 7c 	ld.w	r9,r7[-132]
800064e8:	ef 49 fe 78 	st.w	r7[-392],r9
800064ec:	30 08       	mov	r8,0
800064ee:	ef 48 fe 74 	st.w	r7[-396],r8
800064f2:	ee f9 fe 7c 	ld.w	r9,r7[-388]
800064f6:	ee fc fe 78 	ld.w	r12,r7[-392]
800064fa:	b9 39       	mul	r9,r12
800064fc:	ee f8 fe 74 	ld.w	r8,r7[-396]
80006500:	ee fb fe 80 	ld.w	r11,r7[-384]
80006504:	b7 38       	mul	r8,r11
80006506:	10 09       	add	r9,r8
80006508:	ee f8 fe 80 	ld.w	r8,r7[-384]
8000650c:	ee fc fe 78 	ld.w	r12,r7[-392]
80006510:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80006514:	16 09       	add	r9,r11
80006516:	12 9b       	mov	r11,r9
80006518:	e0 68 03 e7 	mov	r8,999
8000651c:	30 09       	mov	r9,0
8000651e:	10 0a       	add	r10,r8
80006520:	f6 09 00 4b 	adc	r11,r11,r9
80006524:	e0 68 03 e8 	mov	r8,1000
80006528:	30 09       	mov	r9,0
8000652a:	f0 1f 01 60 	mcall	80006aa8 <config_rn42+0xa44>
8000652e:	14 98       	mov	r8,r10
80006530:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006532:	ef 48 ff 88 	st.w	r7[-120],r8
80006536:	ee c8 01 24 	sub	r8,r7,292
8000653a:	ef 48 ff 84 	st.w	r7[-124],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000653e:	e1 b8 00 42 	mfsr	r8,0x108
80006542:	10 99       	mov	r9,r8
80006544:	ee f8 ff 84 	ld.w	r8,r7[-124]
80006548:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000654a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000654e:	70 09       	ld.w	r9,r8[0x0]
80006550:	ee f8 ff 88 	ld.w	r8,r7[-120]
80006554:	10 09       	add	r9,r8
80006556:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000655a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000655c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80006560:	30 08       	mov	r8,0
80006562:	f3 68 00 08 	st.b	r9[8],r8
80006566:	ee c8 01 24 	sub	r8,r7,292
8000656a:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000656e:	e1 b8 00 42 	mfsr	r8,0x108
80006572:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006576:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000657a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000657e:	30 28       	mov	r8,2
80006580:	f0 09 18 00 	cp.b	r9,r8
80006584:	c0 31       	brne	8000658a <config_rn42+0x526>
    return false;
80006586:	30 08       	mov	r8,0
80006588:	c4 38       	rjmp	8000660e <config_rn42+0x5aa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000658a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000658e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006592:	30 18       	mov	r8,1
80006594:	f0 09 18 00 	cp.b	r9,r8
80006598:	c0 31       	brne	8000659e <config_rn42+0x53a>
    return true;
8000659a:	30 18       	mov	r8,1
8000659c:	c3 98       	rjmp	8000660e <config_rn42+0x5aa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000659e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065a2:	70 09       	ld.w	r9,r8[0x0]
800065a4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065a8:	70 18       	ld.w	r8,r8[0x4]
800065aa:	10 39       	cp.w	r9,r8
800065ac:	e0 88 00 1a 	brls	800065e0 <config_rn42+0x57c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800065b0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065b4:	70 08       	ld.w	r8,r8[0x0]
800065b6:	ee f9 ff 90 	ld.w	r9,r7[-112]
800065ba:	10 39       	cp.w	r9,r8
800065bc:	c1 02       	brcc	800065dc <config_rn42+0x578>
800065be:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065c2:	70 18       	ld.w	r8,r8[0x4]
800065c4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800065c8:	10 39       	cp.w	r9,r8
800065ca:	e0 88 00 09 	brls	800065dc <config_rn42+0x578>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800065ce:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800065d2:	30 18       	mov	r8,1
800065d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800065d8:	30 18       	mov	r8,1
800065da:	c1 a8       	rjmp	8000660e <config_rn42+0x5aa>
    }
    return false;
800065dc:	30 08       	mov	r8,0
800065de:	c1 88       	rjmp	8000660e <config_rn42+0x5aa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800065e0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065e4:	70 08       	ld.w	r8,r8[0x0]
800065e6:	ee f9 ff 90 	ld.w	r9,r7[-112]
800065ea:	10 39       	cp.w	r9,r8
800065ec:	c0 93       	brcs	800065fe <config_rn42+0x59a>
800065ee:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800065f2:	70 18       	ld.w	r8,r8[0x4]
800065f4:	ee f9 ff 90 	ld.w	r9,r7[-112]
800065f8:	10 39       	cp.w	r9,r8
800065fa:	e0 88 00 09 	brls	8000660c <config_rn42+0x5a8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800065fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80006602:	30 18       	mov	r8,1
80006604:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006608:	30 18       	mov	r8,1
8000660a:	c0 28       	rjmp	8000660e <config_rn42+0x5aa>
    }
    return false;
8000660c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000660e:	58 08       	cp.w	r8,0
80006610:	ca b0       	breq	80006566 <config_rn42+0x502>
	 * is buffered by the RN-42, so it shouldn't be lost (depending on buffer size). This saves
	 * a good amount of power.
	 * The 16-bit hex value is multiplied by 0.625 ms to determine the interval. Maximum is
	 * 0x7FFF, or about 20 s.
	 */
	usart_write_line(usart, "SW,0028\r\n");
80006612:	fe fb 04 aa 	ld.w	r11,pc[1194]
80006616:	ee fc fe b4 	ld.w	r12,r7[-332]
8000661a:	f0 1f 01 27 	mcall	80006ab4 <config_rn42+0xa50>
8000661e:	ee f8 fe b4 	ld.w	r8,r7[-332]
80006622:	ef 48 ff 94 	st.w	r7[-108],r8
80006626:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000662a:	70 58       	ld.w	r8,r8[0x14]
8000662c:	e2 18 00 02 	andl	r8,0x2,COH
80006630:	5f 18       	srne	r8
	while(!usart_tx_ready(usart));
80006632:	58 08       	cp.w	r8,0
80006634:	cf 50       	breq	8000661e <config_rn42+0x5ba>
	delay_ms(50);
80006636:	f0 1f 01 1c 	mcall	80006aa4 <config_rn42+0xa40>
8000663a:	18 98       	mov	r8,r12
8000663c:	33 29       	mov	r9,50
8000663e:	ef 49 ff 9c 	st.w	r7[-100],r9
80006642:	ef 48 ff 98 	st.w	r7[-104],r8
80006646:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000664a:	ef 48 ff a4 	st.w	r7[-92],r8
8000664e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80006652:	ef 48 ff a0 	st.w	r7[-96],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006656:	ee fb ff a4 	ld.w	r11,r7[-92]
8000665a:	ef 4b fe 90 	st.w	r7[-368],r11
8000665e:	30 0a       	mov	r10,0
80006660:	ef 4a fe 8c 	st.w	r7[-372],r10
80006664:	ee f9 ff a0 	ld.w	r9,r7[-96]
80006668:	ef 49 fe 88 	st.w	r7[-376],r9
8000666c:	30 08       	mov	r8,0
8000666e:	ef 48 fe 84 	st.w	r7[-380],r8
80006672:	ee fa fe 8c 	ld.w	r10,r7[-372]
80006676:	ee fc fe 88 	ld.w	r12,r7[-376]
8000667a:	b9 3a       	mul	r10,r12
8000667c:	ee f8 fe 84 	ld.w	r8,r7[-380]
80006680:	ee fb fe 90 	ld.w	r11,r7[-368]
80006684:	b7 38       	mul	r8,r11
80006686:	10 0a       	add	r10,r8
80006688:	ee fc fe 90 	ld.w	r12,r7[-368]
8000668c:	ee fb fe 88 	ld.w	r11,r7[-376]
80006690:	f8 0b 06 48 	mulu.d	r8,r12,r11
80006694:	12 0a       	add	r10,r9
80006696:	14 99       	mov	r9,r10
80006698:	e0 6a 03 e7 	mov	r10,999
8000669c:	30 0b       	mov	r11,0
8000669e:	f0 0a 00 0a 	add	r10,r8,r10
800066a2:	f2 0b 00 4b 	adc	r11,r9,r11
800066a6:	e0 68 03 e8 	mov	r8,1000
800066aa:	30 09       	mov	r9,0
800066ac:	f0 1f 00 ff 	mcall	80006aa8 <config_rn42+0xa44>
800066b0:	14 98       	mov	r8,r10
800066b2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800066b4:	ef 48 ff ac 	st.w	r7[-84],r8
800066b8:	ee c8 01 18 	sub	r8,r7,280
800066bc:	ef 48 ff a8 	st.w	r7[-88],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800066c0:	e1 b8 00 42 	mfsr	r8,0x108
800066c4:	10 99       	mov	r9,r8
800066c6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800066ca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800066cc:	ee f8 ff a8 	ld.w	r8,r7[-88]
800066d0:	70 09       	ld.w	r9,r8[0x0]
800066d2:	ee f8 ff ac 	ld.w	r8,r7[-84]
800066d6:	10 09       	add	r9,r8
800066d8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800066dc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800066de:	ee f9 ff a8 	ld.w	r9,r7[-88]
800066e2:	30 08       	mov	r8,0
800066e4:	f3 68 00 08 	st.b	r9[8],r8
800066e8:	ee c8 01 18 	sub	r8,r7,280
800066ec:	ef 48 ff b0 	st.w	r7[-80],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800066f0:	e1 b8 00 42 	mfsr	r8,0x108
800066f4:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800066f8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800066fc:	f1 39 00 08 	ld.ub	r9,r8[8]
80006700:	30 28       	mov	r8,2
80006702:	f0 09 18 00 	cp.b	r9,r8
80006706:	c0 31       	brne	8000670c <config_rn42+0x6a8>
    return false;
80006708:	30 08       	mov	r8,0
8000670a:	c4 38       	rjmp	80006790 <config_rn42+0x72c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000670c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006710:	f1 39 00 08 	ld.ub	r9,r8[8]
80006714:	30 18       	mov	r8,1
80006716:	f0 09 18 00 	cp.b	r9,r8
8000671a:	c0 31       	brne	80006720 <config_rn42+0x6bc>
    return true;
8000671c:	30 18       	mov	r8,1
8000671e:	c3 98       	rjmp	80006790 <config_rn42+0x72c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006720:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006724:	70 09       	ld.w	r9,r8[0x0]
80006726:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000672a:	70 18       	ld.w	r8,r8[0x4]
8000672c:	10 39       	cp.w	r9,r8
8000672e:	e0 88 00 1a 	brls	80006762 <config_rn42+0x6fe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006732:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006736:	70 08       	ld.w	r8,r8[0x0]
80006738:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000673c:	10 39       	cp.w	r9,r8
8000673e:	c1 02       	brcc	8000675e <config_rn42+0x6fa>
80006740:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006744:	70 18       	ld.w	r8,r8[0x4]
80006746:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000674a:	10 39       	cp.w	r9,r8
8000674c:	e0 88 00 09 	brls	8000675e <config_rn42+0x6fa>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006750:	ee f9 ff b0 	ld.w	r9,r7[-80]
80006754:	30 18       	mov	r8,1
80006756:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000675a:	30 18       	mov	r8,1
8000675c:	c1 a8       	rjmp	80006790 <config_rn42+0x72c>
    }
    return false;
8000675e:	30 08       	mov	r8,0
80006760:	c1 88       	rjmp	80006790 <config_rn42+0x72c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006762:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006766:	70 08       	ld.w	r8,r8[0x0]
80006768:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000676c:	10 39       	cp.w	r9,r8
8000676e:	c0 93       	brcs	80006780 <config_rn42+0x71c>
80006770:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006774:	70 18       	ld.w	r8,r8[0x4]
80006776:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000677a:	10 39       	cp.w	r9,r8
8000677c:	e0 88 00 09 	brls	8000678e <config_rn42+0x72a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006780:	ee f9 ff b0 	ld.w	r9,r7[-80]
80006784:	30 18       	mov	r8,1
80006786:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000678a:	30 18       	mov	r8,1
8000678c:	c0 28       	rjmp	80006790 <config_rn42+0x72c>
    }
    return false;
8000678e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006790:	58 08       	cp.w	r8,0
80006792:	ca b0       	breq	800066e8 <config_rn42+0x684>
	 * NOTE: the S% command is stored on the flash, and GPIOs retain these settings on
	 * power cycle or reset. To make the change temporary, use S@ with the same argument.
	 * This change will be lost on a reboot, so it will need to be moved to after the next
	 * next command.
	 */
	usart_write_line(usart, "S%,2424\r\n");
80006794:	fe fb 03 2c 	ld.w	r11,pc[812]
80006798:	ee fc fe b4 	ld.w	r12,r7[-332]
8000679c:	f0 1f 00 c6 	mcall	80006ab4 <config_rn42+0xa50>
800067a0:	ee f8 fe b4 	ld.w	r8,r7[-332]
800067a4:	ef 48 ff b8 	st.w	r7[-72],r8
800067a8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800067ac:	70 58       	ld.w	r8,r8[0x14]
800067ae:	e2 18 00 02 	andl	r8,0x2,COH
800067b2:	5f 18       	srne	r8
	while(!usart_tx_ready(usart));
800067b4:	58 08       	cp.w	r8,0
800067b6:	cf 50       	breq	800067a0 <config_rn42+0x73c>
	delay_ms(50);
800067b8:	f0 1f 00 bb 	mcall	80006aa4 <config_rn42+0xa40>
800067bc:	18 98       	mov	r8,r12
800067be:	33 29       	mov	r9,50
800067c0:	ef 49 ff c0 	st.w	r7[-64],r9
800067c4:	ef 48 ff bc 	st.w	r7[-68],r8
800067c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800067cc:	ef 48 ff c8 	st.w	r7[-56],r8
800067d0:	ee f8 ff bc 	ld.w	r8,r7[-68]
800067d4:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800067d8:	ee fa ff c8 	ld.w	r10,r7[-56]
800067dc:	ef 4a fe a0 	st.w	r7[-352],r10
800067e0:	30 09       	mov	r9,0
800067e2:	ef 49 fe 9c 	st.w	r7[-356],r9
800067e6:	ee f8 ff c4 	ld.w	r8,r7[-60]
800067ea:	ef 48 fe 98 	st.w	r7[-360],r8
800067ee:	30 0c       	mov	r12,0
800067f0:	ef 4c fe 94 	st.w	r7[-364],r12
800067f4:	ee fa fe 9c 	ld.w	r10,r7[-356]
800067f8:	ee fb fe 98 	ld.w	r11,r7[-360]
800067fc:	b7 3a       	mul	r10,r11
800067fe:	ee f8 fe 94 	ld.w	r8,r7[-364]
80006802:	ee f9 fe a0 	ld.w	r9,r7[-352]
80006806:	b3 38       	mul	r8,r9
80006808:	10 0a       	add	r10,r8
8000680a:	ee fc fe a0 	ld.w	r12,r7[-352]
8000680e:	ee fb fe 98 	ld.w	r11,r7[-360]
80006812:	f8 0b 06 48 	mulu.d	r8,r12,r11
80006816:	12 0a       	add	r10,r9
80006818:	14 99       	mov	r9,r10
8000681a:	e0 6a 03 e7 	mov	r10,999
8000681e:	30 0b       	mov	r11,0
80006820:	f0 0a 00 0a 	add	r10,r8,r10
80006824:	f2 0b 00 4b 	adc	r11,r9,r11
80006828:	e0 68 03 e8 	mov	r8,1000
8000682c:	30 09       	mov	r9,0
8000682e:	f0 1f 00 9f 	mcall	80006aa8 <config_rn42+0xa44>
80006832:	14 98       	mov	r8,r10
80006834:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006836:	ef 48 ff d0 	st.w	r7[-48],r8
8000683a:	ee c8 01 0c 	sub	r8,r7,268
8000683e:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006842:	e1 b8 00 42 	mfsr	r8,0x108
80006846:	10 99       	mov	r9,r8
80006848:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000684c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000684e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006852:	70 09       	ld.w	r9,r8[0x0]
80006854:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006858:	10 09       	add	r9,r8
8000685a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000685e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006860:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006864:	30 08       	mov	r8,0
80006866:	f3 68 00 08 	st.b	r9[8],r8
8000686a:	ee c8 01 0c 	sub	r8,r7,268
8000686e:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006872:	e1 b8 00 42 	mfsr	r8,0x108
80006876:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000687a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000687e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006882:	30 28       	mov	r8,2
80006884:	f0 09 18 00 	cp.b	r9,r8
80006888:	c0 31       	brne	8000688e <config_rn42+0x82a>
    return false;
8000688a:	30 08       	mov	r8,0
8000688c:	c4 38       	rjmp	80006912 <config_rn42+0x8ae>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000688e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006892:	f1 39 00 08 	ld.ub	r9,r8[8]
80006896:	30 18       	mov	r8,1
80006898:	f0 09 18 00 	cp.b	r9,r8
8000689c:	c0 31       	brne	800068a2 <config_rn42+0x83e>
    return true;
8000689e:	30 18       	mov	r8,1
800068a0:	c3 98       	rjmp	80006912 <config_rn42+0x8ae>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800068a2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068a6:	70 09       	ld.w	r9,r8[0x0]
800068a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068ac:	70 18       	ld.w	r8,r8[0x4]
800068ae:	10 39       	cp.w	r9,r8
800068b0:	e0 88 00 1a 	brls	800068e4 <config_rn42+0x880>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800068b4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068b8:	70 08       	ld.w	r8,r8[0x0]
800068ba:	ee f9 ff d8 	ld.w	r9,r7[-40]
800068be:	10 39       	cp.w	r9,r8
800068c0:	c1 02       	brcc	800068e0 <config_rn42+0x87c>
800068c2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068c6:	70 18       	ld.w	r8,r8[0x4]
800068c8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800068cc:	10 39       	cp.w	r9,r8
800068ce:	e0 88 00 09 	brls	800068e0 <config_rn42+0x87c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800068d2:	ee f9 ff d4 	ld.w	r9,r7[-44]
800068d6:	30 18       	mov	r8,1
800068d8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800068dc:	30 18       	mov	r8,1
800068de:	c1 a8       	rjmp	80006912 <config_rn42+0x8ae>
    }
    return false;
800068e0:	30 08       	mov	r8,0
800068e2:	c1 88       	rjmp	80006912 <config_rn42+0x8ae>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800068e4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068e8:	70 08       	ld.w	r8,r8[0x0]
800068ea:	ee f9 ff d8 	ld.w	r9,r7[-40]
800068ee:	10 39       	cp.w	r9,r8
800068f0:	c0 93       	brcs	80006902 <config_rn42+0x89e>
800068f2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800068f6:	70 18       	ld.w	r8,r8[0x4]
800068f8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800068fc:	10 39       	cp.w	r9,r8
800068fe:	e0 88 00 09 	brls	80006910 <config_rn42+0x8ac>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006902:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006906:	30 18       	mov	r8,1
80006908:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000690c:	30 18       	mov	r8,1
8000690e:	c0 28       	rjmp	80006912 <config_rn42+0x8ae>
    }
    return false;
80006910:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006912:	58 08       	cp.w	r8,0
80006914:	ca b0       	breq	8000686a <config_rn42+0x806>

 	/* Reboot RN-42 */
	usart_write_line(usart, "R,1\r\n");
80006916:	4e cb       	lddpc	r11,80006ac4 <config_rn42+0xa60>
80006918:	ee fc fe b4 	ld.w	r12,r7[-332]
8000691c:	f0 1f 00 66 	mcall	80006ab4 <config_rn42+0xa50>
80006920:	ee f8 fe b4 	ld.w	r8,r7[-332]
80006924:	ef 48 ff dc 	st.w	r7[-36],r8
80006928:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000692c:	70 58       	ld.w	r8,r8[0x14]
8000692e:	e2 18 00 02 	andl	r8,0x2,COH
80006932:	5f 18       	srne	r8
	while(!usart_tx_ready(usart));
80006934:	58 08       	cp.w	r8,0
80006936:	cf 50       	breq	80006920 <config_rn42+0x8bc>
	delay_ms(15);
80006938:	f0 1f 00 5b 	mcall	80006aa4 <config_rn42+0xa40>
8000693c:	18 98       	mov	r8,r12
8000693e:	30 f9       	mov	r9,15
80006940:	ef 49 ff e4 	st.w	r7[-28],r9
80006944:	ef 48 ff e0 	st.w	r7[-32],r8
80006948:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000694c:	ef 48 ff ec 	st.w	r7[-20],r8
80006950:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006954:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006958:	ee fa ff ec 	ld.w	r10,r7[-20]
8000695c:	ef 4a fe b0 	st.w	r7[-336],r10
80006960:	30 09       	mov	r9,0
80006962:	ef 49 fe ac 	st.w	r7[-340],r9
80006966:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000696a:	ef 48 fe a8 	st.w	r7[-344],r8
8000696e:	30 0c       	mov	r12,0
80006970:	ef 4c fe a4 	st.w	r7[-348],r12
80006974:	ee fa fe ac 	ld.w	r10,r7[-340]
80006978:	ee fb fe a8 	ld.w	r11,r7[-344]
8000697c:	b7 3a       	mul	r10,r11
8000697e:	ee f8 fe a4 	ld.w	r8,r7[-348]
80006982:	ee f9 fe b0 	ld.w	r9,r7[-336]
80006986:	b3 38       	mul	r8,r9
80006988:	10 0a       	add	r10,r8
8000698a:	ee fc fe b0 	ld.w	r12,r7[-336]
8000698e:	ee fb fe a8 	ld.w	r11,r7[-344]
80006992:	f8 0b 06 48 	mulu.d	r8,r12,r11
80006996:	12 0a       	add	r10,r9
80006998:	14 99       	mov	r9,r10
8000699a:	e0 6a 03 e7 	mov	r10,999
8000699e:	30 0b       	mov	r11,0
800069a0:	f0 0a 00 0a 	add	r10,r8,r10
800069a4:	f2 0b 00 4b 	adc	r11,r9,r11
800069a8:	e0 68 03 e8 	mov	r8,1000
800069ac:	30 09       	mov	r9,0
800069ae:	f0 1f 00 3f 	mcall	80006aa8 <config_rn42+0xa44>
800069b2:	14 98       	mov	r8,r10
800069b4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800069b6:	ef 48 ff f4 	st.w	r7[-12],r8
800069ba:	ee c8 01 00 	sub	r8,r7,256
800069be:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800069c2:	e1 b8 00 42 	mfsr	r8,0x108
800069c6:	10 99       	mov	r9,r8
800069c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800069cc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800069ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800069d2:	70 09       	ld.w	r9,r8[0x0]
800069d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800069d8:	10 09       	add	r9,r8
800069da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800069de:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800069e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800069e4:	30 08       	mov	r8,0
800069e6:	f3 68 00 08 	st.b	r9[8],r8
800069ea:	ee c8 01 00 	sub	r8,r7,256
800069ee:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800069f2:	e1 b8 00 42 	mfsr	r8,0x108
800069f6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800069fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80006a02:	30 28       	mov	r8,2
80006a04:	f0 09 18 00 	cp.b	r9,r8
80006a08:	c0 31       	brne	80006a0e <config_rn42+0x9aa>
    return false;
80006a0a:	30 08       	mov	r8,0
80006a0c:	c4 38       	rjmp	80006a92 <config_rn42+0xa2e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006a0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a12:	f1 39 00 08 	ld.ub	r9,r8[8]
80006a16:	30 18       	mov	r8,1
80006a18:	f0 09 18 00 	cp.b	r9,r8
80006a1c:	c0 31       	brne	80006a22 <config_rn42+0x9be>
    return true;
80006a1e:	30 18       	mov	r8,1
80006a20:	c3 98       	rjmp	80006a92 <config_rn42+0xa2e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a26:	70 09       	ld.w	r9,r8[0x0]
80006a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a2c:	70 18       	ld.w	r8,r8[0x4]
80006a2e:	10 39       	cp.w	r9,r8
80006a30:	e0 88 00 1a 	brls	80006a64 <config_rn42+0xa00>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a38:	70 08       	ld.w	r8,r8[0x0]
80006a3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006a3e:	10 39       	cp.w	r9,r8
80006a40:	c1 02       	brcc	80006a60 <config_rn42+0x9fc>
80006a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a46:	70 18       	ld.w	r8,r8[0x4]
80006a48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006a4c:	10 39       	cp.w	r9,r8
80006a4e:	e0 88 00 09 	brls	80006a60 <config_rn42+0x9fc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006a52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006a56:	30 18       	mov	r8,1
80006a58:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006a5c:	30 18       	mov	r8,1
80006a5e:	c1 a8       	rjmp	80006a92 <config_rn42+0xa2e>
    }
    return false;
80006a60:	30 08       	mov	r8,0
80006a62:	c1 88       	rjmp	80006a92 <config_rn42+0xa2e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a68:	70 08       	ld.w	r8,r8[0x0]
80006a6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006a6e:	10 39       	cp.w	r9,r8
80006a70:	c0 93       	brcs	80006a82 <config_rn42+0xa1e>
80006a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a76:	70 18       	ld.w	r8,r8[0x4]
80006a78:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006a7c:	10 39       	cp.w	r9,r8
80006a7e:	e0 88 00 09 	brls	80006a90 <config_rn42+0xa2c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006a82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006a86:	30 18       	mov	r8,1
80006a88:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006a8c:	30 18       	mov	r8,1
80006a8e:	c0 28       	rjmp	80006a92 <config_rn42+0xa2e>
    }
    return false;
80006a90:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006a92:	58 08       	cp.w	r8,0
80006a94:	ca b0       	breq	800069ea <config_rn42+0x986>
			
	return STATUS_OK;
80006a96:	30 08       	mov	r8,0
}
80006a98:	10 9c       	mov	r12,r8
80006a9a:	29 5d       	sub	sp,-428
80006a9c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006aa0:	80 00       	ld.sh	r0,r0[0x0]
80006aa2:	36 10       	mov	r0,97
80006aa4:	80 00       	ld.sh	r0,r0[0x0]
80006aa6:	56 b0       	stdsp	sp[0x1ac],r0
80006aa8:	80 00       	ld.sh	r0,r0[0x0]
80006aaa:	71 50       	ld.w	r0,r8[0x54]
80006aac:	80 00       	ld.sh	r0,r0[0x0]
80006aae:	35 a8       	mov	r8,90
80006ab0:	80 00       	ld.sh	r0,r0[0x0]
80006ab2:	55 c0       	stdsp	sp[0x170],r0
80006ab4:	80 00       	ld.sh	r0,r0[0x0]
80006ab6:	4a 84       	lddpc	r4,80006b54 <main+0x4c>
80006ab8:	80 00       	ld.sh	r0,r0[0x0]
80006aba:	55 c4       	stdsp	sp[0x170],r4
80006abc:	80 00       	ld.sh	r0,r0[0x0]
80006abe:	55 d0       	stdsp	sp[0x174],r0
80006ac0:	80 00       	ld.sh	r0,r0[0x0]
80006ac2:	55 dc       	stdsp	sp[0x174],r12
80006ac4:	80 00       	ld.sh	r0,r0[0x0]
80006ac6:	55 e8       	stdsp	sp[0x178],r8

80006ac8 <ads1299_check_device_id>:

status_code_t ads1299_check_device_id(uint8_t chipselect)
{
80006ac8:	eb cd 40 80 	pushm	r7,lr
80006acc:	1a 97       	mov	r7,sp
80006ace:	20 2d       	sub	sp,8
80006ad0:	18 98       	mov	r8,r12
80006ad2:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t id;
		
	ads1299_rreg(chipselect, ADS1299_REGADDR_ID, &id);
80006ad6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006ada:	ee c9 00 01 	sub	r9,r7,1
80006ade:	12 9a       	mov	r10,r9
80006ae0:	30 0b       	mov	r11,0
80006ae2:	10 9c       	mov	r12,r8
80006ae4:	f0 1f 00 08 	mcall	80006b04 <ads1299_check_device_id+0x3c>
	/* ADS1299 should return ID of 0bXXXX1110 */
	if ( (id & 0xF) != ADS1299_DEVICE_ID ) {
80006ae8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006aec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006af0:	58 e8       	cp.w	r8,14
80006af2:	c0 30       	breq	80006af8 <ads1299_check_device_id+0x30>
		return ERR_IO_ERROR;
80006af4:	3f f8       	mov	r8,-1
80006af6:	c0 28       	rjmp	80006afa <ads1299_check_device_id+0x32>
	}
	else {
		return STATUS_OK;
80006af8:	30 08       	mov	r8,0
	}
}
80006afa:	10 9c       	mov	r12,r8
80006afc:	2f ed       	sub	sp,-8
80006afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b02:	00 00       	add	r0,r0
80006b04:	80 00       	ld.sh	r0,r0[0x0]
80006b06:	26 d8       	sub	r8,109

80006b08 <main>:

int main(void)
{	
80006b08:	eb cd 40 80 	pushm	r7,lr
80006b0c:	1a 97       	mov	r7,sp
80006b0e:	20 3d       	sub	sp,12
	volatile uint32_t k, n, m;

	usart_tx_buffer_idx = 0;
80006b10:	fe f8 02 98 	ld.w	r8,pc[664]
80006b14:	30 09       	mov	r9,0
80006b16:	91 09       	st.w	r8[0x0],r9
	spi_buf_write_idx = 0;
80006b18:	fe f8 02 94 	ld.w	r8,pc[660]
80006b1c:	30 09       	mov	r9,0
80006b1e:	91 09       	st.w	r8[0x0],r9
	spi_buf_read_idx = 0;
80006b20:	fe f8 02 90 	ld.w	r8,pc[656]
80006b24:	30 09       	mov	r9,0
80006b26:	91 09       	st.w	r8[0x0],r9
	mu_band_avg = 0;
80006b28:	fe f8 02 8c 	ld.w	r8,pc[652]
80006b2c:	30 09       	mov	r9,0
80006b2e:	91 09       	st.w	r8[0x0],r9
	
	frame_complete_flag = 0;
80006b30:	fe f8 02 88 	ld.w	r8,pc[648]
80006b34:	30 09       	mov	r9,0
80006b36:	91 09       	st.w	r8[0x0],r9
	
	/* Initialize in data streaming mode; host computer may change later */
	processing_type = DATA_STREAM;
80006b38:	fe f8 02 84 	ld.w	r8,pc[644]
80006b3c:	30 09       	mov	r9,0
80006b3e:	91 09       	st.w	r8[0x0],r9
	
	/* Set up basic functions: clocks, GPIOs, sleep settings */
	sysclk_init();
80006b40:	f0 1f 00 a0 	mcall	80006dc0 <main+0x2b8>
	sleepmgr_init();
80006b44:	f0 1f 00 a0 	mcall	80006dc4 <main+0x2bc>
	config_gpios();
80006b48:	f0 1f 00 a0 	mcall	80006dc8 <main+0x2c0>
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
80006b4c:	30 08       	mov	r8,0
80006b4e:	ef 48 ff f4 	st.w	r7[-12],r8
80006b52:	c7 d8       	rjmp	80006c4c <main+0x144>
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80006b54:	30 08       	mov	r8,0
80006b56:	ef 48 ff f8 	st.w	r7[-8],r8
80006b5a:	c4 58       	rjmp	80006be4 <main+0xdc>
			data_usart_tx_packet.eegdata[n][m][0] = 0;
80006b5c:	ee fa ff f8 	ld.w	r10,r7[-8]
80006b60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b64:	fe fb 02 68 	ld.w	r11,pc[616]
80006b68:	10 99       	mov	r9,r8
80006b6a:	a1 79       	lsl	r9,0x1
80006b6c:	10 09       	add	r9,r8
80006b6e:	14 98       	mov	r8,r10
80006b70:	a1 78       	lsl	r8,0x1
80006b72:	14 08       	add	r8,r10
80006b74:	a3 78       	lsl	r8,0x3
80006b76:	f2 08 00 08 	add	r8,r9,r8
80006b7a:	f6 08 00 08 	add	r8,r11,r8
80006b7e:	f0 c9 ff fa 	sub	r9,r8,-6
80006b82:	30 08       	mov	r8,0
80006b84:	b2 88       	st.b	r9[0x0],r8
			data_usart_tx_packet.eegdata[n][m][1] = 0;
80006b86:	ee fa ff f8 	ld.w	r10,r7[-8]
80006b8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b8e:	fe fb 02 3e 	ld.w	r11,pc[574]
80006b92:	10 99       	mov	r9,r8
80006b94:	a1 79       	lsl	r9,0x1
80006b96:	10 09       	add	r9,r8
80006b98:	14 98       	mov	r8,r10
80006b9a:	a1 78       	lsl	r8,0x1
80006b9c:	14 08       	add	r8,r10
80006b9e:	a3 78       	lsl	r8,0x3
80006ba0:	f2 08 00 08 	add	r8,r9,r8
80006ba4:	f6 08 00 08 	add	r8,r11,r8
80006ba8:	f0 c9 ff f9 	sub	r9,r8,-7
80006bac:	30 08       	mov	r8,0
80006bae:	b2 88       	st.b	r9[0x0],r8
			data_usart_tx_packet.eegdata[n][m][2] = 0;
80006bb0:	ee fa ff f8 	ld.w	r10,r7[-8]
80006bb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006bb8:	fe fb 02 14 	ld.w	r11,pc[532]
80006bbc:	10 99       	mov	r9,r8
80006bbe:	a1 79       	lsl	r9,0x1
80006bc0:	10 09       	add	r9,r8
80006bc2:	14 98       	mov	r8,r10
80006bc4:	a1 78       	lsl	r8,0x1
80006bc6:	14 08       	add	r8,r10
80006bc8:	a3 78       	lsl	r8,0x3
80006bca:	f2 08 00 08 	add	r8,r9,r8
80006bce:	f6 08 00 08 	add	r8,r11,r8
80006bd2:	f0 c9 ff f8 	sub	r9,r8,-8
80006bd6:	30 08       	mov	r8,0
80006bd8:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_init();
	config_gpios();
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80006bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006bde:	2f f8       	sub	r8,-1
80006be0:	ef 48 ff f8 	st.w	r7[-8],r8
80006be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006be8:	58 78       	cp.w	r8,7
80006bea:	fe 98 ff b9 	brls	80006b5c <main+0x54>
			data_usart_tx_packet.eegdata[n][m][0] = 0;
			data_usart_tx_packet.eegdata[n][m][1] = 0;
			data_usart_tx_packet.eegdata[n][m][2] = 0;
		}
		for (n = 0; n < MAX_IMU_DOF; n++) {
80006bee:	30 08       	mov	r8,0
80006bf0:	ef 48 ff f8 	st.w	r7[-8],r8
80006bf4:	c2 28       	rjmp	80006c38 <main+0x130>
			data_usart_tx_packet.imudata[n][m] = 0;
80006bf6:	ee fa ff f8 	ld.w	r10,r7[-8]
80006bfa:	ee fb ff f4 	ld.w	r11,r7[-12]
80006bfe:	4f 49       	lddpc	r9,80006dcc <main+0x2c4>
80006c00:	14 98       	mov	r8,r10
80006c02:	a1 78       	lsl	r8,0x1
80006c04:	14 08       	add	r8,r10
80006c06:	a1 78       	lsl	r8,0x1
80006c08:	16 08       	add	r8,r11
80006c0a:	f0 ca ff f2 	sub	r10,r8,-14
80006c0e:	f4 08 15 01 	lsl	r8,r10,0x1
80006c12:	f2 08 00 08 	add	r8,r9,r8
80006c16:	11 ab       	ld.ub	r11,r8[0x2]
80006c18:	e2 1b 00 00 	andl	r11,0x0,COH
80006c1c:	b0 ab       	st.b	r8[0x2],r11
80006c1e:	f4 08 15 01 	lsl	r8,r10,0x1
80006c22:	f2 08 00 08 	add	r8,r9,r8
80006c26:	11 b9       	ld.ub	r9,r8[0x3]
80006c28:	e2 19 00 00 	andl	r9,0x0,COH
80006c2c:	b0 b9       	st.b	r8[0x3],r9
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
			data_usart_tx_packet.eegdata[n][m][0] = 0;
			data_usart_tx_packet.eegdata[n][m][1] = 0;
			data_usart_tx_packet.eegdata[n][m][2] = 0;
		}
		for (n = 0; n < MAX_IMU_DOF; n++) {
80006c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c32:	2f f8       	sub	r8,-1
80006c34:	ef 48 ff f8 	st.w	r7[-8],r8
80006c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c3c:	58 58       	cp.w	r8,5
80006c3e:	fe 98 ff dc 	brls	80006bf6 <main+0xee>
	sysclk_init();
	sleepmgr_init();
	config_gpios();
	
	/* Initialize packet data arrays */
	for (m = 0; m < DATA_USART_TX_BUFFER_SIZE; m++) {
80006c42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c46:	2f f8       	sub	r8,-1
80006c48:	ef 48 ff f4 	st.w	r7[-12],r8
80006c4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c50:	58 08       	cp.w	r8,0
80006c52:	c8 10       	breq	80006b54 <main+0x4c>
			data_usart_tx_packet.imudata[n][m] = 0;
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
80006c54:	30 08       	mov	r8,0
80006c56:	ef 48 ff f4 	st.w	r7[-12],r8
80006c5a:	c1 f8       	rjmp	80006c98 <main+0x190>
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80006c5c:	30 08       	mov	r8,0
80006c5e:	ef 48 ff f8 	st.w	r7[-8],r8
80006c62:	c1 18       	rjmp	80006c84 <main+0x17c>
			spi_rx_data_buffer[m][n] = 0;
80006c64:	ee fa ff f4 	ld.w	r10,r7[-12]
80006c68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006c6c:	4d 98       	lddpc	r8,80006dd0 <main+0x2c8>
80006c6e:	a3 7a       	lsl	r10,0x3
80006c70:	f4 09 00 09 	add	r9,r10,r9
80006c74:	30 0a       	mov	r10,0
80006c76:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
		for (n = 0; n < MAX_EEG_CHANNELS; n++) {
80006c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c7e:	2f f8       	sub	r8,-1
80006c80:	ef 48 ff f8 	st.w	r7[-8],r8
80006c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c88:	58 78       	cp.w	r8,7
80006c8a:	fe 98 ff ed 	brls	80006c64 <main+0x15c>
			data_usart_tx_packet.imudata[n][m] = 0;
		}
	}
	
	/* Initialize SPI input buffer */
	for (m = 0; m < DSP_PREBUFFER_NB_SAMPLES; m++) {
80006c8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c92:	2f f8       	sub	r8,-1
80006c94:	ef 48 ff f4 	st.w	r7[-12],r8
80006c98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c9c:	e0 48 00 ff 	cp.w	r8,255
80006ca0:	fe 98 ff de 	brls	80006c5c <main+0x154>
			spi_rx_data_buffer[m][n] = 0;
		}
	}
	
	/* Set up peripheral modules other than TWI, which needs INTC first */
	config_usart();
80006ca4:	f0 1f 00 4c 	mcall	80006dd4 <main+0x2cc>
	config_rn42(USARTBT_MODULE);	
80006ca8:	fe 7c 3c 00 	mov	r12,-50176
80006cac:	f0 1f 00 4b 	mcall	80006dd8 <main+0x2d0>
	config_spi();
80006cb0:	f0 1f 00 4b 	mcall	80006ddc <main+0x2d4>
	ads1299_device_init(SPI_ADS1299_MAIN_CHIPNUM, 0);	
80006cb4:	30 0b       	mov	r11,0
80006cb6:	30 0c       	mov	r12,0
80006cb8:	f0 1f 00 4a 	mcall	80006de0 <main+0x2d8>
		
	/* Verify ADS1299 device ID */
	//usart_write_line(AUX_USART, "Checking ADS1299 device ID...\r\n");
	if (ads1299_check_device_id(SPI_ADS1299_MAIN_CHIPNUM) == STATUS_OK) {
80006cbc:	30 0c       	mov	r12,0
80006cbe:	f0 1f 00 4a 	mcall	80006de4 <main+0x2dc>
80006cc2:	18 98       	mov	r8,r12
80006cc4:	58 08       	cp.w	r8,0
80006cc6:	c0 b0       	breq	80006cdc <main+0x1d4>
		//usart_write_line(AUX_USART, "Device ID verified.\r\n");
	}
	else {
		usart_write_line(AUX_USART, "Invalid ID. Possible SPI error.\r\n");
80006cc8:	4c 8b       	lddpc	r11,80006de8 <main+0x2e0>
80006cca:	fe 7c 3c 00 	mov	r12,-50176
80006cce:	f0 1f 00 48 	mcall	80006dec <main+0x2e4>
		/* Don't continue in error state; go to DEEPSTOP */
		AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
80006cd2:	fe 78 10 00 	mov	r8,-61440
80006cd6:	70 08       	ld.w	r8,r8[0x0]
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80006cd8:	e9 b0 00 04 	sleep	0x4
	}
	
	
	/* Configure global interrupt controller */
	Disable_global_interrupt();
80006cdc:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80006cde:	f0 1f 00 45 	mcall	80006df0 <main+0x2e8>
	
	#if (BRAINBOARD_REV > 0)
	/* Init TWI */
	config_twim();
80006ce2:	f0 1f 00 45 	mcall	80006df4 <main+0x2ec>
	
	/* Initialize the MPU6050 IMU */
	//usart_write_line(AUX_USART, "Initializing IMU...\r\n");
	if (mpu6050_initialize_normal(MPU6050_DEFAULT_ADDRESS) == STATUS_OK) {
80006ce6:	36 8c       	mov	r12,104
80006ce8:	f0 1f 00 44 	mcall	80006df8 <main+0x2f0>
80006cec:	18 98       	mov	r8,r12
80006cee:	58 08       	cp.w	r8,0
80006cf0:	c0 b0       	breq	80006d06 <main+0x1fe>
		//usart_write_line(AUX_USART, "IMU successfully initialized.\r\n");
	}
	else {
		usart_write_line(AUX_USART, "IMU failed to initialize.\r\n");
80006cf2:	4c 3b       	lddpc	r11,80006dfc <main+0x2f4>
80006cf4:	fe 7c 3c 00 	mov	r12,-50176
80006cf8:	f0 1f 00 3d 	mcall	80006dec <main+0x2e4>
		/* Don't continue in error state; go to DEEPSTOP */
		AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
80006cfc:	fe 78 10 00 	mov	r8,-61440
80006d00:	70 08       	ld.w	r8,r8[0x0]
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80006d02:	e9 b0 00 04 	sleep	0x4
	}
	#endif
	
	/* Configure DRDY interrupt */
	config_eic();
80006d06:	f0 1f 00 3f 	mcall	80006e00 <main+0x2f8>
	
	/* Set up DMA for SPI/USART communications */
	config_dma();
80006d0a:	f0 1f 00 3f 	mcall	80006e04 <main+0x2fc>
	
	Enable_global_interrupt();
80006d0e:	d5 03       	csrf	0x10
	
	/* Enable receipt of USART commands */
	pdca_enable(DATA_USART_RX_PDCA_CHANNEL);
80006d10:	30 1c       	mov	r12,1
80006d12:	f0 1f 00 3e 	mcall	80006e08 <main+0x300>
// 	ads1299_send_byte(SPI_ADS1299_MAIN_CHIPNUM, ADS1299_OPC_RDATAC);			
// 	ads1299_soft_start_conversion(SPI_ADS1299_MAIN_CHIPNUM);
	
	while(1)
	{
		if (frame_complete_flag) 
80006d16:	4a 98       	lddpc	r8,80006db8 <main+0x2b0>
80006d18:	70 08       	ld.w	r8,r8[0x0]
80006d1a:	58 08       	cp.w	r8,0
80006d1c:	c3 f0       	breq	80006d9a <main+0x292>
		{
			Disable_global_interrupt();
80006d1e:	d3 03       	ssrf	0x10
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
80006d20:	30 08       	mov	r8,0
80006d22:	ef 48 ff f8 	st.w	r7[-8],r8
80006d26:	c3 08       	rjmp	80006d86 <main+0x27e>
			{
				k = spi_buf_read_idx;
80006d28:	4a 28       	lddpc	r8,80006db0 <main+0x2a8>
80006d2a:	70 08       	ld.w	r8,r8[0x0]
80006d2c:	ef 48 ff fc 	st.w	r7[-4],r8
				for (m = 0; m < FRAME_SIZE; m++)
80006d30:	30 08       	mov	r8,0
80006d32:	ef 48 ff f4 	st.w	r7[-12],r8
80006d36:	c1 d8       	rjmp	80006d70 <main+0x268>
					 * It's possible we could increase the dynamic range by eliminating 
					 * some of the lower bits through right-shifting before the cast, but 
					 * this should be sufficient for well-conditioned EEG electrodes.
					 */
					
					dsp_filter_input_buffer[m] = (dsp16_t) (spi_rx_data_buffer[k][n]);
80006d38:	ee fa ff f4 	ld.w	r10,r7[-12]
80006d3c:	ee fb ff fc 	ld.w	r11,r7[-4]
80006d40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d44:	4a 38       	lddpc	r8,80006dd0 <main+0x2c8>
80006d46:	a3 7b       	lsl	r11,0x3
80006d48:	f6 09 00 09 	add	r9,r11,r9
80006d4c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006d50:	5c 88       	casts.h	r8
80006d52:	4a f9       	lddpc	r9,80006e0c <main+0x304>
80006d54:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
					k = (k+1) % DSP_PREBUFFER_NB_SAMPLES;
80006d58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d5c:	2f f8       	sub	r8,-1
80006d5e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80006d62:	ef 48 ff fc 	st.w	r7[-4],r8
			Disable_global_interrupt();
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
			{
				k = spi_buf_read_idx;
				for (m = 0; m < FRAME_SIZE; m++)
80006d66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d6a:	2f f8       	sub	r8,-1
80006d6c:	ef 48 ff f4 	st.w	r7[-12],r8
80006d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d74:	e0 48 00 7f 	cp.w	r8,127
80006d78:	fe 98 ff e0 	brls	80006d38 <main+0x230>
	{
		if (frame_complete_flag) 
		{
			Disable_global_interrupt();
			/* DSP stuff on current frame */
			for (n = 0; n < MAX_EEG_CHANNELS; n++)
80006d7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d80:	2f f8       	sub	r8,-1
80006d82:	ef 48 ff f8 	st.w	r7[-8],r8
80006d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d8a:	58 78       	cp.w	r8,7
80006d8c:	fe 98 ff ce 	brls	80006d28 <main+0x220>
				}
				
				/* Execute filter and/or other operations */

			}
			spi_buf_read_idx = k;
80006d90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d94:	48 78       	lddpc	r8,80006db0 <main+0x2a8>
80006d96:	91 09       	st.w	r8[0x0],r9
		{
			/* Go to IDLE and wait for DRDY interrupt */
			AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
			SLEEP(AVR32_PM_SMODE_IDLE);
		}
	}
80006d98:	cb fb       	rjmp	80006d16 <main+0x20e>
			
		}
		else 
		{
			/* Go to IDLE and wait for DRDY interrupt */
			AVR32_INTC.ipr[0];  // Dummy read in case any PB write operations are incomplete
80006d9a:	fe 78 10 00 	mov	r8,-61440
80006d9e:	70 08       	ld.w	r8,r8[0x0]
			SLEEP(AVR32_PM_SMODE_IDLE);
80006da0:	e9 b0 00 00 	sleep	0x0
		}
	}
80006da4:	cb 9b       	rjmp	80006d16 <main+0x20e>
80006da6:	00 00       	add	r0,r0
80006da8:	00 00       	add	r0,r0
80006daa:	21 e8       	sub	r8,30
80006dac:	00 00       	add	r0,r0
80006dae:	21 e0       	sub	r0,30
80006db0:	00 00       	add	r0,r0
80006db2:	01 50       	ld.sh	r0,--r0
80006db4:	00 00       	add	r0,r0
80006db6:	21 58       	sub	r8,21
80006db8:	00 00       	add	r0,r0
80006dba:	22 ec       	sub	r12,46
80006dbc:	00 00       	add	r0,r0
80006dbe:	21 dc       	sub	r12,29
80006dc0:	80 00       	ld.sh	r0,r0[0x0]
80006dc2:	53 88       	stdsp	sp[0xe0],r8
80006dc4:	80 00       	ld.sh	r0,r0[0x0]
80006dc6:	59 88       	cp.w	r8,24
80006dc8:	80 00       	ld.sh	r0,r0[0x0]
80006dca:	5e f0       	retal	r0
80006dcc:	00 00       	add	r0,r0
80006dce:	00 08       	add	r8,r0
80006dd0:	00 00       	add	r0,r0
80006dd2:	01 54       	ld.sh	r4,--r0
80006dd4:	80 00       	ld.sh	r0,r0[0x0]
80006dd6:	60 08       	ld.w	r8,r0[0x0]
80006dd8:	80 00       	ld.sh	r0,r0[0x0]
80006dda:	60 64       	ld.w	r4,r0[0x18]
80006ddc:	80 00       	ld.sh	r0,r0[0x0]
80006dde:	5e 7c       	retpl	r12
80006de0:	80 00       	ld.sh	r0,r0[0x0]
80006de2:	21 b4       	sub	r4,27
80006de4:	80 00       	ld.sh	r0,r0[0x0]
80006de6:	6a c8       	ld.w	r8,r5[0x30]
80006de8:	80 00       	ld.sh	r0,r0[0x0]
80006dea:	55 f0       	stdsp	sp[0x17c],r0
80006dec:	80 00       	ld.sh	r0,r0[0x0]
80006dee:	4a 84       	lddpc	r4,80006e8c <mpu6050_initialize_normal+0x7c>
80006df0:	80 00       	ld.sh	r0,r0[0x0]
80006df2:	37 04       	mov	r4,112
80006df4:	80 00       	ld.sh	r0,r0[0x0]
80006df6:	5f b4       	srhi	r4
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	6e 10       	ld.w	r0,r7[0x4]
80006dfc:	80 00       	ld.sh	r0,r0[0x0]
80006dfe:	56 14       	stdsp	sp[0x184],r4
80006e00:	80 00       	ld.sh	r0,r0[0x0]
80006e02:	5d bc       	*unknown*
80006e04:	80 00       	ld.sh	r0,r0[0x0]
80006e06:	5c b0       	swap.b	r0
80006e08:	80 00       	ld.sh	r0,r0[0x0]
80006e0a:	3a 14       	mov	r4,-95
80006e0c:	00 00       	add	r0,r0
80006e0e:	21 ec       	sub	r12,30

80006e10 <mpu6050_initialize_normal>:

uint8_t mpu6050_tx_buffer[1];
uint8_t mpu6050_rx_buffer[14];

status_code_t mpu6050_initialize_normal(uint32_t saddr)
{	
80006e10:	eb cd 40 80 	pushm	r7,lr
80006e14:	1a 97       	mov	r7,sp
80006e16:	20 7d       	sub	sp,28
80006e18:	ef 4c ff e4 	st.w	r7[-28],r12
	{
		.chip			= MPU6050_DEFAULT_ADDRESS,
		.addr_length	= 1,
		.buffer			= (void *)mpu6050_tx_buffer,
		.length			= 1
	};
80006e1c:	ee c8 00 18 	sub	r8,r7,24
80006e20:	30 0a       	mov	r10,0
80006e22:	30 0b       	mov	r11,0
80006e24:	f0 eb 00 00 	st.d	r8[0],r10
80006e28:	2f 88       	sub	r8,-8
80006e2a:	30 0a       	mov	r10,0
80006e2c:	30 0b       	mov	r11,0
80006e2e:	f0 eb 00 00 	st.d	r8[0],r10
80006e32:	2f 88       	sub	r8,-8
80006e34:	30 09       	mov	r9,0
80006e36:	91 09       	st.w	r8[0x0],r9
80006e38:	2f c8       	sub	r8,-4
80006e3a:	36 88       	mov	r8,104
80006e3c:	ef 48 ff e8 	st.w	r7[-24],r8
80006e40:	30 18       	mov	r8,1
80006e42:	ef 68 ff ef 	st.b	r7[-17],r8
80006e46:	4c 38       	lddpc	r8,80006f50 <mpu6050_initialize_normal+0x140>
80006e48:	ef 48 ff f0 	st.w	r7[-16],r8
80006e4c:	30 18       	mov	r8,1
80006e4e:	ef 48 ff f4 	st.w	r7[-12],r8
	
	status = STATUS_OK;
80006e52:	30 08       	mov	r8,0
80006e54:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Disable temperature sensor, source the MPU6050's clock from the X gyro oscillator, leave SLEEP */
	init_package.addr[0] = MPU6050_RA_PWR_MGMT_1;
80006e58:	36 b8       	mov	r8,107
80006e5a:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (	(1 << MPU6050_PWR1_TEMP_DIS_BIT)
80006e5e:	4b d9       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006e60:	30 98       	mov	r8,9
80006e62:	b2 88       	st.b	r9[0x0],r8
							|	(0 << MPU6050_PWR1_SLEEP_BIT) 
							|         MPU6050_CLOCK_PLL_XGYRO    );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80006e64:	ee c8 00 18 	sub	r8,r7,24
80006e68:	10 9b       	mov	r11,r8
80006e6a:	fe 7c 44 00 	mov	r12,-48128
80006e6e:	f0 1f 00 3a 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006e72:	18 98       	mov	r8,r12
80006e74:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Sanity check: read back that register */
// 	twim_read_packet(I2C_MODULE, (const twim_package_t*)&verify_package);
	
	/* Set desired sample rate */
	init_package.addr[0] = MPU6050_RA_SMPLRT_DIV;
80006e78:	31 98       	mov	r8,25
80006e7a:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (uint8_t)((MPU6050_GYRO_OUTPUT_RATE_HZ/MPU6050_SAMPLING_RATE_HZ)-1);
80006e7e:	4b 59       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006e80:	31 f8       	mov	r8,31
80006e82:	b2 88       	st.b	r9[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80006e84:	ee c8 00 18 	sub	r8,r7,24
80006e88:	10 9b       	mov	r11,r8
80006e8a:	fe 7c 44 00 	mov	r12,-48128
80006e8e:	f0 1f 00 32 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006e92:	18 98       	mov	r8,r12
80006e94:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Configure LPF for 256 Hz bandwidth */
	init_package.addr[0] = MPU6050_RA_CONFIG;
80006e98:	31 a8       	mov	r8,26
80006e9a:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = MPU6050_DLPF_BW;
80006e9e:	4a d9       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006ea0:	30 08       	mov	r8,0
80006ea2:	b2 88       	st.b	r9[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t*)&init_package);
80006ea4:	ee c8 00 18 	sub	r8,r7,24
80006ea8:	10 9b       	mov	r11,r8
80006eaa:	fe 7c 44 00 	mov	r12,-48128
80006eae:	f0 1f 00 2a 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006eb2:	18 98       	mov	r8,r12
80006eb4:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Gyro full-scale at +/-250 deg/s */
	init_package.addr[0] = MPU6050_RA_GYRO_CONFIG;
80006eb8:	31 b8       	mov	r8,27
80006eba:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (MPU6050_GYRO_FS_250 << MPU6050_GCONFIG_FS_SEL_BIT);
80006ebe:	4a 59       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006ec0:	30 08       	mov	r8,0
80006ec2:	b2 88       	st.b	r9[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80006ec4:	ee c8 00 18 	sub	r8,r7,24
80006ec8:	10 9b       	mov	r11,r8
80006eca:	fe 7c 44 00 	mov	r12,-48128
80006ece:	f0 1f 00 22 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006ed2:	18 98       	mov	r8,r12
80006ed4:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Accelerometer full-scale at +/-2 g */
	init_package.addr[0] = MPU6050_RA_ACCEL_CONFIG;
80006ed8:	31 c8       	mov	r8,28
80006eda:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT);
80006ede:	49 d9       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006ee0:	30 08       	mov	r8,0
80006ee2:	b2 88       	st.b	r9[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80006ee4:	ee c8 00 18 	sub	r8,r7,24
80006ee8:	10 9b       	mov	r11,r8
80006eea:	fe 7c 44 00 	mov	r12,-48128
80006eee:	f0 1f 00 1a 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006ef2:	18 98       	mov	r8,r12
80006ef4:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* INT pin active high, push-pull, latched until any register read; FSYNC disabled */
	init_package.addr[0] = MPU6050_RA_INT_PIN_CFG;
80006ef8:	33 78       	mov	r8,55
80006efa:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (  (MPU6050_INTMODE_ACTIVEHIGH << MPU6050_INTCFG_INT_LEVEL_BIT   )	
80006efe:	49 59       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006f00:	33 08       	mov	r8,48
80006f02:	b2 88       	st.b	r9[0x0],r8
							| (MPU6050_INTDRV_PUSHPULL    << MPU6050_INTCFG_INT_OPEN_BIT    )
							| (MPU6050_INTLATCH_WAITCLEAR << MPU6050_INTCFG_LATCH_INT_EN_BIT)
							| (MPU6050_INTCLEAR_ANYREAD   << MPU6050_INTCFG_INT_RD_CLEAR_BIT)  );
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80006f04:	ee c8 00 18 	sub	r8,r7,24
80006f08:	10 9b       	mov	r11,r8
80006f0a:	fe 7c 44 00 	mov	r12,-48128
80006f0e:	f0 1f 00 12 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006f12:	18 98       	mov	r8,r12
80006f14:	ef 48 ff fc 	st.w	r7[-4],r8
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
// 	mpu6050_tx_buffer[0] = (1 << MPU6050_USERCTRL_FIFO_EN_BIT);
// 	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
	
	/* Enable INT pin assertion upon entering DATA_RDY state */
	init_package.addr[0] = MPU6050_RA_INT_ENABLE;
80006f18:	33 88       	mov	r8,56
80006f1a:	ef 68 ff ec 	st.b	r7[-20],r8
	mpu6050_tx_buffer[0] = (1 << MPU6050_INTERRUPT_DATA_RDY_BIT);
80006f1e:	48 d9       	lddpc	r9,80006f50 <mpu6050_initialize_normal+0x140>
80006f20:	30 18       	mov	r8,1
80006f22:	b2 88       	st.b	r9[0x0],r8
	status = twim_write_packet(I2C_MODULE, (const twim_package_t *)&init_package);
80006f24:	ee c8 00 18 	sub	r8,r7,24
80006f28:	10 9b       	mov	r11,r8
80006f2a:	fe 7c 44 00 	mov	r12,-48128
80006f2e:	f0 1f 00 0a 	mcall	80006f54 <mpu6050_initialize_normal+0x144>
80006f32:	18 98       	mov	r8,r12
80006f34:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (status != STATUS_OK) {
80006f38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f3c:	58 08       	cp.w	r8,0
80006f3e:	c0 30       	breq	80006f44 <mpu6050_initialize_normal+0x134>
		return ERR_IO_ERROR;
80006f40:	3f f8       	mov	r8,-1
80006f42:	c0 28       	rjmp	80006f46 <mpu6050_initialize_normal+0x136>
	}
	return STATUS_OK;
80006f44:	30 08       	mov	r8,0
}
80006f46:	10 9c       	mov	r12,r8
80006f48:	2f 9d       	sub	sp,-28
80006f4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f4e:	00 00       	add	r0,r0
80006f50:	00 00       	add	r0,r0
80006f52:	22 f0       	sub	r0,47
80006f54:	80 00       	ld.sh	r0,r0[0x0]
80006f56:	44 64       	lddsp	r4,sp[0x118]

80006f58 <mpu6050_rdata16_packet>:
	}
	return STATUS_OK;
}

status_code_t mpu6050_rdata16_packet(uint32_t saddr, volatile uint32_t sample_idx, data_packet_t* packet)
{
80006f58:	eb cd 40 80 	pushm	r7,lr
80006f5c:	1a 97       	mov	r7,sp
80006f5e:	20 dd       	sub	sp,52
80006f60:	ef 4c ff d4 	st.w	r7[-44],r12
80006f64:	ef 4b ff d0 	st.w	r7[-48],r11
80006f68:	ef 4a ff cc 	st.w	r7[-52],r10
		.chip			= saddr,
		.addr[0]		= MPU6050_RA_ACCEL_XOUT_H,
		.addr_length	= 1,
		.buffer			= (void *)data,
		.length			= 14
	};
80006f6c:	ee c8 00 28 	sub	r8,r7,40
80006f70:	30 0a       	mov	r10,0
80006f72:	30 0b       	mov	r11,0
80006f74:	f0 eb 00 00 	st.d	r8[0],r10
80006f78:	2f 88       	sub	r8,-8
80006f7a:	30 0a       	mov	r10,0
80006f7c:	30 0b       	mov	r11,0
80006f7e:	f0 eb 00 00 	st.d	r8[0],r10
80006f82:	2f 88       	sub	r8,-8
80006f84:	30 09       	mov	r9,0
80006f86:	91 09       	st.w	r8[0x0],r9
80006f88:	2f c8       	sub	r8,-4
80006f8a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006f8e:	ef 48 ff d8 	st.w	r7[-40],r8
80006f92:	33 b8       	mov	r8,59
80006f94:	ef 68 ff dc 	st.b	r7[-36],r8
80006f98:	30 18       	mov	r8,1
80006f9a:	ef 68 ff df 	st.b	r7[-33],r8
80006f9e:	ee c8 00 12 	sub	r8,r7,18
80006fa2:	ef 48 ff e0 	st.w	r7[-32],r8
80006fa6:	30 e8       	mov	r8,14
80006fa8:	ef 48 ff e4 	st.w	r7[-28],r8
	
	status = twim_read_packet(I2C_MODULE, &twim_package);
80006fac:	ee c8 00 28 	sub	r8,r7,40
80006fb0:	10 9b       	mov	r11,r8
80006fb2:	fe 7c 44 00 	mov	r12,-48128
80006fb6:	f0 1f 00 66 	mcall	8000714c <mpu6050_rdata16_packet+0x1f4>
80006fba:	18 98       	mov	r8,r12
80006fbc:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Accelerometer data */
	packet->imudata[sample_idx][0] = data[0];
80006fc0:	ee fa ff d0 	ld.w	r10,r7[-48]
80006fc4:	ef 09 ff ee 	ld.sh	r9,r7[-18]
80006fc8:	ee fb ff cc 	ld.w	r11,r7[-52]
80006fcc:	14 98       	mov	r8,r10
80006fce:	a1 78       	lsl	r8,0x1
80006fd0:	14 08       	add	r8,r10
80006fd2:	a3 68       	lsl	r8,0x2
80006fd4:	f6 08 00 08 	add	r8,r11,r8
80006fd8:	2e 48       	sub	r8,-28
80006fda:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80006fde:	a9 8a       	lsr	r10,0x8
80006fe0:	5c 7a       	castu.h	r10
80006fe2:	11 ab       	ld.ub	r11,r8[0x2]
80006fe4:	e2 1b 00 00 	andl	r11,0x0,COH
80006fe8:	f7 ea 10 0a 	or	r10,r11,r10
80006fec:	b0 aa       	st.b	r8[0x2],r10
80006fee:	5c 79       	castu.h	r9
80006ff0:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80006ff4:	11 ba       	ld.ub	r10,r8[0x3]
80006ff6:	e2 1a 00 00 	andl	r10,0x0,COH
80006ffa:	f5 e9 10 09 	or	r9,r10,r9
80006ffe:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][1] = data[1];
80007000:	ee fa ff d0 	ld.w	r10,r7[-48]
80007004:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007008:	ee fb ff cc 	ld.w	r11,r7[-52]
8000700c:	14 98       	mov	r8,r10
8000700e:	a1 78       	lsl	r8,0x1
80007010:	14 08       	add	r8,r10
80007012:	a3 68       	lsl	r8,0x2
80007014:	f6 08 00 08 	add	r8,r11,r8
80007018:	2e 28       	sub	r8,-30
8000701a:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000701e:	a9 8a       	lsr	r10,0x8
80007020:	5c 7a       	castu.h	r10
80007022:	11 ab       	ld.ub	r11,r8[0x2]
80007024:	e2 1b 00 00 	andl	r11,0x0,COH
80007028:	f7 ea 10 0a 	or	r10,r11,r10
8000702c:	b0 aa       	st.b	r8[0x2],r10
8000702e:	5c 79       	castu.h	r9
80007030:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80007034:	11 ba       	ld.ub	r10,r8[0x3]
80007036:	e2 1a 00 00 	andl	r10,0x0,COH
8000703a:	f5 e9 10 09 	or	r9,r10,r9
8000703e:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][2] = data[2];
80007040:	ee fa ff d0 	ld.w	r10,r7[-48]
80007044:	ef 09 ff f2 	ld.sh	r9,r7[-14]
80007048:	ee fb ff cc 	ld.w	r11,r7[-52]
8000704c:	14 98       	mov	r8,r10
8000704e:	a1 78       	lsl	r8,0x1
80007050:	14 08       	add	r8,r10
80007052:	a3 68       	lsl	r8,0x2
80007054:	f6 08 00 08 	add	r8,r11,r8
80007058:	2e 08       	sub	r8,-32
8000705a:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000705e:	a9 8a       	lsr	r10,0x8
80007060:	5c 7a       	castu.h	r10
80007062:	11 ab       	ld.ub	r11,r8[0x2]
80007064:	e2 1b 00 00 	andl	r11,0x0,COH
80007068:	f7 ea 10 0a 	or	r10,r11,r10
8000706c:	b0 aa       	st.b	r8[0x2],r10
8000706e:	5c 79       	castu.h	r9
80007070:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80007074:	11 ba       	ld.ub	r10,r8[0x3]
80007076:	e2 1a 00 00 	andl	r10,0x0,COH
8000707a:	f5 e9 10 09 	or	r9,r10,r9
8000707e:	b0 b9       	st.b	r8[0x3],r9
	/* Skip temperature data */
	/* Gyro data */
	packet->imudata[sample_idx][3] = data[4];
80007080:	ee fa ff d0 	ld.w	r10,r7[-48]
80007084:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80007088:	ee fb ff cc 	ld.w	r11,r7[-52]
8000708c:	14 98       	mov	r8,r10
8000708e:	a1 78       	lsl	r8,0x1
80007090:	14 08       	add	r8,r10
80007092:	a3 68       	lsl	r8,0x2
80007094:	f6 08 00 08 	add	r8,r11,r8
80007098:	2d e8       	sub	r8,-34
8000709a:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000709e:	a9 8a       	lsr	r10,0x8
800070a0:	5c 7a       	castu.h	r10
800070a2:	11 ab       	ld.ub	r11,r8[0x2]
800070a4:	e2 1b 00 00 	andl	r11,0x0,COH
800070a8:	f7 ea 10 0a 	or	r10,r11,r10
800070ac:	b0 aa       	st.b	r8[0x2],r10
800070ae:	5c 79       	castu.h	r9
800070b0:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
800070b4:	11 ba       	ld.ub	r10,r8[0x3]
800070b6:	e2 1a 00 00 	andl	r10,0x0,COH
800070ba:	f5 e9 10 09 	or	r9,r10,r9
800070be:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][4] = data[5];
800070c0:	ee fa ff d0 	ld.w	r10,r7[-48]
800070c4:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800070c8:	ee fb ff cc 	ld.w	r11,r7[-52]
800070cc:	14 98       	mov	r8,r10
800070ce:	a1 78       	lsl	r8,0x1
800070d0:	14 08       	add	r8,r10
800070d2:	a3 68       	lsl	r8,0x2
800070d4:	f6 08 00 08 	add	r8,r11,r8
800070d8:	2d c8       	sub	r8,-36
800070da:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
800070de:	a9 8a       	lsr	r10,0x8
800070e0:	5c 7a       	castu.h	r10
800070e2:	11 ab       	ld.ub	r11,r8[0x2]
800070e4:	e2 1b 00 00 	andl	r11,0x0,COH
800070e8:	f7 ea 10 0a 	or	r10,r11,r10
800070ec:	b0 aa       	st.b	r8[0x2],r10
800070ee:	5c 79       	castu.h	r9
800070f0:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
800070f4:	11 ba       	ld.ub	r10,r8[0x3]
800070f6:	e2 1a 00 00 	andl	r10,0x0,COH
800070fa:	f5 e9 10 09 	or	r9,r10,r9
800070fe:	b0 b9       	st.b	r8[0x3],r9
	packet->imudata[sample_idx][5] = data[6];
80007100:	ee fa ff d0 	ld.w	r10,r7[-48]
80007104:	ef 09 ff fa 	ld.sh	r9,r7[-6]
80007108:	ee fb ff cc 	ld.w	r11,r7[-52]
8000710c:	14 98       	mov	r8,r10
8000710e:	a1 78       	lsl	r8,0x1
80007110:	14 08       	add	r8,r10
80007112:	a3 68       	lsl	r8,0x2
80007114:	f6 08 00 08 	add	r8,r11,r8
80007118:	2d a8       	sub	r8,-38
8000711a:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
8000711e:	a9 8a       	lsr	r10,0x8
80007120:	5c 7a       	castu.h	r10
80007122:	11 ab       	ld.ub	r11,r8[0x2]
80007124:	e2 1b 00 00 	andl	r11,0x0,COH
80007128:	f7 ea 10 0a 	or	r10,r11,r10
8000712c:	b0 aa       	st.b	r8[0x2],r10
8000712e:	5c 79       	castu.h	r9
80007130:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80007134:	11 ba       	ld.ub	r10,r8[0x3]
80007136:	e2 1a 00 00 	andl	r10,0x0,COH
8000713a:	f5 e9 10 09 	or	r9,r10,r9
8000713e:	b0 b9       	st.b	r8[0x3],r9
	
	return status;
80007140:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80007144:	10 9c       	mov	r12,r8
80007146:	2f 3d       	sub	sp,-52
80007148:	e3 cd 80 80 	ldm	sp++,r7,pc
8000714c:	80 00       	ld.sh	r0,r0[0x0]
8000714e:	42 e8       	lddsp	r8,sp[0xb8]

80007150 <__avr32_udiv64>:
80007150:	d4 31       	pushm	r0-r7,lr
80007152:	1a 97       	mov	r7,sp
80007154:	20 3d       	sub	sp,12
80007156:	10 9c       	mov	r12,r8
80007158:	12 9e       	mov	lr,r9
8000715a:	14 93       	mov	r3,r10
8000715c:	58 09       	cp.w	r9,0
8000715e:	e0 81 00 bd 	brne	800072d8 <__avr32_udiv64+0x188>
80007162:	16 38       	cp.w	r8,r11
80007164:	e0 88 00 40 	brls	800071e4 <__avr32_udiv64+0x94>
80007168:	f0 08 12 00 	clz	r8,r8
8000716c:	c0 d0       	breq	80007186 <__avr32_udiv64+0x36>
8000716e:	f6 08 09 4b 	lsl	r11,r11,r8
80007172:	f0 09 11 20 	rsub	r9,r8,32
80007176:	f8 08 09 4c 	lsl	r12,r12,r8
8000717a:	f4 09 0a 49 	lsr	r9,r10,r9
8000717e:	f4 08 09 43 	lsl	r3,r10,r8
80007182:	f3 eb 10 0b 	or	r11,r9,r11
80007186:	f8 0e 16 10 	lsr	lr,r12,0x10
8000718a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000718e:	f6 0e 0d 00 	divu	r0,r11,lr
80007192:	e6 0b 16 10 	lsr	r11,r3,0x10
80007196:	00 99       	mov	r9,r0
80007198:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000719c:	e0 0a 02 48 	mul	r8,r0,r10
800071a0:	10 3b       	cp.w	r11,r8
800071a2:	c0 a2       	brcc	800071b6 <__avr32_udiv64+0x66>
800071a4:	20 19       	sub	r9,1
800071a6:	18 0b       	add	r11,r12
800071a8:	18 3b       	cp.w	r11,r12
800071aa:	c0 63       	brcs	800071b6 <__avr32_udiv64+0x66>
800071ac:	10 3b       	cp.w	r11,r8
800071ae:	f7 b9 03 01 	sublo	r9,1
800071b2:	f7 dc e3 0b 	addcs	r11,r11,r12
800071b6:	f6 08 01 01 	sub	r1,r11,r8
800071ba:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800071be:	e2 0e 0d 00 	divu	r0,r1,lr
800071c2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800071c6:	00 98       	mov	r8,r0
800071c8:	e0 0a 02 4a 	mul	r10,r0,r10
800071cc:	14 33       	cp.w	r3,r10
800071ce:	c0 82       	brcc	800071de <__avr32_udiv64+0x8e>
800071d0:	20 18       	sub	r8,1
800071d2:	18 03       	add	r3,r12
800071d4:	18 33       	cp.w	r3,r12
800071d6:	c0 43       	brcs	800071de <__avr32_udiv64+0x8e>
800071d8:	14 33       	cp.w	r3,r10
800071da:	f7 b8 03 01 	sublo	r8,1
800071de:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800071e2:	cd f8       	rjmp	800073a0 <__avr32_udiv64+0x250>
800071e4:	58 08       	cp.w	r8,0
800071e6:	c0 51       	brne	800071f0 <__avr32_udiv64+0xa0>
800071e8:	30 19       	mov	r9,1
800071ea:	f2 08 0d 08 	divu	r8,r9,r8
800071ee:	10 9c       	mov	r12,r8
800071f0:	f8 06 12 00 	clz	r6,r12
800071f4:	c0 41       	brne	800071fc <__avr32_udiv64+0xac>
800071f6:	18 1b       	sub	r11,r12
800071f8:	30 19       	mov	r9,1
800071fa:	c4 08       	rjmp	8000727a <__avr32_udiv64+0x12a>
800071fc:	ec 01 11 20 	rsub	r1,r6,32
80007200:	f4 01 0a 49 	lsr	r9,r10,r1
80007204:	f8 06 09 4c 	lsl	r12,r12,r6
80007208:	f6 06 09 48 	lsl	r8,r11,r6
8000720c:	f6 01 0a 41 	lsr	r1,r11,r1
80007210:	f3 e8 10 08 	or	r8,r9,r8
80007214:	f8 03 16 10 	lsr	r3,r12,0x10
80007218:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000721c:	e2 03 0d 00 	divu	r0,r1,r3
80007220:	f0 0b 16 10 	lsr	r11,r8,0x10
80007224:	00 9e       	mov	lr,r0
80007226:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000722a:	e0 05 02 49 	mul	r9,r0,r5
8000722e:	12 3b       	cp.w	r11,r9
80007230:	c0 a2       	brcc	80007244 <__avr32_udiv64+0xf4>
80007232:	20 1e       	sub	lr,1
80007234:	18 0b       	add	r11,r12
80007236:	18 3b       	cp.w	r11,r12
80007238:	c0 63       	brcs	80007244 <__avr32_udiv64+0xf4>
8000723a:	12 3b       	cp.w	r11,r9
8000723c:	f7 be 03 01 	sublo	lr,1
80007240:	f7 dc e3 0b 	addcs	r11,r11,r12
80007244:	12 1b       	sub	r11,r9
80007246:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000724a:	f6 03 0d 02 	divu	r2,r11,r3
8000724e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80007252:	04 99       	mov	r9,r2
80007254:	e4 05 02 4b 	mul	r11,r2,r5
80007258:	16 38       	cp.w	r8,r11
8000725a:	c0 a2       	brcc	8000726e <__avr32_udiv64+0x11e>
8000725c:	20 19       	sub	r9,1
8000725e:	18 08       	add	r8,r12
80007260:	18 38       	cp.w	r8,r12
80007262:	c0 63       	brcs	8000726e <__avr32_udiv64+0x11e>
80007264:	16 38       	cp.w	r8,r11
80007266:	f7 b9 03 01 	sublo	r9,1
8000726a:	f1 dc e3 08 	addcs	r8,r8,r12
8000726e:	f4 06 09 43 	lsl	r3,r10,r6
80007272:	f0 0b 01 0b 	sub	r11,r8,r11
80007276:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000727a:	f8 06 16 10 	lsr	r6,r12,0x10
8000727e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80007282:	f6 06 0d 00 	divu	r0,r11,r6
80007286:	e6 0b 16 10 	lsr	r11,r3,0x10
8000728a:	00 9a       	mov	r10,r0
8000728c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007290:	e0 0e 02 48 	mul	r8,r0,lr
80007294:	10 3b       	cp.w	r11,r8
80007296:	c0 a2       	brcc	800072aa <__avr32_udiv64+0x15a>
80007298:	20 1a       	sub	r10,1
8000729a:	18 0b       	add	r11,r12
8000729c:	18 3b       	cp.w	r11,r12
8000729e:	c0 63       	brcs	800072aa <__avr32_udiv64+0x15a>
800072a0:	10 3b       	cp.w	r11,r8
800072a2:	f7 ba 03 01 	sublo	r10,1
800072a6:	f7 dc e3 0b 	addcs	r11,r11,r12
800072aa:	f6 08 01 01 	sub	r1,r11,r8
800072ae:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800072b2:	e2 06 0d 00 	divu	r0,r1,r6
800072b6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800072ba:	00 98       	mov	r8,r0
800072bc:	e0 0e 02 4b 	mul	r11,r0,lr
800072c0:	16 33       	cp.w	r3,r11
800072c2:	c0 82       	brcc	800072d2 <__avr32_udiv64+0x182>
800072c4:	20 18       	sub	r8,1
800072c6:	18 03       	add	r3,r12
800072c8:	18 33       	cp.w	r3,r12
800072ca:	c0 43       	brcs	800072d2 <__avr32_udiv64+0x182>
800072cc:	16 33       	cp.w	r3,r11
800072ce:	f7 b8 03 01 	sublo	r8,1
800072d2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800072d6:	c6 98       	rjmp	800073a8 <__avr32_udiv64+0x258>
800072d8:	16 39       	cp.w	r9,r11
800072da:	e0 8b 00 65 	brhi	800073a4 <__avr32_udiv64+0x254>
800072de:	f2 09 12 00 	clz	r9,r9
800072e2:	c0 b1       	brne	800072f8 <__avr32_udiv64+0x1a8>
800072e4:	10 3a       	cp.w	r10,r8
800072e6:	5f 2a       	srhs	r10
800072e8:	1c 3b       	cp.w	r11,lr
800072ea:	5f b8       	srhi	r8
800072ec:	10 4a       	or	r10,r8
800072ee:	f2 0a 18 00 	cp.b	r10,r9
800072f2:	c5 90       	breq	800073a4 <__avr32_udiv64+0x254>
800072f4:	30 18       	mov	r8,1
800072f6:	c5 98       	rjmp	800073a8 <__avr32_udiv64+0x258>
800072f8:	f0 09 09 46 	lsl	r6,r8,r9
800072fc:	f2 03 11 20 	rsub	r3,r9,32
80007300:	fc 09 09 4e 	lsl	lr,lr,r9
80007304:	f0 03 0a 48 	lsr	r8,r8,r3
80007308:	f6 09 09 4c 	lsl	r12,r11,r9
8000730c:	f4 03 0a 42 	lsr	r2,r10,r3
80007310:	ef 46 ff f4 	st.w	r7[-12],r6
80007314:	f6 03 0a 43 	lsr	r3,r11,r3
80007318:	18 42       	or	r2,r12
8000731a:	f1 ee 10 0c 	or	r12,r8,lr
8000731e:	f8 01 16 10 	lsr	r1,r12,0x10
80007322:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80007326:	e6 01 0d 04 	divu	r4,r3,r1
8000732a:	e4 03 16 10 	lsr	r3,r2,0x10
8000732e:	08 9e       	mov	lr,r4
80007330:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80007334:	e8 06 02 48 	mul	r8,r4,r6
80007338:	10 33       	cp.w	r3,r8
8000733a:	c0 a2       	brcc	8000734e <__avr32_udiv64+0x1fe>
8000733c:	20 1e       	sub	lr,1
8000733e:	18 03       	add	r3,r12
80007340:	18 33       	cp.w	r3,r12
80007342:	c0 63       	brcs	8000734e <__avr32_udiv64+0x1fe>
80007344:	10 33       	cp.w	r3,r8
80007346:	f7 be 03 01 	sublo	lr,1
8000734a:	e7 dc e3 03 	addcs	r3,r3,r12
8000734e:	10 13       	sub	r3,r8
80007350:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80007354:	e6 01 0d 00 	divu	r0,r3,r1
80007358:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000735c:	00 98       	mov	r8,r0
8000735e:	e0 06 02 46 	mul	r6,r0,r6
80007362:	0c 3b       	cp.w	r11,r6
80007364:	c0 a2       	brcc	80007378 <__avr32_udiv64+0x228>
80007366:	20 18       	sub	r8,1
80007368:	18 0b       	add	r11,r12
8000736a:	18 3b       	cp.w	r11,r12
8000736c:	c0 63       	brcs	80007378 <__avr32_udiv64+0x228>
8000736e:	0c 3b       	cp.w	r11,r6
80007370:	f7 dc e3 0b 	addcs	r11,r11,r12
80007374:	f7 b8 03 01 	sublo	r8,1
80007378:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000737c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80007380:	0c 1b       	sub	r11,r6
80007382:	f0 04 06 42 	mulu.d	r2,r8,r4
80007386:	06 95       	mov	r5,r3
80007388:	16 35       	cp.w	r5,r11
8000738a:	e0 8b 00 0a 	brhi	8000739e <__avr32_udiv64+0x24e>
8000738e:	5f 0b       	sreq	r11
80007390:	f4 09 09 49 	lsl	r9,r10,r9
80007394:	12 32       	cp.w	r2,r9
80007396:	5f b9       	srhi	r9
80007398:	f7 e9 00 09 	and	r9,r11,r9
8000739c:	c0 60       	breq	800073a8 <__avr32_udiv64+0x258>
8000739e:	20 18       	sub	r8,1
800073a0:	30 09       	mov	r9,0
800073a2:	c0 38       	rjmp	800073a8 <__avr32_udiv64+0x258>
800073a4:	30 09       	mov	r9,0
800073a6:	12 98       	mov	r8,r9
800073a8:	10 9a       	mov	r10,r8
800073aa:	12 93       	mov	r3,r9
800073ac:	10 92       	mov	r2,r8
800073ae:	12 9b       	mov	r11,r9
800073b0:	2f dd       	sub	sp,-12
800073b2:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80007400 <_evba>:
80007400:	c0 08       	rjmp	80007400 <_evba>
	...

80007404 <_handle_TLB_Multiple_Hit>:
80007404:	c0 08       	rjmp	80007404 <_handle_TLB_Multiple_Hit>
	...

80007408 <_handle_Bus_Error_Data_Fetch>:
80007408:	c0 08       	rjmp	80007408 <_handle_Bus_Error_Data_Fetch>
	...

8000740c <_handle_Bus_Error_Instruction_Fetch>:
8000740c:	c0 08       	rjmp	8000740c <_handle_Bus_Error_Instruction_Fetch>
	...

80007410 <_handle_NMI>:
80007410:	c0 08       	rjmp	80007410 <_handle_NMI>
	...

80007414 <_handle_Instruction_Address>:
80007414:	c0 08       	rjmp	80007414 <_handle_Instruction_Address>
	...

80007418 <_handle_ITLB_Protection>:
80007418:	c0 08       	rjmp	80007418 <_handle_ITLB_Protection>
	...

8000741c <_handle_Breakpoint>:
8000741c:	c0 08       	rjmp	8000741c <_handle_Breakpoint>
	...

80007420 <_handle_Illegal_Opcode>:
80007420:	c0 08       	rjmp	80007420 <_handle_Illegal_Opcode>
	...

80007424 <_handle_Unimplemented_Instruction>:
80007424:	c0 08       	rjmp	80007424 <_handle_Unimplemented_Instruction>
	...

80007428 <_handle_Privilege_Violation>:
80007428:	c0 08       	rjmp	80007428 <_handle_Privilege_Violation>
	...

8000742c <_handle_Floating_Point>:
8000742c:	c0 08       	rjmp	8000742c <_handle_Floating_Point>
	...

80007430 <_handle_Coprocessor_Absent>:
80007430:	c0 08       	rjmp	80007430 <_handle_Coprocessor_Absent>
	...

80007434 <_handle_Data_Address_Read>:
80007434:	c0 08       	rjmp	80007434 <_handle_Data_Address_Read>
	...

80007438 <_handle_Data_Address_Write>:
80007438:	c0 08       	rjmp	80007438 <_handle_Data_Address_Write>
	...

8000743c <_handle_DTLB_Protection_Read>:
8000743c:	c0 08       	rjmp	8000743c <_handle_DTLB_Protection_Read>
	...

80007440 <_handle_DTLB_Protection_Write>:
80007440:	c0 08       	rjmp	80007440 <_handle_DTLB_Protection_Write>
	...

80007444 <_handle_DTLB_Modified>:
80007444:	c0 08       	rjmp	80007444 <_handle_DTLB_Modified>
	...

80007450 <_handle_ITLB_Miss>:
80007450:	c0 08       	rjmp	80007450 <_handle_ITLB_Miss>
	...

80007460 <_handle_DTLB_Miss_Read>:
80007460:	c0 08       	rjmp	80007460 <_handle_DTLB_Miss_Read>
	...

80007470 <_handle_DTLB_Miss_Write>:
80007470:	c0 08       	rjmp	80007470 <_handle_DTLB_Miss_Write>
	...

80007500 <_handle_Supervisor_Call>:
80007500:	c0 08       	rjmp	80007500 <_handle_Supervisor_Call>
80007502:	d7 03       	nop

80007504 <_int0>:
80007504:	30 0c       	mov	r12,0
80007506:	fe b0 e0 bd 	rcall	80003680 <_get_interrupt_handler>
8000750a:	58 0c       	cp.w	r12,0
8000750c:	f8 0f 17 10 	movne	pc,r12
80007510:	d6 03       	rete

80007512 <_int1>:
80007512:	30 1c       	mov	r12,1
80007514:	fe b0 e0 b6 	rcall	80003680 <_get_interrupt_handler>
80007518:	58 0c       	cp.w	r12,0
8000751a:	f8 0f 17 10 	movne	pc,r12
8000751e:	d6 03       	rete

80007520 <_int2>:
80007520:	30 2c       	mov	r12,2
80007522:	fe b0 e0 af 	rcall	80003680 <_get_interrupt_handler>
80007526:	58 0c       	cp.w	r12,0
80007528:	f8 0f 17 10 	movne	pc,r12
8000752c:	d6 03       	rete

8000752e <_int3>:
8000752e:	30 3c       	mov	r12,3
80007530:	fe b0 e0 a8 	rcall	80003680 <_get_interrupt_handler>
80007534:	58 0c       	cp.w	r12,0
80007536:	f8 0f 17 10 	movne	pc,r12
8000753a:	d6 03       	rete
8000753c:	d7 03       	nop
8000753e:	d7 03       	nop
80007540:	d7 03       	nop
80007542:	d7 03       	nop
80007544:	d7 03       	nop
80007546:	d7 03       	nop
80007548:	d7 03       	nop
8000754a:	d7 03       	nop
8000754c:	d7 03       	nop
8000754e:	d7 03       	nop
80007550:	d7 03       	nop
80007552:	d7 03       	nop
80007554:	d7 03       	nop
80007556:	d7 03       	nop
80007558:	d7 03       	nop
8000755a:	d7 03       	nop
8000755c:	d7 03       	nop
8000755e:	d7 03       	nop
80007560:	d7 03       	nop
80007562:	d7 03       	nop
80007564:	d7 03       	nop
80007566:	d7 03       	nop
80007568:	d7 03       	nop
8000756a:	d7 03       	nop
8000756c:	d7 03       	nop
8000756e:	d7 03       	nop
80007570:	d7 03       	nop
80007572:	d7 03       	nop
80007574:	d7 03       	nop
80007576:	d7 03       	nop
80007578:	d7 03       	nop
8000757a:	d7 03       	nop
8000757c:	d7 03       	nop
8000757e:	d7 03       	nop
80007580:	d7 03       	nop
80007582:	d7 03       	nop
80007584:	d7 03       	nop
80007586:	d7 03       	nop
80007588:	d7 03       	nop
8000758a:	d7 03       	nop
8000758c:	d7 03       	nop
8000758e:	d7 03       	nop
80007590:	d7 03       	nop
80007592:	d7 03       	nop
80007594:	d7 03       	nop
80007596:	d7 03       	nop
80007598:	d7 03       	nop
8000759a:	d7 03       	nop
8000759c:	d7 03       	nop
8000759e:	d7 03       	nop
800075a0:	d7 03       	nop
800075a2:	d7 03       	nop
800075a4:	d7 03       	nop
800075a6:	d7 03       	nop
800075a8:	d7 03       	nop
800075aa:	d7 03       	nop
800075ac:	d7 03       	nop
800075ae:	d7 03       	nop
800075b0:	d7 03       	nop
800075b2:	d7 03       	nop
800075b4:	d7 03       	nop
800075b6:	d7 03       	nop
800075b8:	d7 03       	nop
800075ba:	d7 03       	nop
800075bc:	d7 03       	nop
800075be:	d7 03       	nop
800075c0:	d7 03       	nop
800075c2:	d7 03       	nop
800075c4:	d7 03       	nop
800075c6:	d7 03       	nop
800075c8:	d7 03       	nop
800075ca:	d7 03       	nop
800075cc:	d7 03       	nop
800075ce:	d7 03       	nop
800075d0:	d7 03       	nop
800075d2:	d7 03       	nop
800075d4:	d7 03       	nop
800075d6:	d7 03       	nop
800075d8:	d7 03       	nop
800075da:	d7 03       	nop
800075dc:	d7 03       	nop
800075de:	d7 03       	nop
800075e0:	d7 03       	nop
800075e2:	d7 03       	nop
800075e4:	d7 03       	nop
800075e6:	d7 03       	nop
800075e8:	d7 03       	nop
800075ea:	d7 03       	nop
800075ec:	d7 03       	nop
800075ee:	d7 03       	nop
800075f0:	d7 03       	nop
800075f2:	d7 03       	nop
800075f4:	d7 03       	nop
800075f6:	d7 03       	nop
800075f8:	d7 03       	nop
800075fa:	d7 03       	nop
800075fc:	d7 03       	nop
800075fe:	d7 03       	nop
